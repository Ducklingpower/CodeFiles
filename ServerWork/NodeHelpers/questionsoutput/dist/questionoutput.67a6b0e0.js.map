{"mappings":"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CA,OAAO;YACL,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,MAAM;YACJ,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,KAAK;gBACH,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,OAAO;gBACL,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,SAAS;YACP,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,OAAO;YACL,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,iBAAiB;YACf,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QACA,kBAAkB;YAChB,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO;gBACP,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO,KAAK,IAAI,MAAM;gBACtB,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBACN,OAAO,KAAK,IAAI,MAAM;gBACtB,YAAY;YACd;YACA,IAAI;gBACF,MAAM;gBA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QAAG;YACD,GAAG;YACH,oDAAoD;YACpD,UAAU;gBACR,UAAU;oBACR,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,mCAAmC;YACnC,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;gBACA,UAAU;oBACR,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,kCAAkC;YAClC,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;gBACA,UAAU;oBACR,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,kCAAkC;YAClC,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;gBACA,UAAU;oBACR,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,GAAG;QACL;QACA,4CAA4C;QAC5C;YACE,GAAG;YACH,GAAG;YACH,QAAQ;QACV;QACA,oEAAoE;QACpE;YACE,GAAG;YACH,GAAG;QACL;QACA,iFAAiF;QACjF;YACE,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QACA,+BAA+B;QAC/B;YACE,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF,EAAE,iCAAiC;QACrC;QACA,kEAAkE;QAClE;YACE,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF,EAAE,6BAA6B;QACjC;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF,EAAE,6BAA6B;QACjC;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;YACF,EAAE,sBAAsB;QAC1B;QACA,iEAAiE;QACjE,mEAAmE;QACnE,oEAAoE;QACpE,8BAA8B;QAC9B;QACA,sCAAsC;QAEtC,qBAAqB;QACrB;YACE,GAAG;YACH,UAAU;gBACR,KAAK;oBACH,OAAO;gBACT;YACF,EAAE,2BAA2B;QAC/B;QAAG;YACD,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,GAAG;QACL;QACA,sCAAsC;QACtC;YACE,GAAG;YACH,GAAG;QACL;QACA,iCAAiC;QACjC;YACE,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,GAAG;QACL;QACA,gEAAgE;QAChE;YACE,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,QAAQ;oBACN,OAAO;gBACT;gBACA,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,GAAG;QACL;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;QACH,0DAA0D;QAE1D,sEAAsE;QACtE;YACE,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,OAAO;gBACT;YACF;QACF;QAAG;YACD,GAAG;YACH,4BAA4B;YAC5B,UAAU;gBACR,UAAU;oBACR,OAAO;gBACT;gBACA,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QACA,8BAA8B;QAC9B;YACE,GAAG;YACH,UAAU;gBACR,KAAK;oBACH,aAAa;gBACf;YACF;YACA,eAAe;gBACb,KAAK;oBACH,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;YACA,eAAe;gBACb,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QACA,uBAAuB;QACvB,gFAAgF;QAChF;YACE,GAAG;YACH,GAAG;QACL;QACA,0BAA0B;QAC1B;YACE,GAAG;YACH,2CAA2C;YAC3C,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF,EAAE,0BAA0B;QAC9B;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF,EAAE,0BAA0B;QAC9B;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF,EAAE,0BAA0B;QAC9B;QAAG;YACD,GAAG;YACH,GAAG;QACL;QACA,wCAAwC;QACxC;YACE,GAAG;YACH,iBAAiB;YACjB,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,iBAAiB;YACjB,UAAU;gBACR,UAAU;oBACR,aAAa;oBACb,aAAa;gBACf;YACF;QACF;QACA,wCAAwC;QACxC,sCAAsC;QAEtC,oEAAoE;QACpE,oDAAoD;QACpD;YACE,GAAG;YACH,GAAG;YACH,eAAe;gBACb,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,UAAU;gBACR,UAAU;oBACR,aAAa;gBACf;YACF;QACF;QAAG;YACD,GAAG;YACH,GAAG;QACL;KAAE;IAEF;;;GAGC,GACD,SAAS,kBAAkB,UAAU,EAAE,OAAO;QAC5C,IAAI,UAAU,CAAC;QACf,IAAI,WAAW,GAAG;YAChB,IAAI,KAAK,WAAW,EAAE,MAAM;YAC5B,IAAI,GAAG,WAAW,GAAG;gBACnB,QAAQ,IAAI,EAAE,CAAC,EAAE;gBACjB,QAAQ,IAAI,EAAE,CAAC,EAAE;YACnB,OACE,MAAM,YAAY,2BAA2B,WAAW;QAE5D,OAAO;YACL,QAAQ,IAAI,WAAW;YACvB,QAAQ,IAAI,WAAW;QACzB;QACA,QAAQ,IAAI,aAAa,MAAM,QAAQ;QACvC,QAAQ,IAAI,aAAa,MAAM,QAAQ;QACvC,KAAK,IAAI,QAAQ;YAAC;YAAiB;YAAU;SAAW,CACtD,IAAI,QAAQ,YACV,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK;QAGpC,IAAI,WAAW,UACb,QAAQ,WAAW,MAAM,WAAW;QAEtC,IAAI,cAAc,QAAQ,GAAG,UAAU;YACrC,IAAI,iBAAiB,CAAC,cAAc,QAAQ,GAAG;YAC/C,IAAI;YACJ,4EAA4E;YAC5E,IAAI,gBAAgB,gBAAgB;YACpC,IAAI,WAAW,uBAAuB,QAAQ;YAC9C,IAAI,YAAY;YAChB,QAAQ,WAAW,CAAC;YACpB,QAAQ,SAAS,IAAI,SAAS;gBAAC,QAAQ;gBAAG;aAAU;YACpD,uDAAuD;YACvD,oFAAoF;YACpF,QAAQ,QAAQ,SAAS,GAAG;YAC5B,WAAW,QAAQ,SAAS,GAAG;YAC/B,QAAQ,SAAS,IAAI,SAAS;gBAAC,QAAQ;gBAAG;aAAU;YAEpD,6FAA6F;YAC7F,4FAA4F;YAC5F,kFAAkF;YAClF,IAAI,gBAAgB;gBAClB,8CAA8C;gBAC9C,QAAQ,cAAc,CAAC;gBACvB,QAAQ,YAAY,IAAI,SAAS;oBAAC;oBAAe,QAAQ;iBAAE;gBAC3D,QAAQ,YAAY,IAAI,SAAS;oBAAC;oBAAe,QAAQ;iBAAE;gBAC3D,wDAAwD;gBACxD,QAAQ,cAAc,CAAC;gBACvB,QAAQ,YAAY,IAAI,SAAS;oBAAC;oBAAe,QAAQ,SAAS;iBAAE;gBACpE,QAAQ,YAAY,IAAI,SAAS;oBAAC;oBAAe,QAAQ,SAAS;iBAAE;YACtE;QACF;QACA,OAAO;IACT;IAEA;;;;;;;;;;;;;;;GAeC,GACD,SAAS,YAAY,KAAK,EAAE,OAAO;QACjC,oDAAoD;QACpD,IAAI,UAAU,EAAE;QAChB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAK;YACrC,IAAI,OAAO,KAAK,CAAC,EAAE;YACnB,IAAI,UAAU,KAAK;YACnB,IAAI,WAAW,OAAO;YACtB,OAAQ;gBACN,KAAK;oBACH,OAAO;wBACL,GAAG;oBACL;gBACF,iBAAiB,GACjB,KAAK;oBACH,UAAU,kBAAkB,MAAM;oBAClC;gBACF,KAAK;oBACH,UAAU;oBACV;gBACF;oBACE,MAAM,UAAU,+BAA+B;YACnD;YACA,0CAA0C;YAC1C,uBAAuB;YACvB,QAAQ,KAAK;QACf;QACA,OAAO;IACT;IACA,IAAI,WAAW;IACf,SAAS;QACP,OAAO,IAAI,WAAW,OAAO;IAC/B;IACA,SAAS,UAAU,IAAI,EAAE,KAAK;QAC5B,IAAI,QAAQ,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAA,GAAA,qBAAa;QAC7F,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;QACnF,IAAI,QAAQ,QAAQ;QACpB,QAAQ,YAAY,SAAS,SAAS,OAAO,QAAQ;QACrD,IAAI,MAAM,QAAQ,MAAM;QACxB,MAAM,aAAa;QACnB,IAAI,UAAU,CAAC;QACf,IAAI,MAAM,IAAI,SAAS;YACrB,aAAa;QACf;QACA,MAAO,CAAC,OAAO,CAAC,IAAI,CAAE;YACpB,OAAO,CAAC,IAAI,GAAG;YACf,WAAW,GAAG,kCAAkC;YAChD,IAAI,UAAU;YACd,IAAI,OAAO,QAAQ,IAAI,gBAAgB;YACvC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAK;gBACrC,IAAI,UAAU;gBACd,IAAI,OAAO,KAAK,CAAC,EAAE,KAAK,YAAY;oBAClC,MAAM,KAAK,CAAC,EAAE,CAAC,KAAK;oBACpB,IAAI,OAAO,UAAU,KAAK,CAAC,EAAE,CAAC;gBAChC,OAAO;oBACL,QAAQ,KAAK,QAAQ;oBACrB,MAAM,UAAU,KAAK,KAAK,CAAC,EAAE,EAAE,QAAQ;oBACvC,IAAI,OACF,UAAU,GAAG,OAAO,KAAK,CAAC,EAAE,CAAC,EAAE,YAAY,QAAQ,OAAO,KAAK,CAAC,EAAE,CAAC,EAAE;gBAEzE;gBACA,IAAI,OAAO;oBACT,IAAI,SAAS,IAAI,SAAS;wBACxB,aAAa;oBACf;oBACA,IAAI,WAAW,SAAS;wBACtB,QAAQ,IAAI,YAAY,SAAS,YAAY;wBAC7C,UAAU;oBACZ;gBACF;gBACA;;SAEC,GACD,WAAW,KAAK,QAAQ;YAC1B;YACA,MAAM,IAAI,SAAS;gBACjB,aAAa;YACf;QACF;QACA,OAAO;IACT;IACA,SAAS,QAAQ,KAAK,EAAE,IAAI,EAAE,OAAO;QACnC,IAAI,WAAW;QACf,IAAI,OACF,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,EAAG;YACrC,IAAI,UAAU,UAAU,KAAK,CAAC,EAAE,EAAE,MAAM;YACxC,IAAI,YAAY,KAAK,CAAC,EAAE,EAAE;gBACxB,IAAI,aAAa,OACf,WAAW,MAAM;gBAEnB,QAAQ,CAAC,EAAE,GAAG;YAChB;QACF;QAEF,OAAO;IACT;IAEA;;;;;;;GAOC,GACD,SAAS,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO;QACpC,yKAAyK;QAEzK,wEAAwE;QACxE,WAAW;QACX,IAAI,KAAK,UAAU;YACjB,IAAK,IAAI,UAAU,KAAK,SACtB,IAAK,IAAI,YAAY,KAAK,QAAQ,CAAC,OAAO,CAAE;gBAC1C,IAAI,YAAY,QAAQ,UAAU,aAAa,KAAK,QAAQ,CAAC,OAAO,CAAC,SAAS,EAC5E,OAAO;YAEX;QAEJ;QACA,IAAI,gBAAgB,aAAa,KAAK,eAAe;QAErD,2CAA2C;QAC3C,IAAI,MAAM;QAEV,+DAA+D;QAC/D,8DAA8D;QAC9D,2DAA2D;QAC3D,IAAI,eAAe,gBAAgB,eAAe,cAAc;YAC9D,IAAI,UAAU,QAAQ,IAAI,MAAM,MAAM;YACtC,IAAI,YAAY,IAAI,MAAM;gBACxB,MAAM,IAAI;gBACV,IAAI,OAAO;YACb;QACF,OAAO,IAAI,eAAe,iBACxB;YAAA,IAAI,IAAI,SAAS;gBACf,IAAI,aAAa,UAAU,IAAI,SAAS,MAAM;gBAC9C,IAAI,eAAe,IAAI,SACrB,MAAM,IAAI,gBAAgB;YAE9B;QAAA,OACK,IAAI,eAAe,WAAW;YACnC,IAAI,WAAW,QAAQ,IAAI,OAAO,MAAM;YACxC,IAAI,aAAa,IAAI,OACnB,MAAM,IAAI,UAAU;QAExB,OAAO,IAAI,eAAe,cAAc;YACtC,IAAI,SAAS,IAAI;YACjB,IAAI,IAAI,QACN,SAAS,UAAU,IAAI,QAAQ,MAAM;YAEvC,IAAI,WAAW,IAAI;YACnB,IAAI,IAAI,OACN,WAAW,UAAU,IAAI,OAAO,MAAM;YAExC,IAAI,WAAW,IAAI,UAAU,aAAa,IAAI,OAC5C,MAAM,IAAI,aAAa,QAAQ;QAEnC,OAAO,IAAI,eAAe,WAAW;YACnC,IAAI,UAAU,QAAQ,IAAI,YAAY,MAAM;YAC5C,IAAI,YAAY,IAAI,YAClB,MAAM,IAAI,UAAU;QAExB,OAAO,IAAI,eAAe,YAAY;YACpC,IAAI,UAAU;YACd,IAAI,WAAW,CAAC;YAChB,IAAK,IAAI,QAAQ,IAAI,WAAY;gBAC/B,QAAQ,CAAC,KAAK,GAAG,UAAU,IAAI,UAAU,CAAC,KAAK,EAAE,MAAM;gBACvD,IAAI,QAAQ,CAAC,KAAK,KAAK,IAAI,UAAU,CAAC,KAAK,EACzC,UAAU;YAEd;YACA,IAAI,SACF,MAAM,IAAI,WAAW;QAEzB;QAEA,wCAAwC;QACxC,IAAI,OAAO,KAAK;QAChB,IAAI,UAAU,WAAW,KAAK,GAAG,KAAK,cAAc,CAAC,EAAE;QAEvD,+FAA+F;QAC/F,uHAAuH;QACvH,IAAI,CAAC,WAAW,KAAK,UAAU;YAC7B,OAAO,KAAK,SAAS;YACrB,UAAU,WAAW,KAAK,SAAS,GAAG,KAAK,cAAc,CAAC,EAAE;QAC9D;QACA,sDAAsD;QACtD,IAAI,CAAC,WAAW,KAAK,aAAa;YAChC,OAAO,KAAK,YAAY;YACxB,UAAU,WAAW,KAAK,YAAY,GAAG,KAAK,cAAc,CAAC,EAAE;YAC/D,IAAI,CAAC,SAAS;gBACZ,+BAA+B;gBAC/B,OAAO,KAAK,YAAY;gBACxB,UAAU,WAAW,KAAK,YAAY,GAAG,KAAK,cAAc,CAAC,EAAE;YACjE;QACF;QACA,IAAI,SAAS;YACX,oDAAoD;YAEpD,2DAA2D;YAC3D,wDAAwD;YACxD,IAAI,WAAW,IAAI;YACnB,MAAM,KAAK;YACX,IAAI,YAAY,cAAc,MAC5B,IAAI,WAAW;YAGjB,qGAAqG;YACrG,MAAM,IAAI,UAAU,SAAU,IAAI;gBAChC,IAAI,KAAK,gBAAgB,CAAA,GAAA,wBAAa,EAAE,QAAQ,cAAc,KAAK,OACjE,OAAO,QAAQ,YAAY,CAAC,KAAK,KAAK,CAAC;qBAEvC,OAAO;YAEX;QAEA,mDAAmD;QACnD,uDAAuD;QACzD;QAEA,IAAI,KAAK,UAAU,QAAQ,MACzB,MAAM,UAAU,KAAK,MAAM;QAE7B,OAAO;IACT;IAEA;;;;;;;GAOC,GACD,SAAS,UAAU,IAAI,EAAE,OAAO;QAC9B,IAAI,MAAM,EAAE;QACZ,IAAI,OAAO;QACX,IAAI,WAAW,uBAAuB;QACtC,IAAI,cAAc,MAAM,UACtB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,IAAK;YACzC,YAAY,KAAK,KAAK,MAAM;YAC5B,UAAU,OAAO,GAAG;YACpB,QAAQ,UAAU,WAAW,IAAI,SAAS,CAAC,EAAE,GAAG,SAAS;YACzD,IAAI,KAAK,SAAS;gBAAC,KAAK,IAAI,CAAC,EAAE;gBAAE;aAAM;QACzC;aAEA,4CAA4C;QAC5C,IAAK,IAAI,KAAK,GAAG,KAAK,KAAK,KAAK,QAAQ,KAAM;YAC5C,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE;YACvB,IAAI,KAAK,GACP,OAAO,SAAS,KAAK,KAAK,MAAM,GAAG;YAErC,YAAY,KAAK,KAAK,MAAM;YAC5B,QAAQ,UAAU,WAAW,IAAI,SAAS,CAAC,EAAE,GAAG,SAAS;YACzD,IAAI,KAAK,SAAS;gBAAC;gBAAM;aAAM;QACjC;QAEF,OAAO;IACT;IAEA;;GAEC,GACD,SAAS,WAAW,MAAM,EAAE,MAAM;QAChC,IAAI,MAAM;YACR,cAAc,CAAC;QACjB;QAEA,qDAAqD;QACrD,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,cAClC,OAAO;aACF,IAAI,CAAC,OAAO,cACjB,OAAO;aACF,IAAI,CAAC,OAAO,cACjB,OAAO;QAGT,oDAAoD;QACpD,IAAK,IAAI,OAAO,OAAO,aACrB,IAAI,CAAA,GAAA,wBAAa,EAAE,OAAO,cAAc,MAAM;YAC5C,IAAI,YAAY,CAAC,IAAI,GAAG,OAAO,YAAY,CAAC,IAAI;YAChD,IAAI,CAAA,GAAA,wBAAa,EAAE,OAAO,cAAc,MAAM;gBAC5C,IAAI,CAAC,YAAY,OAAO,YAAY,CAAC,IAAI,EAAE,OAAO,YAAY,CAAC,IAAI,GACjE,OAAO;YAEX;QACF;QAEF,IAAK,IAAI,QAAQ,OAAO,aACtB,IAAI,CAAA,GAAA,wBAAa,EAAE,OAAO,cAAc,OACtC,IAAI,YAAY,CAAC,KAAK,GAAG,OAAO,YAAY,CAAC,KAAK;QAGtD,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS,oBAAoB,KAAK,EAAE,KAAK;QACvC,IAAI,MAAM,EAAE;QACZ,IAAI,MAAM,WAAW,KAAK,MAAM,WAAW,GACzC,OAAO;QAET,IAAI;QACJ,IAAK,IAAI,KAAK,GAAG,KAAK,MAAM,QAAQ,KAClC,IAAK,IAAI,KAAK,GAAG,KAAK,MAAM,QAAQ,KAAM;YACxC,SAAS,WAAW,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG;YACxC,IAAI,QACF,IAAI,KAAK;QAEb;QAEF,OAAO;IACT;IAEA;;;;GAIC,GACD,SAAS,kBAAkB,YAAY;QACrC,IAAI,aAAa,WAAW,GAC1B,OAAO;QAET,IAAI,OAAO,aAAa,OAAO;QAC/B,IAAI,aAAa,EAAE;QACnB,IAAI,SAAS,CAAC;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAK;YACpC,IAAI,IAAI,KAAK,UAAU,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;gBACd,MAAM,CAAC,EAAE,GAAG;gBACZ,WAAW,KAAK,IAAI,CAAC,EAAE;YACzB;QACF;QACA,OAAO;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAAS,WAAW,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO;QAC9C,oGAAoG;QACpG,mCAAmC;QACnC,mCAAmC;QAEnC,2IAA2I;QAC3I,IAAI,MAAM;YAAC;gBACT,cAAc,CAAC;YACjB;SAAE;QACF,IAAI,gBAAgB,gBAAgB,gBAAgB,gBAAgB,gBAAgB,gBAAgB,gBAAgB,cAAc;YAChI,iFAAiF;YACjF,IAAI,gBAAgB,cAAc;gBAChC,IAAI,KAAK,OAAO,KAAK,MAAM,KAAK,OAAO,KAAK,IAC1C,OAAO,EAAE;YAEb,OAAO,IAAI,gBAAgB,cAAc;gBACvC,IAAI,KAAK,SAAS,KAAK,MACrB,OAAO,EAAE;YAEb;YAEA,6DAA6D;YAC7D,IAAI,KAAK,KAAK,WAAW,KAAK,KAAK,KAAK,WAAW,KAAK,CAAC,cAAc,MAAM,YAAY,KAAK,KAAK,WAAW,KAAK,KAAK,UAAU,SAAS;gBACzI,qDAAqD;gBACrD,iDAAiD;gBACjD,IAAI,eAAe,EAAE;gBACrB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,IAAK;oBACzC,IAAI,aAAa,WAAW,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE;oBACxD,IAAI,WAAW,WAAW,GAExB;oBAEF,kFAAkF;oBAClF,aAAa,KAAK;gBACpB;gBACA,IAAI,aAAa,WAAW,KAAK,KAAK,QAAQ;oBAC5C,IAAI,CAAC,cAAc,MAAM,YACzB,8BAA8B;oBAC9B,KAAK,KAAK,WAAW,GACnB,qBAAqB;oBACrB,OAAO,EAAE;oBAEX,IAAI,KAAK,KAAK,SAAS,GACrB;;;aAGC,GACD,MAAM,IAAI,MAAM;oBAElB,4CAA4C,GAC5C,IAAI,YAAY,WAAW,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE;oBACvD,IAAI,UAAU,WAAW,GACvB,OAAO,EAAE;oBAEX,IAAI,aAAa,WAAW,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE;oBACxD,IAAI,WAAW,WAAW,GACxB,OAAO,EAAE;oBAEX,eAAe;wBAAC;wBAAW;qBAAW;gBACxC;gBACA,MAAM,kBAAkB;YAC1B,OAAO,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK,WAAW,GAAG;gBAC1D,iCAAiC;gBACjC,yFAAyF;gBACzF,mDAAmD;gBACnD,IAAI,SAAS,UAAU,MAAM;gBAC7B,IAAI,eAAe,EAAE;gBACrB,IAAK,IAAI,MAAM,GAAG,MAAM,OAAO,QAAQ,MAAO;oBAC5C,IAAI,WAAW,WAAW,MAAM,MAAM,CAAC,IAAI,EAAE,SAAS,OAAO,wCAAwC;oBACrG,eAAe,aAAa,OAAO;gBACrC;gBACA,OAAO;YACT,OAAO,IAAI,KAAK,KAAK,SAAS,GAC5B,MAAM,MAAM,iDAAiD,KAAK;iBAElE,8DAA8D;YAC9D,OAAO,EAAE;QAEb,OAAO,IAAI,gBAAgB,YAAY;YACrC,iEAAiE;YACjE,wEAAwE;YACxE,mEAAmE;YACnE,IAAI,KAAK,KAAK,WAAW,GACvB,MAAM,IAAI,MAAM;YAElB,IAAI,mBAAmB,CAAC,KAAK,KAAK,EAAE;gBAClC,uCAAuC;gBACvC,IAAI,KAAK,SAAS,KAAK,MACrB,OAAO,EAAE;YAEb,OACE,0EAA0E;YAC1E,OAAQ,KAAK,IAAI,CAAC,EAAE,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE,IAAI,MAAM,KAAK,KAAK,UAAU,GAAG,KAAK,KAAK,IAAI,CAAC,EAAE;gBAC3F,KAAK;gBACL,KAAK;oBACH,4EAA4E;oBAC5E,4CAA4C;oBAC5C,wDAAwD;oBACxD,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;oBACjC;gBACF,KAAK;gBACL,KAAK;oBACH,8BAA8B;oBAC9B,IAAI,CAAA,GAAA,2BAAa,EAAE,OACjB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,kDAAkD;oBAClD,IAAI,CAAC,CAAA,GAAA,2BAAa,EAAE,OAClB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,4BAA4B;oBAC5B,IAAI,CAAA,GAAA,2BAAa,EAAE,OACjB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,iEAAiE;oBACjE,IAAI,CAAA,GAAA,0BAAY,EAAE,OAChB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,qFAAqF;oBACrF,IAAI,CAAC,CAAA,GAAA,0BAAY,EAAE,OACjB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,sDAAsD;oBACtD,IAAI,CAAA,GAAA,iCAAmB,EAAE,OACvB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF,KAAK;oBACH,6DAA6D;oBAC7D,IAAI,CAAC,CAAA,GAAA,iCAAmB,EAAE,OACxB,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,KAAK,GAAG;yBAEjC,kDAAkD;oBAClD,OAAO,EAAE;oBAEX;gBACF;oBACE,MAAM,IAAI,MAAM,6BAA6B,KAAK;YACtD;QAEJ,OAAO,IAAI,gBAAgB,cAAc;YACvC,sCAAsC;YACtC,IAAI,CAAC,MAAM,KAAK,OAAO,KAAK,QAC1B,OAAO,EAAE;QAEb,OACE,4EAA4E;QAC5E,OAAO,EAAE;QAGX,gBAAgB;QAEhB,4FAA4F;QAC5F,OAAO;IACT;IAEA;;;;;;GAMC,GACD,SAAS,YAAY,CAAC,EAAE,CAAC;QACvB,IAAI,aAAa,gBAAgB,aAAa,cAAc;YAC1D,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QACpB,OAAO;QAEX,OAAO,IAAI,aAAa,cAAc,aAAa,YAAY;YAC7D,IAAI,EAAE,SAAS,EAAE,MACf,OAAO;QAEX,OAAO,IAAI,aAAa,gBAAgB,aAAa,gBAAgB,aAAa,gBAAgB,aAAa,cAAc;YAC3H,IAAI,aAAa,cAAc;gBAC7B,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAC9B,OAAO;YAEX,OAAO,IAAI,aAAa,cAAc;gBACpC,IAAI,EAAE,SAAS,EAAE,MACf,OAAO;YAEX;YACA,IAAI,EAAE,KAAK,WAAW,EAAE,KAAK,QAC3B,OAAO;YAET,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,KAAK,QAAQ,IAAK;gBACtC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,GACnC,OAAO;YAEX;QACF,OACE,OAAO;QAET,OAAO;IACT;IACA,OAAO;AACT;;;;;ACpuCA;AAAA;AACA,mDAAgB;AAGhB,0DAAgB;AALhB;AAEO,SAAS,cAAc,CAAC;IAC7B,OAAO,CAAA,GAAA,oBAAa,EAAE,MAAM,CAAA,GAAA,oBAAa,EAAE,MAAM,EAAE,aAAa,CAAA,GAAA,oBAAa,EAAE,EAAE,IAAI,CAAC,EAAE;AAC1F;AACO,SAAS,qBAAqB,CAAC;IACpC,IAAI,CAAA,GAAA,oBAAa,EAAE,IACjB,uBAAuB;IACvB,OAAO;IAET,IAAI,AAAC,CAAA,CAAA,GAAA,oBAAa,EAAE,MAAM,CAAA,GAAA,oBAAa,EAAE,EAAC,KAAM,EAAE,KAAK,MAAM,uBAC3D,yCAAyC;IACzC,OAAO;IAET,IAAI,CAAA,GAAA,uBAAgB,EAAE,MAAM,qBAAqB,EAAE,UACjD,8BAA8B;IAC9B,OAAO;IAET,OAAO,OAAO,mCAAmC;AACnD;;;;;gDCXW;AARX;;AAGA;AACA;AACA;AAJA,SAAS,QAAQ,MAAM,EAAE,cAAc;IAAI,IAAI,OAAO,OAAO,KAAK;IAAS,IAAI,OAAO,uBAAuB;QAAE,IAAI,UAAU,OAAO,sBAAsB;QAAS,kBAAmB,CAAA,UAAU,QAAQ,OAAO,SAAU,GAAG;YAAI,OAAO,OAAO,yBAAyB,QAAQ,KAAK;QAAY,EAAC,GAAI,KAAK,KAAK,MAAM,MAAM;IAAU;IAAE,OAAO;AAAM;AACpV,SAAS,cAAc,MAAM;IAAI,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAK;QAAE,IAAI,SAAS,QAAQ,SAAS,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC;QAAG,IAAI,IAAI,QAAQ,OAAO,SAAS,CAAC,GAAG,QAAQ,SAAU,GAAG;YAAI,CAAA,GAAA,8BAAc,EAAE,QAAQ,KAAK,MAAM,CAAC,IAAI;QAAG,KAAK,OAAO,4BAA4B,OAAO,iBAAiB,QAAQ,OAAO,0BAA0B,WAAW,QAAQ,OAAO,SAAS,QAAQ,SAAU,GAAG;YAAI,OAAO,eAAe,QAAQ,KAAK,OAAO,yBAAyB,QAAQ;QAAO;IAAI;IAAE,OAAO;AAAQ;AAIzf,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAgB;IAAgB;CAAa;AAC1D,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,YAAY,EACZ,YAAY,EACZ,UAAU,EACX,GAAG;IACJ,gEAAgE;IAChE,gDAAgD;IAChD,yGAAyG;IACzG,yGAAyG;IAEzG,sDAAsD,GACtD,IAAI,IAAI;IACR,IAAI,IAAI;IACR,IAAI,cAAc;IAClB,IAAI,iBAAiB;QACnB,QAAQ,GAAE,KAAK;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,EAAE,GAAE,WAAW;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,GAAG,GAAE,UAAU;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,GAAG,GAAE,UAAU;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,KAAK,GAAE,QAAQ;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,MAAM,GAAE,OAAO;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;QACA,GAAG,GAAE,UAAU;YACb,SAAS;YACT,OAAO;YACP,aAAa;YACb,aAAa;QACf;IACF;IACA,IAAI,cAAc;QAChB,QAAQ;YACN,OAAO;QACT;QACA,KAAK;YACH,OAAO;QACT;IACF;IACA,IAAI,kBAAkB;QACpB,UAAU;YACR,OAAO;QACT;QACA,KAAK;YACH,SAAS;QACX;QACA,KAAK;YACH,OAAO;QACT;IACF;IACA,SAAS,YAAY,UAAU,EAAE,QAAQ;QACvC,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;QAClF,IAAI,OAAO;QACX,IAAI,OAAO,eAAe,UACxB,OAAO;aACF,IAAI,CAAA,GAAA,oBAAa,EAAE,aACxB,OAAO,WAAW,GAAG;aAChB,IAAI,CAAA,GAAA,oBAAa,EAAE,aACxB,OAAO,WAAW;aACb,IAAI,CAAA,GAAA,uBAAgB,EAAE,aAC3B,OAAO;QAET,IAAI,CAAA,GAAA,wBAAa,EAAE,SAAS,OAAO;YACjC,IAAI,aAAa,OAAO,CAAC,KAAK;YAC9B,IAAI,CAAA,GAAA,wBAAa,EAAE,YAAY,WAC7B,OAAO,UAAU,CAAC,SAAS;YAE7B,IAAI,CAAA,GAAA,wBAAa,EAAE,gBAAgB,OACjC,OAAO,cAAc,CAAC,KAAK,CAAC,SAAS;QAEzC;QACA,IAAI,CAAA,GAAA,wBAAa,EAAE,SAAS,cAAc;YACxC,IAAI,cAAc,OAAO,CAAC,YAAY;YACtC,IAAI,CAAA,GAAA,wBAAa,EAAE,aAAa,WAC9B,OAAO,WAAW,CAAC,SAAS;YAE9B,OAAO,cAAc,CAAC,YAAY,CAAC,SAAS;QAC9C;QACA,+DAA+D,GAC/D,2BAA2B,GAC3B,IAAI,CAAA,GAAA,wBAAa,EAAE,gBAAgB,OAAO;YACxC,IAAI,eAAe,cAAc,CAAC,KAAK;YACvC,IAAI,CAAA,GAAA,wBAAa,EAAE,cAAc,WAC/B,OAAO,YAAY,CAAC,SAAS;QAEjC;QACA,OAAO,cAAc,CAAC,YAAY,CAAC,SAAS;IAC9C;IACA,SAAS,cAAc,IAAI;QACzB,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;QAClF,OAAO,YAAY,MAAM,eAAe;IAC1C;IACA,SAAS,cAAc,IAAI;QACzB,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;QAClF,OAAO,YAAY,MAAM,eAAe;IAC1C;IAEA;;;GAGC,GACD,SAAS,aAAa,OAAO,EAAE,SAAS;QACtC,IAAI,SAAS,cAAc,CAAC,GAAG;QAC/B,IAAK,IAAI,QAAQ,UACf,IAAI,CAAA,GAAA,wBAAa,EAAE,SAAS,OAC1B,MAAM,CAAC,KAAK,GAAG,cAAc,cAAc,CAAC,GAAG,SAAS,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK;aAE9E,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK;QAGlC,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS,QAAQ,IAAI,EAAE,OAAO;QAC5B,IAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,WAAW,GACrC,OAAO;QAET,KAAK,OAAO,YAAY,MAAM;QAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,IACpC,QAAQ,KAAK,IAAI,CAAC,EAAE,EAAE;IAE1B;IAEA;;;GAGC,GACD,SAAS,YAAY,IAAI,EAAE,OAAO;QAChC,IAAI;QACJ,IAAI,WAAW,EAAE;QACjB,IAAI,eAAe,SAAS,aAAa,IAAI;YAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,IAAK;gBACzC,IAAI,QAAQ,KAAK,IAAI,CAAC,EAAE;gBACxB,IAAI,CAAA,GAAA,oBAAa,EAAE,UAAU,OAAO,MAAM,IACxC,aAAa;qBAEb,SAAS,KAAK;YAElB;QACF;QACA,IAAI,cAAc,MAAM,UAAU;YAChC,KAAK,KAAK;YACV,aAAa;YACb,OAAO;QACT,OACE,OAAO,KAAK;IAEhB;IAEA;;GAEC,GACD,SAAS,WAAW,IAAI,EAAE,OAAO;QAC/B,IAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,WAAW,GACrC;QAEF,IAAI,WAAW,uBAAuB;QACtC,IAAI,IAAI,KAAK,KAAK;QAClB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACrB,WAAW,KAAK,IAAI,CAAC,EAAE,EAAE;QAE3B,IAAI,IAAI,KAAK,cAAc,MAAM,UAAU;YACzC,IAAI,UAAU,KAAK,KAAK;YACxB,MAAO,KAAK,KAAK,SAAS,EACxB,UAAU,SAAS;gBAAC,KAAK,KAAK;gBAAO;aAAQ;YAE/C,KAAK,OAAO,QAAQ;QACtB;IACF;IAEA;;GAEC,GACD,SAAS,WAAW,IAAI,EAAE,OAAO;QAC/B,IAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,WAAW,GACrC;QAEF,IAAI,WAAW,uBAAuB;QACtC,IAAI,IAAI,KAAK,KAAK;QAClB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACrB,WAAW,KAAK,IAAI,CAAC,EAAE,EAAE;QAE3B,IAAI,IAAI,KAAK,cAAc,MAAM,UAAU;YACzC,IAAI,UAAU,KAAK,KAAK;YACxB,MAAO,KAAK,KAAK,SAAS,EACxB,UAAU,SAAS;gBAAC;gBAAS,KAAK,KAAK;aAAQ;YAEjD,KAAK,OAAO,QAAQ;QACtB;IACF;IACA,SAAS,uBAAuB,IAAI;QAClC,IAAI,CAAA,GAAA,oBAAa,EAAE,OACjB,OAAO,SAAU,IAAI;YACnB,IAAI;gBACF,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK;YACvD,EAAE,OAAO,KAAK;gBACZ,QAAQ,MAAM;gBACd,OAAO,EAAE;YACX;QACF;aAEA,OAAO,SAAU,IAAI;YACnB,OAAO,IAAI,aAAa,IAAI,WAAW,KAAK,OAAO;QACrD;IAEJ;IACA,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;;;;;4DC9PW;AANX;AACA;AACA;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAS;IAAU;IAAqB;IAAU;IAAa;IAAc;IAAgB;IAAa;IAAgB;IAAgB;IAAa;IAAc;IAAgB;CAAa;AACxN,IAAI,yBAAyB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IAC7E,IAAI,EACF,KAAK,EACL,KAAK,EACL,MAAM,EACN,iBAAiB,EACjB,MAAM,EACN,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,UAAU,EACV,YAAY,EACZ,UAAU,EACX,GAAG;IACJ,IAAI,EACF,aAAa,EACb,aAAa,EACb,WAAW,EACX,sBAAsB,EACvB,GAAG,CAAA,GAAA,kBAAS,EAAE;QACb;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,IAAI,mBAAmB,MAAM,oBAAoB;QAC/C,MAAM,CAAA,OAAQ,YAAY,aAAa,MAAM,CAAC;QAC9C,gBAAgB,SAAS,WAAW,IAAI,EAAE,OAAO;YAC/C,OAAO,YAAY,aAAa,MAAM;QACxC;IACF;IACA,SAAS,iBAAiB,KAAK;QAC7B,IAAI,CAAA,GAAA,gBAAS,EAAE,QACb,OAAO,MAAM;QAEf,IAAI,iBAAiB,OACnB,OAAO,MAAM,IAAI;QAEnB,IAAI,CAAA,GAAA,cAAO,EAAE,QACX,OAAO,OAAO,iBAAiB,MAAM;QAEvC,OAAO;IACT;IACA,SAAS,MAAM,MAAM,EAAE,IAAI,EAAE,OAAO;QAClC,IAAI;YACF,OAAO,iBAAiB,CAAC,OAAO,CAAC,MAAM,MAAM;QAC/C,EAAE,OAAO,QAAQ;YACf,oHAAoH;YACpH,OAAO,KAAK,IAAI;YAChB,OAAO,UAAU,iBAAiB,CAAC,OAAO,CAAC,MAAM,MAAM,OAAO;QAChE;IACF;IACA,IAAI,UAAU,MAAM;QAClB,UAAU;QACV,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,IAAI,GACN,OAAO,eAAe,IAAI,aAAa,CAAC;YAE1C,OAAO,IAAI,aAAa;QAC1B;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,IAAI,IAAI,GACN,OAAO,eAAe,IAAI,aAAa,CAAC;YAE1C,OAAO,IAAI,aAAa,IAAI,2CAA2C;QACzE;QAEA,SAAS,SAAS,QAAQ,CAAC;YACzB,MAAM,IAAI,MAAM;QAClB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,aAAa;QAC1B;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,IAAI,UAAU,EAAE,UAAU,IAAI,CAAA,IAAK,QAAQ;QACpD;IACF;IACA,SAAS,YAAY,KAAK;QACxB,IAAI,CAAA,GAAA,YAAK,EAAE,QACT,OAAO;QAET,OAAO,QAAQ;IACjB;IAEA,sEAAsE;IACtE,2DAA2D;IAC3D,SAAS,eAAe,CAAC,EAAE,OAAO;QAChC,IAAI,iBAAiB,WAAW,QAAQ,mBAAmB;QAC3D,IAAI,kBAAkB,SAAS,MAAM,UAAU;YAC7C,IAAI,IAAI,SAAS;YACjB,IAAI,iBAAiB,WAAW,OAAO,QAAQ,mBAAmB,WAAW,QAAQ,iBAAiB,UAAU,sBAAsB;YAEtI,IAAI,EAAE,cAAc,KAAK,EAAE,IAAI,kBAAkB,EAAE,IAAI,gBACrD,OAAO;QAEX;QACA,OAAO;IACT;IAEA,4FAA4F;IAC5F,4BAA4B;IAC5B,IAAI,YAAY,MAAM;QACpB,kBAAkB,SAAS,aAAa,CAAC,EAAE,OAAO;YAChD,IAAI,OAAO,WAAW,aAAa;gBACjC,IAAI,cAAc,WAChB,CAAA,GAAA,mBAAU;gBAEZ,OAAO,UAAU;YACnB,OAAO,IAAI,OAAO,WAAW,YAAY;gBACvC,IAAI,aAAa,WACf,CAAA,GAAA,kBAAS;gBAEX,OAAO,SAAS;YAClB,OAAO;gBACL,IAAI,IAAI,WAAW;gBACnB,OAAO,eAAe,GAAG;YAC3B;QACF;QACA,oBAAoB,SAAS,eAAe,CAAC,EAAE,OAAO;YACpD,OAAO;QACT;QACA,6BAA6B;QAE7B,qBAAqB,SAAS,gBAAgB,CAAC,EAAE,OAAO;YACtD,OAAO;QACT;QACA,6BAA6B;QAE7B,kBAAkB,SAAS,aAAa,CAAC,EAAE,OAAO;YAChD,OAAO,eAAe,GAAG;QAC3B;QACA,mBAAmB,SAAS,cAAc,CAAC,EAAE,OAAO;YAClD,IAAI,EAAE,OAAO,GACX,OAAO;YAET,OAAO,eAAe,EAAE,IAAI;QAC9B;QACA,kBAAkB,SAAS,aAAa,CAAC,EAAE,OAAO;YAChD,OAAO,OAAO,eAAe,EAAE;QACjC;QACA,iBAAiB,SAAS,YAAY,CAAC,EAAE,OAAO;YAC9C,OAAO,EAAE,IAAI;QACf;IACF;IACA,SAAS,eAAe,CAAC;QACvB,OAAO,IAAI,aAAa,KAAK,cAAc;YAAC;SAAE;IAChD;IACA,SAAS,gBAAgB,CAAC;QACxB,IAAI;QACJ,IAAI,KAAK,EAAE,IAAI,EAAE;QACjB,IAAI,KAAK,GACP,IAAI,IAAI,aAAa,KAAK,cAAc;YAAC,IAAI,aAAa,CAAC;SAAI;aAE/D,IAAI,IAAI,aAAa;QAEvB,IAAI,EAAE,MAAM,GACV,OAAO;QAET,OAAO,IAAI,aAAa,KAAK,UAAU;YAAC;YAAG,IAAI,aAAa,EAAE;SAAG;IACnE;IAEA,sEAAsE,GACtE,SAAS,cAAc,GAAG,EAAE,KAAK,EAAE,OAAO;QACxC,IAAI,CAAC,CAAA,GAAA,iBAAU,EAAE,QACf,qCAAqC;QACrC,OAAO,IAAI,aAAa,YAAY,MAAM,YAAY;QAExD,IAAI,CAAA,GAAA,iBAAU,EAAE,QAAQ,CAAA,GAAA,cAAO,EAAE,MAAM;YACrC,IAAI,gBAAgB,MAAM,KAAK,MAAM;YACrC;;;;;OAKC,GACD,MAAO,cAAc,SAAS,EAAG;gBAC/B,IAAI,CAAA,GAAA,oBAAa,EAAE,aAAa,CAAC,EAAE,KAAK,OAAO,aAAa,CAAC,EAAE,CAAC,UAAU,UAAU;oBAClF,IAAI,QAAQ,UAAU,cAAc,QAAQ,OAAO;oBACnD,IAAI,CAAA,GAAA,iBAAU,EAAE,MACd,MAAM,IAAI,KAAK,CAAC,QAAQ,EAAE;yBACrB;wBACL,SAAS;wBACT,MAAM,IAAI,SAAS,CAAC,QAAQ,EAAE;wBAC9B,IAAI,eAAe,OACjB,MAAM,OAAO;oBAEjB;gBACF,OAAO,IAAI,cAAc,SAAS,KAAK,CAAA,GAAA,oBAAa,EAAE,aAAa,CAAC,EAAE,KAAK,OAAO,aAAa,CAAC,EAAE,CAAC,UAAU,UAAU;oBACrH,IAAI,SAAS,UAAU,aAAa,CAAC,EAAE,CAAC,OAAO;oBAC/C,IAAI,WAAW,EAAE;oBACjB,IAAI,YAAY,CAAA,GAAA,iBAAU,EAAE,OAAO,IAAI,QAAQ,IAAI;oBACnD,KAAK,IAAI,QAAQ,UAAW;wBAC1B,IAAI,CAAA,GAAA,iBAAU,EAAE,OACd,SAAS,KAAK,KAAK,KAAK,CAAC,SAAS,EAAE;6BAC/B,IAAI,CAAA,GAAA,cAAO,EAAE,MAClB,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE;6BAE9B;oBAEJ;oBACA,IAAI,SAAS,WAAW,UAAU,QAAQ;wBACxC,IAAI,CAAA,GAAA,iBAAU,EAAE,MACd,MAAM,IAAI,UAAU;6BAEpB,SAAS;wBACT,MAAM,OAAO;wBAEf,cAAc,OAAO,GAAG;oBAC1B,OAEE;gBAEJ,OAEE;YAEJ;YACA,IAAI,cAAc,WAAW,MAAM,WAAW,QAC5C,mCAAmC,GACnC,OAAO,IAAI,aAAa,YAAY,MAAM;YAE5C,IAAI,cAAc,SAAS,GAAG;gBAC5B,uCAAuC,GACvC,QAAQ,IAAI,UAAU;gBACtB,OAAO,IAAI,aAAa,YAAY,MAAM;YAC5C;YACA,4DAA4D,GAC5D,OAAO;QACT;QACA,IAAI,CAAA,GAAA,kBAAW,EAAE,QAAQ,MAAM,WAAW,WAAW,KAAK,CAAA,GAAA,oBAAa,EAAE,MAAM,UAAU,CAAC,EAAE,GAAG;YAC7F,IAAI,MAAM,MAAM,UAAU,CAAC,EAAE,CAAC;YAC9B,IAAI,OAAO,IAAI,YACb,OAAO,IAAI,UAAU,CAAC,IAAI;YAE5B,OAAO,IAAI,gBAAgB,YAAY;QACzC;QACA,0EAA0E,GAC1E,OAAO,IAAI,aAAa,YAAY,MAAM;IAC5C;IAEA;;;;;;;;;GASC,GACD,SAAS,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO;QACzC,IAAI,QAAQ,KAAK;QAEjB,0EAA0E;QAC1E,iDAAiD;QACjD,IAAI,YAAY,KAAK,OAAO,CAAC,OAAO;YAClC,IAAI,CAAC,CAAA,GAAA,YAAK,EAAE,OAAO;gBACjB,IAAI,OAAO,MAAM;gBACjB,IAAI,CAAA,GAAA,YAAK,EAAE,OACT,OAAO;oBAAC;oBAAM;iBAAK;gBAErB,oDAAoD;gBACpD,IAAI;oBACF,MAAM,KAAK,MAAM,IAAI;wBAAC;wBAAM;qBAAK,EAAE;oBACnC,OAAO;gBACT,EAAE,OAAO,mBAAmB;oBAC1B,MAAM,KAAK;gBACX,4BAA4B;gBAC9B;YACF;YAEA,2CAA2C;YAC3C,iDAAiD;YACjD,MAAM,KAAK,YAAY,MAAM;YAC7B,IAAI,UAAU,MAAM,WAAW,IAAI,KAAK,CAAC,EAAE,GAAG,SAAS;YACvD,OAAO;gBAAC,SAAS;oBAAC;oBAAS,YAAY;iBAAM;aAAE;QACjD,GAAG;YAAC;SAAM;QACV,IAAI,UAAU,WAAW,GACvB,OAAO,SAAS,CAAC,EAAE;QAErB,sDAAsD;QACtD,OAAO,SAAS;YAAC,SAAS,CAAC,EAAE;YAAE,QAAQ,SAAS,CAAC,EAAE;SAAE;IACvD;IAEA,sDAAsD;IACtD,SAAS,aAAa,IAAI,EAAE,OAAO;QACjC,OAAQ,KAAK;YACX,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAQ,OAAO,KAAK;oBAClB,KAAK;wBACH,OAAO,UAAU,KAAK,OAAO;oBAC/B,KAAK;wBACH,OAAO,KAAK;oBACd;wBACE,IAAI,CAAC,MAAM,KAAK,QAAQ,OAAO,UAAU,KAAK,OAAO;gBACzD;gBACA,OAAO;YACT,KAAK;gBACH,IAAI,iBAAiB,CAAC,KAAK,KAAK,IAAI,iBAAiB,CAAC,KAAK,KAAK,CAAC,SAC/D,OAAO;gBAGP,oCAAoC;gBACpC,IAAI,oBAAoB;oBAAC;oBAAO;iBAAW;gBAC3C,IAAI,kBAAkB,QAAQ,KAAK,UAAU,IAAI;oBAC/C,IAAI,OAAO,KAAK,KAAK,IAAI,CAAA,MAAO,aAAa,KAAK;oBAElD,0BAA0B;oBAC1B,IAAI,CAAC,KAAK,KAAK,CAAA,GAAA,YAAK,IAClB,IAAI;wBACF,OAAO,MAAM,KAAK,MAAM,MAAM;oBAChC,EAAE,OAAO,mBAAmB,CAAC;oBAG/B,8CAA8C;oBAC9C,IAAI,KAAK,SAAS,UAAU,KAAK,WAAW,KAAK,CAAA,GAAA,iBAAU,EAAE,IAAI,CAAC,EAAE,GAAG;wBACrE,IAAI,KAAK,EAAE;wBACX,IAAI,UAAU,IAAI,CAAC,EAAE;wBACrB,MAAO,CAAA,GAAA,iBAAU,EAAE,SAAU;4BAC3B,GAAG,KAAK,QAAQ,MAAM;4BACtB,UAAU,QAAQ,KAAK,CAAC,EAAE;wBAC5B;wBACA,OAAO,OAAO;oBAChB;oBAEA,mEAAmE;oBACnE,OAAO,IAAI,aAAa,KAAK,MAAM,KAAK,IAAI;gBAC9C;YAIJ,iBAAiB,GACjB,KAAK;gBAED,IAAI,KAAK,KAAK,GAAG;gBACjB,IAAI;gBACJ,IAAI;gBACJ,IAAI,WAAW,uBAAuB;gBACtC,IAAI,CAAA,GAAA,oBAAa,EAAE,SAAS,KAAK,WAAW;oBAC1C,QAAQ;wBAAC,aAAa,KAAK,IAAI,CAAC,EAAE,EAAE;qBAAS;oBAC7C,IAAI,CAAC,CAAA,GAAA,YAAK,EAAE,KAAK,CAAC,EAAE,GAClB,MAAM,MAAM,IAAI,OAAO;yBAEvB,MAAM,SAAS;gBAEnB,OAAO,IAAI,cAAc,MAAM,QAAQ,UAAU;oBAC/C,QAAQ,YAAY,MAAM,QAAQ;oBAClC,QAAQ,MAAM,IAAI,CAAA,MAAO,aAAa,KAAK;oBAC3C,IAAI,cAAc,IAAI,QAAQ,UAAU;wBACtC,8BAA8B;wBAC9B,IAAI,SAAS,EAAE;wBACf,IAAI,OAAO,EAAE;wBACb,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,IAChC,IAAI,CAAC,CAAA,GAAA,YAAK,EAAE,KAAK,CAAC,EAAE,GAClB,OAAO,KAAK,KAAK,CAAC,EAAE;6BAEpB,KAAK,KAAK,KAAK,CAAC,EAAE;wBAGtB,IAAI,OAAO,SAAS,GAAG;4BACrB,MAAM,OAAO,IAAI,QAAQ,UAAU;4BACnC,KAAK,QAAQ;4BACb,MAAM,OAAO,IAAI,MAAM,UAAU;wBACnC,OACE,+DAA+D;wBAC/D,MAAM,OAAO,IAAI,OAAO,UAAU;oBAEtC,OACE,kCAAkC;oBAClC,MAAM,OAAO,IAAI,OAAO,UAAU;gBAEtC,OAAO;oBACL,kCAAkC;oBAClC,QAAQ,KAAK,KAAK,IAAI,CAAA,MAAO,aAAa,KAAK;oBAC/C,MAAM,OAAO,IAAI,OAAO,UAAU;gBACpC;gBACA,OAAO;YAEX,KAAK;gBACH,qCAAqC;gBACrC,OAAO,aAAa,KAAK,SAAS;YACpC,KAAK;gBACH,OAAO,cAAc,aAAa,KAAK,QAAQ,UAAU,aAAa,KAAK,OAAO,UAAU;YAC9F,KAAK;gBAED,IAAI,YAAY,KAAK,MAAM,IAAI,CAAA,OAAQ,aAAa,MAAM;gBAC1D,IAAI,UAAU,KAAK,CAAA,GAAA,YAAK,IACtB,OAAO,IAAI,UAAU,UAAU,IAAI;gBAErC,2DAA2D,GAC3D,OAAO,OAAO;YAElB,KAAK;gBAED,OAAO,IAAI,UAAU,KAAK,WAAW,IAAI,CAAA,IAAK,iBAAiB,GAAG;YAEtE,KAAK;gBAED,IAAI,YAAY,CAAC;gBACjB,IAAK,IAAI,QAAQ,KAAK,WACpB,SAAS,CAAC,KAAK,GAAG,iBAAiB,KAAK,UAAU,CAAC,KAAK,EAAE;gBAE5D,OAAO,IAAI,WAAW;YAE1B,KAAK;YACL,iBAAiB,GACjB,KAAK;YACL,iBAAiB,GACjB,KAAK;YACL,iBAAiB,GACjB,KAAK;YACL,iBAAiB,GACjB,KAAK;YACL,iBAAiB,GACjB;gBACE,MAAM,IAAI,MAAM,gDAAgD,OAAO,KAAK;QAChF;IACF;IACA,OAAO;AACT;;;;;wDCpcW;AANX;AACA;AACA;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAS;IAAS;IAAU;IAAO;IAAY;IAAY;IAAU;IAAO;IAAgB;IAAa;IAAgB;IAAgB;IAAa;IAAc;IAAgB;IAAmB;CAAa;AAC1O,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,EACN,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,GAAG,EACH,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,UAAU,EACV,YAAY,EACZ,eAAe,EACf,UAAU,EACX,GAAG;IACJ,IAAI,QAAQ,IAAI,aAAa;IAC7B,IAAI,QAAQ,IAAI,aAAa;IAC7B,IAAI,QAAQ,IAAI,aAAa;IAC7B,IAAI,QAAQ,IAAI,aAAa;IAC7B,+DAA+D;IAC/D,oCAAoC;IACpC,SAAS,gBAAgB,IAAI;QAC3B,OAAO,CAAA,GAAA,oBAAa,EAAE,SAAS;YAAC;YAAO;YAAO;SAAK,CAAC,SAAS,KAAK;IACpE;IACA,IAAI,EACF,WAAW,EACX,aAAa,EACd,GAAG,CAAA,GAAA,kBAAS,EAAE;QACb;QACA;QACA;IACF;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CC,GACD,SAAS,cAAc,cAAc;QACnC,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;QACnF,IAAI,UAAU,UAAU,QAAQ,UAAU;QAC1C,IAAI,YAAY,gBAAgB,WAAW,UAAU;YACnD,gEAAgE;YAChE,kCAAkC;YAClC,IAAI,CAAA,GAAA,oBAAa,EAAE,mBAAmB,eAAe,KAAK,WAAW,GACnE,OAAO,cAAc,eAAe,IAAI,CAAC,EAAE,EAAE;YAE/C,mDAAmD;YACnD,IAAI,YAAY;YAChB,IAAI,aAAa;YACjB,eAAe,QAAQ,CAAA;gBACrB,EAAE;gBACF,IAAI,eAAe,GACjB,YAAY,cAAc,GAAG;YAEjC;YACA,IAAI,eAAe,GACjB,OAAO;QAEX;QACA,IAAI,OAAO;QACX,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO;YACxB,IAAI,KAAK,CAAA,GAAA,wBAAU,EAAE,KAAK;YAC1B,IAAI,IAAI;gBACN,+CAA+C;gBAC/C,IAAI,KAAK,KAAK,SAAS,KAAK,YAAY,MAAM,eAAe,UAC3D,0EAA0E;gBAC1E,MAAO,KAAK,KAAK,SAAS,EAAG;oBAC3B,IAAI,OAAO,KAAK,KAAK;oBACrB,IAAI,UAAU,KAAK,KAAK;oBACxB,KAAK,KAAK,KAAK,IAAI,aAAa,IAAI,KAAK,MAAM;wBAAC;wBAAM;qBAAQ;gBAChE;gBAEF,OAAO,IAAI,aAAa,IAAI,KAAK,MAAM,KAAK;YAC9C,OACE,OAAO,IAAI,aAAa,cAAc,KAAK,KAAK,KAAK,KAAK,IAAI,CAAA,IAAK,cAAc,GAAG;QAExF;QACA,IAAI,CAAA,GAAA,oBAAa,EAAE,SAAS,KAAK,WAAW;YAC1C,IAAI,KAAK,cAAc,KAAK,IAAI,CAAC,EAAE,EAAE;YACrC,IAAI,KAAK,OAAO,KAAK;gBACnB,cAAc;gBACd,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,GAAG,aAAa,GAAG,OAAO,KAClD,OAAO,GAAG,IAAI,CAAC,EAAE;YAErB;YACA,IAAI,KAAK,OAAO,OACd,cAAc;YACd;gBAAA,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,GAAG,aAAa,GAAG,OAAO,OAAO;oBACzD,wDAAwD;oBACxD,+CAA+C;oBAC/C,gCAAgC;oBAChC,IAAI,gBAAgB,GAAG,IAAI,CAAC,EAAE,GAC5B,OAAO,GAAG,IAAI,CAAC,EAAE;gBAErB;YAAA;YAEF,IAAI,SAAS;YACb,IAAI,KAAK,OAAO,KACd,cAAc;YACd;gBAAA,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,GAAG,cAAc,GAAG,OAAO,YAAY;wBACzC,OAAO,IAAI,aAAa,KAAK,YAAY;4BAAC,GAAG,IAAI,CAAC,EAAE;4BAAE,GAAG,IAAI,CAAC,EAAE;yBAAC;wBACjE,SAAS,OAAO,0CAA0C;oBAC5D;oBAEA,IAAI,GAAG,aAAa,GAAG,OAAO,KAC5B,OAAO,GAAG,IAAI,CAAC,EAAE;gBAErB;YAAA;YAEF,IAAI,QAAQ,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;gBAAC;aAAG;QAC5D;QACA,IAAI,CAAA,GAAA,oBAAa,EAAE,SAAS,KAAK,YAAY;YAC3C,IAAI,KAAK,cAAc,KAAK,IAAI,CAAC,EAAE,EAAE;YACrC,IAAI,KAAK,cAAc,KAAK,IAAI,CAAC,EAAE,EAAE;YACrC,IAAI,KAAK,OAAO,KAAK;gBACnB,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,OAAO,GAAG,QAClC,OAAO;gBAET,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,OAAO,GAAG,QAClC,OAAO;gBAET,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,GAAG,aAAa,GAAG,OAAO,KAAK;oBACvD,KAAK,GAAG,IAAI,CAAC,EAAE;oBACf,OAAO,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAI;qBAAG;gBACnD;YACF;YACA,IAAI,KAAK,OAAO,KAAK;gBACnB,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,GAAG,aAAa,GAAG,OAAO,KAClD,OAAO,cAAc,IAAI,aAAa,KAAK,OAAO;oBAAC;oBAAI,GAAG,IAAI,CAAC,EAAE;iBAAC,GAAG;gBAEvE,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,OAAO,GAAG,QAClC,OAAO,cAAc,IAAI,aAAa,KAAK,cAAc;oBAAC;iBAAG;gBAE/D,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,OAAO,GAAG,QAClC,OAAO;gBAET,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;oBAAC;oBAAI;iBAAG;YACpD;YACA,IAAI,KAAK,OAAO,KAAK;gBACnB,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,OAAO,GAAG,QACZ,OAAO;yBACF,IAAI,MAAM,GAAG,OAAO,IACzB,OAAO;gBAEX;gBACA,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,OAAO,GAAG,QACZ,OAAO;yBACF,IAAI,MAAM,GAAG,OAAO,IACzB,OAAO;oBAET,IAAI,cAAc,MAAM,UACtB,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;wBAAC;wBAAI;qBAAG,EAAE,KAAK,WAAW,oBAAoB;gBAE5F;gBAEA,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;oBAAC;oBAAI;iBAAG,EAAE,KAAK;YAC3D;YACA,IAAI,KAAK,OAAO,KAAK;gBACnB,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,OAAO,GAAG,QAClC,OAAO;gBAET,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO,MAAM,GAAG,OAAO,IACxC,OAAO;gBAET,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;oBAAC;oBAAI;iBAAG;YACpD;YACA,IAAI,KAAK,OAAO,KACd;gBAAA,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,OAAO,GAAG,QACZ,OAAO;yBACF,IAAI,MAAM,GAAG,OAAO,IACzB,OAAO;gBAEX;YAAA;YAEF,IAAI,KAAK,OAAO,OAAO;gBACrB,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,GAAG,OAAO;wBACZ,IAAI,gBAAgB,KAAK,OAAO;oBAClC,OACE,OAAO;gBAEX;gBACA,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,GAAG,OAAO;wBACZ,IAAI,gBAAgB,KAAK,OAAO;oBAClC,OACE,OAAO;gBAEX;YACF;YACA,IAAI,KAAK,OAAO,MAAM;gBACpB,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,GAAG,OACL,OAAO;yBACF;wBACL,IAAI,gBAAgB,KAAK,OAAO;oBAClC;gBACF;gBACA,IAAI,CAAA,GAAA,oBAAa,EAAE,KAAK;oBACtB,IAAI,GAAG,OACL,OAAO;yBACF;wBACL,IAAI,gBAAgB,KAAK,OAAO;oBAClC;gBACF;YACF;YACA,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;gBAAC;gBAAI;aAAG;QACpD;QACA,IAAI,CAAA,GAAA,oBAAa,EAAE,OACjB,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,CAAA,IAAK,cAAc,GAAG;QAEhF,IAAI,CAAA,GAAA,iBAAU,EAAE,OACd,OAAO,IAAI,UAAU,KAAK,MAAM,IAAI,CAAA,IAAK,cAAc,GAAG;QAE5D,IAAI,CAAA,GAAA,oBAAa,EAAE,OACjB,OAAO,IAAI,aAAa,cAAc,KAAK,QAAQ,UAAU,cAAc,KAAK,OAAO;QAEzF,IAAI,CAAA,GAAA,iBAAU,EAAE,OACd,OAAO,IAAI,UAAU,KAAK,WAAW,IAAI,CAAA,IAAK,cAAc,GAAG;QAEjE,IAAI,CAAA,GAAA,kBAAW,EAAE,OAAO;YACtB,IAAI,WAAW,CAAC;YAChB,IAAK,IAAI,QAAQ,KAAK,WACpB,QAAQ,CAAC,KAAK,GAAG,cAAc,KAAK,UAAU,CAAC,KAAK,EAAE;YAExD,OAAO,IAAI,WAAW;QACxB;QACA,kBAAkB;QAClB,OAAO;IACT;IACA,OAAO,MAAM,MAAM;QACjB,MAAM;QACN,eAAe;IACjB;AACF;;;;;mDC5RW;AALX;AACA;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAS;IAAgB;IAAgB;IAAgB;CAAkB;AACjG,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,KAAK,EACL,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,eAAe,EAChB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACD,SAAS,SAAS,IAAI,EAAE,KAAK;QAC3B,IAAI,SAAS,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,IAAI;QACrF,iBAAiB;QACjB,6DAA6D;QAC7D,iBAAiB;QACjB,IAAI,CAAC,OACH,OAAO;QAET,IAAI,CAAA,GAAA,kBAAW,EAAE,OAAO;YACtB,IAAI,OAAO,IAAI,KAAK,OAAO;gBACzB,IAAI,YAAY,MAAM,KAAK,QAAQ,KAAK;gBACxC,MAAM,IAAI,eAAe,iDAAiD,OAAO,WAAW;YAC9F;YACA,IAAI,QAAQ,MAAM,IAAI,KAAK;YAC3B,IAAI,CAAA,GAAA,YAAK,EAAE,QAAQ;gBACjB,IAAI,aAAa,IAAI,IAAI;gBACzB,WAAW,IAAI,KAAK;gBACpB,OAAO,SAAS,OAAO,OAAO;YAChC,OAAO,IAAI,OAAO,UAAU,UAC1B,OAAO,MAAM,OAAO;iBACf,IAAI,UAAU,WACnB,OAAO,IAAI,aAAa;iBAExB,OAAO;QAEX,OAAO,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO;YAC/B,IAAI,OAAO,KAAK,KAAK,IAAI,SAAU,GAAG;gBACpC,OAAO,SAAS,KAAK,OAAO;YAC9B;YACA,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK;QACvD,OAAO,IAAI,CAAA,GAAA,uBAAgB,EAAE,OAC3B,OAAO,IAAI,gBAAgB,SAAS,KAAK,SAAS,OAAO;aACpD,IAAI,CAAA,GAAA,oBAAa,EAAE,OAAO;YAC/B,IAAI,QAAQ,KAAK,KAAK,IAAI,SAAU,GAAG;gBACrC,OAAO,SAAS,KAAK,OAAO;YAC9B;YACA,OAAO,IAAI,aAAa,KAAK,MAAM;QACrC;QAEA,mEAAmE;QACnE,uCAAuC;QACvC,OAAO,KAAK,IAAI,CAAA,QAAS,SAAS,OAAO,OAAO;IAClD;IACA,OAAO,MAAM,WAAW;QACtB,MAAM;QACN,gCAAgC;QAChC,gBAAgB,CAAC,GAAG,QAAU,SAAS,GAAG,CAAA,GAAA,gBAAQ,EAAE;QACpD,gEAAgE;QAChE,2DAA2D;QAC3D,uEAAuE;QACvE,kBAAkB,MAAM,YAAY,CAAA,OAAQ,CAAA,IAAK,EAAE,IAAI,CAAA,IAAK,KAAK;QACjE,oCAAoC,MAAM,YAAY,CAAA,OAAQ,CAAA,IAAK,EAAE,IAAI,CAAA,IAAK,KAAK;QACnF,iBAAiB,MAAM,QAAQ,aAAa,CAAA,SAAU,CAAC,GAAG,QAAU,OAAO,GAAG,CAAA,GAAA,gBAAQ,EAAE;QACxF,kBAAkB,MAAM,QAAQ,cAAc,CAAA,SAAU,CAAC,GAAG,QAAU,OAAO,GAAG,CAAA,GAAA,gBAAQ,EAAE;QAC1F,uBAAuB,MAAM,YAAY,CAAA,OAAQ,CAAC,GAAG,QAAU,EAAE,IAAI,CAAA,IAAK,KAAK,GAAG;IACpF;AACF;;;;;yDC5FW;AAJX;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAY;IAAS;CAAe;AAC1D,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IAC1E,IAAI,EACF,KAAK,EACL,QAAQ,EACR,KAAK,EACL,YAAY,EACb,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCC,GACD,SAAS,eAAe,EAAE,EAAE,EAAE;QAC5B,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;QACnF,IAAI,OAAO,IAAI,aAAa,KAAK,YAAY;YAAC;YAAI;SAAG;QACrD,IAAI,aAAa,SAAS,MAAM,CAAC,GAAG;QACpC,OAAO,CAAA,GAAA,oBAAa,EAAE,eAAe,CAAC,WAAW;IACnD;IACA,OAAO,MAAM,MAAM;QACjB,cAAc;QACd,sBAAsB;IACxB;AACF;;;;;sDCvDW;AAJX;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAS;IAAY;IAAS;IAAU;IAAW;IAAgB;IAAgB;IAAgB;IAAmB;CAAa;AACnK,IAAI,mBAAmB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IACvE,IAAI,EACF,KAAK,EACL,MAAM,EACN,KAAK,EACL,QAAQ,EACR,KAAK,EACL,MAAM,EACN,OAAO,EACP,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,eAAe,EACf,UAAU,EACX,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCC,GACD,SAAS,gBAAgB,IAAI,EAAE,QAAQ;QACrC,IAAI,UAAU,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;YAChF,UAAU;QACZ;QACA,IAAI,aAAa,CAAC;QAClB,SAAS,YAAY,MAAM,SAAS;QACpC,IAAI,MAAM,YAAY,MAAM;QAC5B,OAAO,QAAQ,WAAW,SAAS,OAAO;IAC5C;IACA,MAAM,cAAc;QAClB,MAAM;QACN,IAAI;QACJ,SAAS;IACX;IACA,IAAI,aAAa,MAAM,MAAM;QAC3B,oBAAoB;QACpB,4BAA4B;IAa9B;IAEA,MAAM,iBAAiB;QACrB,MAAM;QACN,IAAI;QACJ,SAAS;IACX;IACA,WAAW,YAAY;IACvB,WAAW,QAAQ,SAAU,KAAK;QAChC,OAAO,UAAU,MAAM,MAAM,MAAM;IACrC;IAEA,iGAAiG;IACjG,gEAAgE;IAChE,IAAI,YAAY,MAAM,aAAa;QACjC,oBAAoB,SAAS,eAAe,IAAI,EAAE,CAAC;YACjD,IAAI,CAAA,GAAA,oBAAa,EAAE,SAAS,CAAA,GAAA,YAAK,EAAE,KAAK,WAAW,UACjD,OAAO,UAAU,MAAM,KAAK,OAAO,YAAY,EAAE,YAAY;iBAE7D,OAAO,UAAU,KAAK,SAAS,EAAE,YAAY;QAEjD;QACA,sBAAsB,SAAS,iBAAiB,IAAI,EAAE,CAAC;YACrD,IAAI,CAAA,GAAA,YAAK,EAAE,EAAE,WAAW,UACtB,OAAO,UAAU,MAAM,MAAM,EAAE;iBAE/B,MAAM,IAAI,MAAM;QAEpB;QACA,kCAAkC,SAAS,2BAA2B,IAAI,EAAE,CAAC,EAAE,KAAK;YAClF,OAAO,UAAU,KAAK,YAAY,EAAE,MAAM,MAAM;QAClD;QACA,0BAA0B,SAAS,mBAAmB,IAAI,EAAE,CAAC,EAAE,KAAK;YAClE,IAAI;YACJ,IAAI,UAAU,GACZ,IAAI,eAAe,IAAI;iBAEvB,IAAI,SAAS,QAAQ,cAAc,IAAI,OAAO,QAAQ;YAExD,OAAO,IAAI,UAAU,OAAO,MAAM;QACpC;IACF;IAEA;;;;;;;;;;;;;GAaC,GACD,sDAAsD;IACtD,IAAI,WAAW,MAAM,YAAY;QAC/B,gCAAgC,SAAS,yBAAyB,UAAU,EAAE,IAAI;YAChF,UAAU,CAAC,KAAK,GAAG;YACnB,OAAO;QACT;QACA,8BAA8B,SAAS,uBAAuB,UAAU,EAAE,IAAI,EAAE,OAAO;YACrF,4DAA4D;YAC5D,qDAAqD;YACrD,IAAI,KAAK,SAAS,SAAS;gBACzB,UAAU,CAAC,KAAK,GAAG;gBACnB,OAAO;YACT;YACA,OAAO;QACT;QACA,mCAAmC,SAAS,4BAA4B,UAAU,EAAE,IAAI,EAAE,OAAO;YAC/F,OAAO,SAAS,YAAY,KAAK,SAAS;QAC5C;QACA,0CAA0C,SAAS,mCAAmC,UAAU,EAAE,IAAI,EAAE,OAAO;YAC7G,IAAI,KAAK,OAAO,QAAQ,aAAa,IAAI;gBACvC,UAAU,CAAC,KAAK,GAAG;gBACnB,OAAO;YACT;YACA,OAAO,SAAS,YAAY,KAAK,MAAM;QACzC;QACA,+CAA+C,SAAS,qCAAqC,UAAU,EAAE,IAAI,EAAE,OAAO;YACpH,IAAI,KAAK,KAAK,SAAS,GAAG;gBACxB,IAAI,UAAU,SAAS,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE;gBACjD,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,EAAE,EACtC,UAAU,SAAS,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE,YAAY;gBAE3D,IAAI,SAAS;oBACX,UAAU,CAAC,KAAK,GAAG;oBACnB,OAAO;gBACT;YACF;YACA,OAAO;QACT;IACF;IAEA;;;;;;GAMC,GACD,IAAI,cAAc,MAAM,eAAe;QACrC,wBAAwB,SAAS,mBAAmB,IAAI;YACtD,OAAO,mBAAmB;QAC5B;QACA,sBAAsB,SAAS,iBAAiB,IAAI,EAAE,UAAU;YAC9D,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,mBAAmB;YAE5B,OAAO,mBAAmB;QAC5B;QACA,2BAA2B,SAAS,sBAAsB,IAAI,EAAE,UAAU;YACxE,OAAO,IAAI,gBAAgB,YAAY,KAAK,SAAS;QACvD;QACA,kCAAkC,SAAS,6BAA6B,IAAI,EAAE,UAAU;YACtF,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,mBAAmB;YAE5B,OAAO,YAAY,KAAK,MAAM;QAChC;QACA,wBAAwB,SAAS,mBAAmB,IAAI,EAAE,UAAU;YAClE,IAAI,KAAK,KAAK,WAAW,GACvB,cAAc;YAEhB,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,mBAAmB;YAE5B,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE;YACvB,IAAI;YACJ,IAAI,MAAM,OAAO,wBAAwB;YACzC,IAAI,WAAW,OAAO,sBAAsB;YAE5C,IAAI;YACJ,OAAQ,KAAK;gBACX,KAAK;oBACH,iCAAiC;oBACjC,MAAM;oBACN,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,mBAAmB;wBAAI,IAAI,aAAa,KAAK,OAAO;4BAAC;4BAAM,IAAI,aAAa,KAAK,UAAU;gCAAC,mBAAmB;gCAAI,mBAAmB;6BAAG;yBAAE;qBAAE;oBACjM;gBACF,KAAK;gBACL,KAAK;oBACH,kCAAkC;oBAClC,IAAI,KAAK,KAAK,WAAW,GAAG;wBAC1B,MAAM;wBACN,iBAAiB,IAAI,aAAa,KAAK,YAAY;4BAAC,mBAAmB;4BAAI,IAAI,aAAa,QAAQ;gCAAC;6BAAK;yBAAE;oBAC9G,OAAO,IAAI,KAAK,KAAK,WAAW,GAAG;wBACjC,0CAA0C;wBAC1C,OAAO,IAAI,aAAa,KAAK,UAAU;4BAAC,mBAAmB;4BAAI,KAAK,IAAI,CAAC,EAAE;yBAAC;wBAE5E,iBAAiB;wBACjB,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC;wBAC3C,OAAO,YAAY,IAAI,aAAa,KAAK,OAAO;4BAAC;4BAAM;yBAAK,GAAG;oBACjE;oBACA;gBACF,KAAK;oBACH,OAAO,mBAAmB;gBAC5B,iBAAiB,GACjB,KAAK;oBACH,IAAI,CAAC,QAAQ,KAAK,KAAK,WAAW,GAAG;wBACnC,uBAAuB;wBACvB,iBAAiB,KAAK;wBACtB,MAAM;oBACR,OAAO,IAAI,KAAK,KAAK,WAAW,KAAK,QAAQ,KAAK,KAAK,WAAW,KAAK,UAAU,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,KAAK,WAAW;wBAC7G,kCAAkC;wBAClC,iBAAiB,IAAI,aAAa,KAAK,YAAY;4BAAC,KAAK;4BAAS,IAAI,aAAa,OAAO;gCAAC,QAAQ,KAAK,IAAI,CAAC,EAAE;6BAAC;yBAAE;wBAClH,MAAM;oBACR,OAAO,IAAI,KAAK,KAAK,WAAW,GAC9B,sDAAsD;oBACtD,OAAO,YAAY,IAAI,aAAa,KAAK,UAAU;wBAAC,IAAI,aAAa,OAAO;4BAAC;yBAAK;wBAAG,IAAI,aAAa,OAAO;4BAAC,KAAK,IAAI,CAAC,EAAE;yBAAC;qBAAE,GAAG;oBAElI;gBACF,KAAK;oBACH,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC;oBAC3C,mCAAmC;oBACnC,OAAO,YAAY,IAAI,aAAa,KAAK,OAAO;wBAAC;wBAAM,KAAK,IAAI,CAAC,EAAE;qBAAC,GAAG;gBACzE,KAAK;oBACH,kBAAkB;oBAClB,iBAAiB,IAAI,aAAa,OAAO;wBAAC,KAAK;qBAAQ;oBACvD;gBACF,KAAK;oBACH,wBAAwB;oBACxB,iBAAiB,IAAI,aAAa,OAAO;wBAAC,KAAK;qBAAQ;oBACvD;gBACF,KAAK;oBACH,yBAAyB;oBACzB,iBAAiB,IAAI,aAAa,KAAK,cAAc;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;qBAAE;oBAC9F;gBACF,KAAK;oBACH,0BAA0B;oBAC1B,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;wBAAG,mBAAmB;qBAAG;oBAC9G;gBACF,KAAK;oBACH,8BAA8B;oBAC9B,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAM,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;qBAAE;oBAClG;gBACF,KAAK;oBACH,+BAA+B;oBAC/B,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAM,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;qBAAE;oBAClG;gBACF,KAAK;oBACH,2BAA2B;oBAC3B,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;wBAAG,mBAAmB;qBAAG;oBAC9G;gBACF,KAAK;oBACH,oCAAoC;oBACpC,MAAM;oBACN,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,IAAI,aAAa,KAAK,YAAY;4BAAC,mBAAmB;4BAAI,IAAI,aAAa,KAAK,OAAO;gCAAC,KAAK;gCAAS,mBAAmB;6BAAG;yBAAE;qBAAE;oBAC3K;gBACF,KAAK;oBACH,qCAAqC;oBACrC,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,IAAI,aAAa,KAAK,YAAY;4BAAC,mBAAmB;4BAAI,IAAI,aAAa,KAAK,OAAO;gCAAC,KAAK;gCAAS,mBAAmB;6BAAG;yBAAE;qBAAE;oBAC3K;gBACF,KAAK;oBACH,gCAAgC;oBAChC,MAAM;oBACN,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,KAAK,OAAO;4BAAC,KAAK;4BAAS,mBAAmB;yBAAG;wBAAG,mBAAmB;qBAAG;oBAC1I;gBACF,KAAK;oBACH,0CAA0C;oBAC1C,MAAM;oBACN,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;wBAAG,IAAI,aAAa,QAAQ;4BAAC,IAAI,aAAa,KAAK,YAAY;gCAAC,IAAI,aAAa,KAAK,OAAO;oCAAC,KAAK;oCAAS,mBAAmB;iCAAG;gCAAG,mBAAmB;6BAAG;yBAAE;qBAAE;oBACzP;gBACF,KAAK;oBACH,2CAA2C;oBAC3C,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;wBAAG,IAAI,aAAa,QAAQ;4BAAC,IAAI,aAAa,KAAK,YAAY;gCAAC,IAAI,aAAa,KAAK,OAAO;oCAAC,KAAK;oCAAS,mBAAmB;iCAAG;gCAAG,mBAAmB;6BAAG;yBAAE;qBAAE;oBACzP;gBACF,KAAK;oBACH,iCAAiC;oBACjC,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,KAAK,OAAO;4BAAC,KAAK;4BAAS,mBAAmB;yBAAG;wBAAG,mBAAmB;qBAAG;oBAC1I;gBACF,KAAK;oBACH,0BAA0B;oBAC1B,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,KAAK;qBAAQ;oBACxD;gBACF,KAAK;oBACH,0BAA0B;oBAC1B,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,KAAK;qBAAQ;oBACxD;gBACF,KAAK;oBACH,4BAA4B;oBAC5B,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,QAAQ;4BAAC,KAAK;yBAAQ;wBAAG,mBAAmB;qBAAG;oBAC/G;gBACF,KAAK;oBACH,kCAAkC;oBAClC,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAM,IAAI,aAAa,QAAQ;4BAAC,KAAK;yBAAQ;qBAAE;oBACnG;gBACF,KAAK;oBACH,kCAAkC;oBAClC,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAM,IAAI,aAAa,QAAQ;4BAAC,KAAK;yBAAQ;qBAAE;oBACnG;gBACF,KAAK;oBACH,6BAA6B;oBAC7B,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,QAAQ;4BAAC,KAAK;yBAAQ;wBAAG,mBAAmB;qBAAG;oBAC/G;gBACF,KAAK;oBACH,qCAAqC;oBACrC,MAAM;oBACN,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,IAAI,aAAa,KAAK,OAAO;4BAAC,IAAI,aAAa,KAAK,OAAO;gCAAC,KAAK;gCAAS,mBAAmB;6BAAG;4BAAG,mBAAmB;yBAAG;qBAAE;oBACtK;gBACF,KAAK;oBACH,0FAA0F;oBAC1F,MAAM;oBACN,iBAAiB,IAAI,aAAa,QAAQ;wBAAC,IAAI,aAAa,KAAK,YAAY;4BAAC,IAAI,aAAa,KAAK,OAAO;gCAAC,KAAK;gCAAS,mBAAmB;6BAAG;4BAAG,mBAAmB;yBAAG;qBAAE;oBAC3K;gBACF,KAAK;oBACH,iCAAiC;oBACjC,MAAM;oBACN,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,mBAAmB;wBAAI,IAAI,aAAa,KAAK,OAAO;4BAAC,KAAK;4BAAS,mBAAmB;yBAAG;qBAAE;oBAC/I;gBACF,KAAK;oBACH,0CAA0C;oBAC1C,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,KAAK;wBAAS,IAAI,aAAa,QAAQ;4BAAC,IAAI,aAAa,KAAK,YAAY;gCAAC,mBAAmB;gCAAI,IAAI,aAAa,KAAK,OAAO;oCAAC,KAAK;oCAAS,mBAAmB;iCAAG;6BAAE;yBAAE;qBAAE;oBAC9N;gBACF,KAAK;oBACH,4CAA4C;oBAC5C,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,IAAI,aAAa,OAAO;4BAAC,KAAK;yBAAQ;wBAAG,IAAI,aAAa,QAAQ;4BAAC,IAAI,aAAa,KAAK,OAAO;gCAAC,IAAI,aAAa,KAAK,OAAO;oCAAC,KAAK;oCAAS,mBAAmB;iCAAG;gCAAG,mBAAmB;6BAAG;yBAAE;qBAAE;oBACpP;gBACF,KAAK;oBACH,kCAAkC;oBAClC,MAAM;oBACN,WAAW;oBACX,iBAAiB,IAAI,aAAa,KAAK,YAAY;wBAAC,mBAAmB;wBAAI,IAAI,aAAa,KAAK,OAAO;4BAAC,KAAK;4BAAS,mBAAmB;yBAAG;qBAAE;oBAC/I;gBACF,KAAK;oBACH,0BAA0B;oBAC1B,iBAAiB,IAAI,aAAa,KAAK,UAAU;wBAAC,IAAI,aAAa,IAAI,WAAW,QAAQ;4BAAC,KAAK;yBAAQ;wBAAG,KAAK;qBAAQ;oBACxH;gBACF,KAAK;gBACL;oBACE,MAAM,IAAI,MAAM,eAAe,KAAK,OAAO;YAC/C;YACA,IAAI,IAAI;YACR,IAAI,KAAK;gBACP,KAAK;gBACL,OAAO;YACT,OAAO;gBACL,KAAK;gBACL,OAAO;YACT;YAEA;;gCAE0B,GAC1B,IAAI,kBAAkB,YAAY,MAAM;YACxC,IAAI,UACF,kBAAkB,IAAI,aAAa,KAAK,cAAc;gBAAC;aAAgB;YAEzE,OAAO,IAAI,aAAa,IAAI,MAAM;gBAAC;gBAAiB;aAAe;QACrE;QACA,wBAAwB,SAAS,mBAAmB,IAAI,EAAE,UAAU;YAClE,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,mBAAmB;YAE5B,IAAI,KAAK,OAAO,KACd,8BAA8B;YAC9B,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,SAAU,GAAG;gBACnE,OAAO,YAAY,KAAK;YAC1B;YAEF,IAAI,KAAK,OAAO,KAAK;gBACnB,2BAA2B;gBAC3B,IAAI,KAAK,WACP,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;oBAAC,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE;iBAAY;gBAGnF,sEAAsE;gBACtE,IAAI,KAAK,YACP,OAAO,IAAI,aAAa,KAAK,IAAI,KAAK,IAAI;oBAAC,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE;oBAAa,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE;iBAAY;YAE5H;YACA,IAAI,KAAK,OAAO,KAAK;gBACnB,yBAAyB;gBACzB,IAAI,gBAAgB,KAAK,KAAK,OAAO,SAAU,GAAG;oBAChD,OAAO,UAAU,CAAC,IAAI,KAAK;gBAC7B;gBACA,IAAI,cAAc,SAAS,GAAG;oBAC5B,IAAI,mBAAmB,KAAK,KAAK,OAAO,SAAU,GAAG;wBACnD,OAAO,UAAU,CAAC,IAAI,KAAK;oBAC7B;oBACA,IAAI,kBAAkB,iBAAiB,WAAW,IAAI,gBAAgB,CAAC,EAAE,GAAG,IAAI,aAAa,KAAK,YAAY;oBAC9G,IAAI,UAAU,cAAc,OAAO,YAAY,iBAAiB;oBAChE,OAAO,IAAI,aAAa,KAAK,YAAY;gBAC3C;gBAEA,0DAA0D;gBAC1D,OAAO,IAAI,aAAa,KAAK,OAAO,KAAK,KAAK,IAAI,SAAU,QAAQ;oBAClE,OAAO,IAAI,aAAa,KAAK,YAAY,KAAK,KAAK,IAAI,SAAU,QAAQ;wBACvE,OAAO,aAAa,WAAW,YAAY,UAAU,cAAc,SAAS;oBAC9E;gBACF;YACF;YACA,IAAI,KAAK,OAAO,OAAO,KAAK,YAAY;gBACtC,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE;gBACvB,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE;gBAEvB,6BAA6B;gBAC7B,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,IAAI,aAAa,KAAK,UAAU;oBAAC,YAAY,MAAM;oBAAa;iBAAK;gBAG9E,qDAAqD;gBACrD,IAAI,UAAU,CAAC,KAAK,KAAK,WACvB,OAAO,IAAI,aAAa,KAAK,YAAY;oBAAC,IAAI,aAAa,KAAK,cAAc;wBAAC;qBAAK;oBAAG,IAAI,aAAa,KAAK,UAAU;wBAAC,YAAY,MAAM;wBAAa,IAAI,aAAa,KAAK,OAAO;4BAAC,KAAK;4BAAS,mBAAmB;yBAAG;qBAAE;iBAAE;gBAG/N,sEAAsE;gBACtE,OAAO,IAAI,aAAa,KAAK,UAAU;oBAAC,IAAI,aAAa,KAAK,YAAY;wBAAC,IAAI,aAAa,KAAK,YAAY;4BAAC,YAAY,MAAM;4BAAa,KAAK;yBAAQ;wBAAG,IAAI,aAAa,KAAK,YAAY;4BAAC,KAAK;4BAAS,YAAY,MAAM;yBAAY;qBAAE;oBAAG,IAAI,aAAa,KAAK,OAAO;wBAAC,KAAK;wBAAS,mBAAmB;qBAAG;iBAAE;YACvT;YACA,IAAI,KAAK,OAAO,OAAO,KAAK,YAAY;gBACtC,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE;gBACvB,IAAI,QAAQ,KAAK,IAAI,CAAC,EAAE;gBACxB,IAAI,UAAU,CAAC,KAAK,KAAK,WAAW;oBAClC,0DAA0D;oBAC1D,IAAI,CAAA,GAAA,oBAAa,EAAE,SAAU,CAAA,OAAO,KAAK,UAAU,MAAM,KAAK,OAAO,EAAC,GACpE,OAAO,mBAAmB;oBAG5B,oCAAoC;oBACpC,OAAO,IAAI,aAAa,KAAK,YAAY;wBAAC;wBAAM,IAAI,aAAa,KAAK,YAAY;4BAAC,IAAI,aAAa,OAAO;gCAAC,KAAK;6BAAQ;4BAAG,YAAY,MAAM,SAAS;yBAAY;qBAAE;gBACvK;gBACA,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW;oBACnC,IAAI,CAAA,GAAA,oBAAa,EAAE,QAAQ;wBACzB,qDAAqD;wBACrD,IAAI,OAAO,MAAM,QACf,OAAO,mBAAmB;wBAE5B,iCAAiC;wBACjC,IAAI,MAAM,MAAM,OAAO,IACrB,OAAO,YAAY,MAAM;oBAE7B;oBAEA,2DAA2D;oBAC3D,IAAI,cAAc,IAAI,aAAa,KAAK,OAAO;wBAAC,KAAK;wBAAS,IAAI,aAAa,KAAK,YAAY;4BAAC;4BAAO,mBAAmB;yBAAG;qBAAE;oBAChI,OAAO,IAAI,aAAa,KAAK,YAAY;wBAAC,MAAM;wBAAS,IAAI,aAAa,KAAK,YAAY;4BAAC,YAAY,MAAM;4BAAa;yBAAY;qBAAE;gBAC3I;gBAEA,8DAA8D;gBAC9D,OAAO,IAAI,aAAa,KAAK,YAAY;oBAAC,IAAI,aAAa,KAAK,OAAO;wBAAC,KAAK;wBAAS,MAAM;qBAAQ;oBAAG,IAAI,aAAa,KAAK,OAAO;wBAAC,IAAI,aAAa,KAAK,YAAY;4BAAC,YAAY,MAAM;4BAAa,IAAI,aAAa,KAAK,UAAU;gCAAC,MAAM;gCAAS,KAAK;6BAAQ;yBAAE;wBAAG,IAAI,aAAa,KAAK,YAAY;4BAAC,YAAY,OAAO;4BAAa,IAAI,aAAa,OAAO;gCAAC,KAAK;6BAAQ;yBAAE;qBAAE;iBAAE;YAC1X;YACA,MAAM,IAAI,MAAM,eAAe,KAAK,KAAK;QAC3C;IACF;IAEA;;;;;GAKC,GACD,SAAS,cAAc,IAAI;QACzB,wBAAwB;QACxB,IAAI,AAAC,CAAA,KAAK,SAAS,SAAS,KAAK,SAAS,aAAa,KAAK,SAAS,KAAI,KAAM,KAAK,KAAK,WAAW,GAClG;QAGF,oEAAoE;QAEpE,qDAAqD;QACrD,uCAAuC;QACvC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,EAAE,EACtC,KAAK,IAAI,CAAC,EAAE,GAAG,mBAAmB;QAEpC,KAAK,UAAU;QACf,MAAM,IAAI,MAAM;IAClB;IAEA;;;;;;GAMC,GACD,SAAS,mBAAmB,KAAK,EAAE,SAAS;QAC1C,OAAO,IAAI,aAAa,QAAQ,OAAO,aAAa,OAAO;IAC7D;IACA,OAAO;AACT;;;;;uDC1hBW;AAJX;AACA;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAU;IAAS;IAAS;IAAU;IAAO;IAAY;IAAY;IAAU;IAAO;IAAS;IAAoB;IAAgB;IAAY;IAAc;IAAa;IAAqB;IAAU;IAAgB;IAAa;IAAgB;IAAgB;IAAa;IAAc;IAAgB;IAAc;CAAkB;AAC9V,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,kBAAM,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,MAAM,EACN,KAAK,EACL,KAAK,EACL,MAAM,EACN,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,GAAG,EACH,KAAK,EACL,gBAAgB,EAChB,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,iBAAiB,EACjB,MAAM,EACN,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,UAAU,EACV,YAAY,EACZ,UAAU,EACV,eAAe,EAChB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDC,GACD,SAAS,aAAa,IAAI;QACxB,IAAI,QAAQ,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;QACjF,IAAI,WAAW,UAAU,SAAS,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;QACnF,IAAI,WAAW,oBAAoB,qDAAqD;QACxF,IAAI,UAAU,WAAW,MAAM,OAAO,MAAM,SAAS,aAAa,qDAAqD;QACvH,IAAI,QAAQ,QAAQ,UAAU;QAC9B,IAAI,mBAAmB;YACrB,gBAAgB;QAClB;QACA,IAAI,qBAAqB;YACvB,gBAAgB;QAClB;QACA,OAAO,QAAQ;QACf,IAAI,SAAS,GAAG;YACd,kCAAkC;YAClC,OAAO,YAAY,OAAO,iEAAiE;YAC3F,IAAI,SAAS,sBAAsB;YACnC,IAAI;YACJ,IAAI,YAAY;YAChB,IAAI,WAAW;YACf,qDAAqD;YACrD,OAAO,SAAS,MAAM,SAAS,YAAY,CAAC,GAAG;YAC/C,IAAI;YACJ,MAAO,KAAM;gBACX,mEAAmE;gBACnE,mCAAmC;gBACnC,QAAQ,YAAY,SAAS,gBAAgB,SAAS;gBACtD,OAAO,SAAS,MAAM,OAAO,CAAC,GAAG;gBACjC,YAAY,CAAC,WAAW,8CAA8C;gBAEtE,IAAI,KAAK;gBACT,IAAI,MAAM,SACR,OAAO,+BAA+B;gBAGxC,WAAW;gBACX,UAAU;YACZ;YACA,IAAI,UACF,wEAAwE;YACxE,OAAO,SAAS,MAAM,SAAS,iBAAiB,CAAC,GAAG;YAEtD,qBAAqB;YACrB,OAAO,SAAS,MAAM,SAAS,YAAY,CAAC,GAAG;QACjD,EAAE,aAAa;QAEf,IAAI,eAAe,EAAE;QACrB,IAAI,iBAAiB,CAAC;QACtB,IAAI,KAAK,SAAS,kBAAkB,KAAK,cAAc,KAAK,OAAO,KAAK;YACtE,sCAAsC;YACtC,IAAI,UAAU,GAAG;gBACf,KAAK,IAAI,CAAC,EAAE,GAAG,gBAAgB,KAAK,IAAI,CAAC,EAAE,EAAE;gBAC7C,KAAK,IAAI,CAAC,EAAE,GAAG,gBAAgB,KAAK,IAAI,CAAC,EAAE;YAC7C;YACA,IAAI,UAAU;gBACZ,eAAe,YAAY,KAAK,IAAI,CAAC,EAAE;gBACvC,eAAe,cAAc,KAAK,IAAI,CAAC,EAAE;YAC3C;QACF,OAAO;YACL,IAAI,UAAU,GACZ,OAAO,gBAAgB,MAAM;YAE/B,IAAI,UAAU;gBACZ,eAAe,YAAY;gBAC3B,eAAe,cAAc;YAC/B;QACF;QACA,QAAQ;QAER,IAAI,CAAC,UAAU,OAAO;QACtB,eAAe,eAAe;QAC9B,eAAe,YAAY,QAAQ;QACnC,eAAe,aAAa;QAC5B,OAAO;IACT;IACA,OAAO,MAAM,MAAM;QACjB,MAAM;QACN,iBAAiB,CAAC,MAAM,WAAa,aAAa,MAAM,CAAC,GAAG;QAC5D,gBAAgB;QAChB,yBAAyB;IAC3B,IAAI,2BAA2B;IAE/B;;;;;;;;;;;;;;;;;;;GAmBC,GACD,SAAS,WAAW,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK;QAC9C,IAAI,YAAY,EAAE;QAClB,IAAI,OAAO,SAAS,MAAM,OAAO,OAAO;YACtC,gBAAgB;QAClB,IAAI,mEAAmE;QACvE,WAAW,CAAC,CAAC;QACb,IAAI,OAAO,QAAS,CAAA,WAAW,MAAM,EAAC;QACtC,QAAQ;QACR,IAAI,UAAU,CAAC;QACf,QAAQ,aAAa;QACrB,QAAQ,YAAY;QACpB,OAAO;QAEP,0GAA0G;QAE1G;;;;;;;;;;;;;;KAcC,GACD,SAAS,QAAQ,IAAI;YACnB,IAAI,KAAK,KAAK,MAAM,YAAY;YAChC,IAAI,OAAO,gBACT,4CAA4C;YAC5C,MAAM,IAAI,MAAM;iBACX,IAAI,OAAO;gBAChB,IAAI,KAAK,OAAO,KAAK;oBACnB,qDAAqD;oBACrD,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,SAAS,kBAAkB,CAAC,CAAA,GAAA,mBAAQ,EAAE,WAAW,KAAK,IAAI,CAAC,EAAE,CAAC,SAC7E,MAAM,IAAI,MAAM;yBAEhB,QAAQ,KAAK,IAAI,CAAC,EAAE;gBAExB,OAAO;oBACL,IAAI,KAAK,QAAQ,KAAK,QAAQ,IAC5B,MAAM,IAAI,MAAM,cAAc,KAAK,KAAK;oBAE1C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,IACpC,QAAQ,KAAK,IAAI,CAAC,EAAE;gBAExB,EAAE,mBAAmB;mBAChB,IAAI,OAAO,cAAc;gBAC9B,IAAI,QAAQ,KAAK,MAAM,gBAAgB;gBACvC,IAAI,MAAM,UAAU,QAAQ;gBAC5B,IAAI,QAAQ,IACV,6BAA6B;gBAC7B,UAAU,KAAK;YAEnB,OAAO,IAAI,OAAO,mBAChB,QAAQ,KAAK;iBACR,IAAI,OAAO,gBAChB,MAAM,IAAI,MAAM,UAAU,KAAK;QAEnC,EAAE,iBAAiB;IACrB,EAAE,oBAAoB;IAEtB,0FAA0F;IAC1F;;;;;;;;GAQC,GACD,SAAS;QACP,IAAI,WAAW;YAAC;YAChB,QAAQ;YACR;gBACE,GAAG;gBACH,GAAG;YACL;YAAG;gBACD,GAAG;gBACH,GAAG;YACL;YAAG;YACH,YAAY;YACZ;gBACE,GAAG;gBACH,GAAG;YACL;YAAG;gBACD,GAAG;gBACH,GAAG;YACL;YAAG;gBACD,GAAG;gBACH,GAAG;YACL;YAAG;gBACD,GAAG;gBACH,GAAG;YACL;YAAG;gBACD,GAAG;gBACH,GAAG;YACL;SAAE;QACF,IAAI,aAAa;YAAC;gBAChB,GAAG;gBACH,GAAG;YACL;YACA,iBAAiB;YACjB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,uBAAuB;YACvB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,mBAAmB;YACnB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,6CAA6C;YAC7C;gBACE,GAAG;gBACH,GAAG;YACL;YACA,iBAAiB;YACjB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,iBAAiB;YACjB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,2BAA2B;YAC3B;gBACE,GAAG;gBACH,GAAG;YACL;YACA,2BAA2B;YAC3B;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oCAAoC;YACpC;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oCAAoC;YACpC;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oCAAoC;YACpC;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oCAAoC;YACpC;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YACA,oBAAoB;YACpB;gBACE,GAAG;gBACH,GAAG;YACL;YA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,GAAA,gCAAE;UACF,CAAA,GAAA,iCAAG;IACH;IACA;IACA;IACA;AACF;AACA,MAAM,YAAY;;;AC9qBlB,iBAAiB;;;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACDA;;;CAGC;;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAA0F,gCAAgjWA;;;CAGC;;qDAGU;AAFX;AACA;AACO,IAAI,kBAAkB;uBAC3B,CAAA,GAAA,+CAAgB;eAChB,CAAA,GAAA,yBAAQ;AACV;;;ACTA;;;CAGC;;uDAMU;AALX;AACA;AACA;AACA;AACA;AACO,IAAI,oBAAoB;2BAC7B,CAAA,GAAA,4DAAoB;yBACpB,CAAA,GAAA,wDAAkB;6BAClB,CAAA,GAAA,gEAAsB;0BACtB,CAAA,GAAA,0DAAmB;iBACnB,CAAA,GAAA,2BAAU;AACZ;;;ACfA;;;CAGC;;2DAEU;AADX;AACO,IAAI,wBAAwB;0BACjC,CAAA,GAAA,oCAAmB;AACrB;;;ACPA;;;CAGC;;yDAEU;AADX;AACO,IAAI,sBAAsB;wBAC/B,CAAA,GAAA,kCAAiB;AACnB;;;ACPA;;;CAGC;;6DAGU;AAFX;AACA;AACO,IAAI,0BAA0B;wBACnC,CAAA,GAAA,sDAAiB;4BACjB,CAAA,GAAA,sCAAqB;AACvB;;;ACTA;;;CAGC;;wDAEU;AADX;AACO,IAAI,qBAAqB;uBAC9B,CAAA,GAAA,iCAAgB;AAClB;;;ACPA;;;CAGC;;0DAEU;AADX;AACO,IAAI,uBAAuB;yBAChC,CAAA,GAAA,mCAAkB;AACpB;;;ACPA;;;CAGC;;8DAIU;AAHX;AACA;AACA;AACO,IA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","sources":["../../../C:/Users/elija/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-browser-hmr/lib/runtime-3d85fc7912561dd9.js","questions/theejs/server.js","node_modules/mathjs/lib/esm/index.js","node_modules/mathjs/lib/esm/entry/mainAny.js","node_modules/mathjs/lib/esm/entry/configReadonly.js","node_modules/@babel/runtime/helpers/extends.js","node_modules/mathjs/lib/esm/core/config.js","node_modules/mathjs/lib/esm/core/function/config.js","node_modules/mathjs/lib/esm/utils/object.js","node_modules/mathjs/lib/esm/utils/is.js","node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js","node_modules/mathjs/lib/esm/factoriesAny.js","node_modules/mathjs/lib/esm/core/function/typed.js","node_modules/typed-function/lib/umd/typed-function.js","node_modules/typed-function/lib/esm/typed-function.mjs","node_modules/mathjs/lib/esm/utils/number.js","node_modules/mathjs/lib/esm/utils/factory.js","node_modules/mathjs/lib/esm/utils/array.js","node_modules/mathjs/lib/esm/utils/string.js","node_modules/mathjs/lib/esm/utils/bignumber/formatter.js","node_modules/mathjs/lib/esm/error/DimensionError.js","node_modules/mathjs/lib/esm/error/IndexError.js","node_modules/mathjs/lib/esm/utils/map.js","node_modules/mathjs/lib/esm/utils/customs.js","node_modules/mathjs/lib/esm/type/resultset/ResultSet.js","node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js","node_modules/decimal.js/decimal.js","node_modules/mathjs/lib/esm/type/complex/Complex.js","node_modules/complex.js/complex.js","node_modules/mathjs/lib/esm/type/fraction/Fraction.js","node_modules/fraction.js/fraction.js","node_modules/mathjs/lib/esm/type/matrix/Range.js","node_modules/mathjs/lib/esm/type/matrix/Matrix.js","node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js","node_modules/mathjs/lib/esm/utils/function.js","node_modules/mathjs/lib/esm/utils/lruQueue.js","node_modules/mathjs/lib/esm/function/utils/clone.js","node_modules/mathjs/lib/esm/function/utils/isInteger.js","node_modules/mathjs/lib/esm/utils/collection.js","node_modules/mathjs/lib/esm/utils/switch.js","node_modules/mathjs/lib/esm/function/utils/isNegative.js","node_modules/mathjs/lib/esm/plain/number/index.js","node_modules/mathjs/lib/esm/plain/number/arithmetic.js","node_modules/mathjs/lib/esm/plain/number/bitwise.js","node_modules/mathjs/lib/esm/plain/number/combinations.js","node_modules/mathjs/lib/esm/utils/product.js","node_modules/mathjs/lib/esm/plain/number/constants.js","node_modules/mathjs/lib/esm/plain/number/logical.js","node_modules/mathjs/lib/esm/plain/number/relational.js","node_modules/mathjs/lib/esm/plain/number/probability.js","node_modules/mathjs/lib/esm/plain/number/trigonometry.js","node_modules/mathjs/lib/esm/plain/number/utils.js","node_modules/mathjs/lib/esm/function/utils/isNumeric.js","node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js","node_modules/mathjs/lib/esm/function/utils/isPositive.js","node_modules/mathjs/lib/esm/function/utils/isZero.js","node_modules/mathjs/lib/esm/function/utils/isNaN.js","node_modules/mathjs/lib/esm/function/utils/typeOf.js","node_modules/mathjs/lib/esm/function/relational/equalScalar.js","node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js","node_modules/mathjs/lib/esm/utils/complex.js","node_modules/mathjs/lib/esm/function/relational/compareUnits.js","node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js","node_modules/mathjs/lib/esm/type/number.js","node_modules/mathjs/lib/esm/type/string.js","node_modules/mathjs/lib/esm/type/boolean.js","node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js","node_modules/mathjs/lib/esm/type/complex/function/complex.js","node_modules/mathjs/lib/esm/type/fraction/function/fraction.js","node_modules/mathjs/lib/esm/type/matrix/function/matrix.js","node_modules/mathjs/lib/esm/function/matrix/matrixFromFunction.js","node_modules/mathjs/lib/esm/function/matrix/matrixFromRows.js","node_modules/mathjs/lib/esm/function/matrix/matrixFromColumns.js","node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js","node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js","node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js","node_modules/mathjs/lib/esm/function/arithmetic/abs.js","node_modules/mathjs/lib/esm/function/matrix/apply.js","node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js","node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js","node_modules/mathjs/lib/esm/function/arithmetic/ceil.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js","node_modules/mathjs/lib/esm/function/arithmetic/cube.js","node_modules/mathjs/lib/esm/function/arithmetic/exp.js","node_modules/mathjs/lib/esm/function/arithmetic/expm1.js","node_modules/mathjs/lib/esm/function/arithmetic/fix.js","node_modules/mathjs/lib/esm/function/arithmetic/floor.js","node_modules/mathjs/lib/esm/function/arithmetic/gcd.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo04xSidSid.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js","node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo13xDD.js","node_modules/mathjs/lib/esm/function/arithmetic/lcm.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js","node_modules/mathjs/lib/esm/function/arithmetic/log10.js","node_modules/mathjs/lib/esm/function/arithmetic/log2.js","node_modules/mathjs/lib/esm/function/arithmetic/mod.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js","node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js","node_modules/mathjs/lib/esm/function/arithmetic/multiply.js","node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js","node_modules/mathjs/lib/esm/function/arithmetic/sign.js","node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js","node_modules/mathjs/lib/esm/function/arithmetic/square.js","node_modules/mathjs/lib/esm/function/arithmetic/subtract.js","node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js","node_modules/mathjs/lib/esm/function/arithmetic/invmod.js","node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js","node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js","node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js","node_modules/mathjs/lib/esm/function/bitwise/bitNot.js","node_modules/mathjs/lib/esm/function/bitwise/bitOr.js","node_modules/mathjs/lib/esm/function/bitwise/bitXor.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js","node_modules/mathjs/lib/esm/function/complex/arg.js","node_modules/mathjs/lib/esm/function/complex/conj.js","node_modules/mathjs/lib/esm/function/complex/im.js","node_modules/mathjs/lib/esm/function/complex/re.js","node_modules/mathjs/lib/esm/function/logical/not.js","node_modules/mathjs/lib/esm/function/logical/or.js","node_modules/mathjs/lib/esm/function/logical/xor.js","node_modules/mathjs/lib/esm/function/matrix/concat.js","node_modules/mathjs/lib/esm/function/matrix/column.js","node_modules/mathjs/lib/esm/function/matrix/count.js","node_modules/mathjs/lib/esm/function/matrix/cross.js","node_modules/mathjs/lib/esm/function/matrix/diag.js","node_modules/mathjs/lib/esm/function/matrix/filter.js","node_modules/mathjs/lib/esm/function/matrix/flatten.js","node_modules/mathjs/lib/esm/function/matrix/forEach.js","node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js","node_modules/mathjs/lib/esm/function/matrix/identity.js","node_modules/mathjs/lib/esm/function/matrix/kron.js","node_modules/mathjs/lib/esm/function/matrix/map.js","node_modules/mathjs/lib/esm/function/matrix/diff.js","node_modules/mathjs/lib/esm/function/matrix/ones.js","node_modules/mathjs/lib/esm/function/matrix/range.js","node_modules/mathjs/lib/esm/utils/noop.js","node_modules/mathjs/lib/esm/function/matrix/reshape.js","node_modules/mathjs/lib/esm/function/matrix/resize.js","node_modules/mathjs/lib/esm/error/ArgumentsError.js","node_modules/mathjs/lib/esm/function/matrix/rotate.js","node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js","node_modules/mathjs/lib/esm/function/matrix/row.js","node_modules/mathjs/lib/esm/function/matrix/size.js","node_modules/mathjs/lib/esm/function/matrix/squeeze.js","node_modules/mathjs/lib/esm/function/matrix/subset.js","node_modules/mathjs/lib/esm/function/matrix/transpose.js","node_modules/mathjs/lib/esm/function/matrix/ctranspose.js","node_modules/mathjs/lib/esm/function/matrix/zeros.js","node_modules/mathjs/lib/esm/function/matrix/fft.js","node_modules/mathjs/lib/esm/function/matrix/ifft.js","node_modules/mathjs/lib/esm/function/special/erf.js","node_modules/mathjs/lib/esm/function/statistics/mode.js","node_modules/mathjs/lib/esm/function/statistics/prod.js","node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js","node_modules/mathjs/lib/esm/function/string/format.js","node_modules/mathjs/lib/esm/function/string/bin.js","node_modules/mathjs/lib/esm/function/string/oct.js","node_modules/mathjs/lib/esm/function/string/hex.js","node_modules/mathjs/lib/esm/function/string/print.js","node_modules/mathjs/lib/esm/function/unit/to.js","node_modules/mathjs/lib/esm/function/utils/isPrime.js","node_modules/mathjs/lib/esm/function/utils/numeric.js","node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js","node_modules/mathjs/lib/esm/function/arithmetic/pow.js","node_modules/mathjs/lib/esm/function/arithmetic/round.js","node_modules/mathjs/lib/esm/function/arithmetic/log.js","node_modules/mathjs/lib/esm/function/arithmetic/log1p.js","node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js","node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js","node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js","node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js","node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js","node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js","node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js","node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js","node_modules/mathjs/lib/esm/function/bitwise/leftShift.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js","node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js","node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js","node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js","node_modules/mathjs/lib/esm/function/logical/and.js","node_modules/mathjs/lib/esm/function/relational/compare.js","node_modules/mathjs/lib/esm/function/relational/compareNatural.js","node_modules/javascript-natural-sort/naturalSort.js","node_modules/mathjs/lib/esm/function/relational/compareText.js","node_modules/mathjs/lib/esm/function/relational/equal.js","node_modules/mathjs/lib/esm/function/relational/equalText.js","node_modules/mathjs/lib/esm/function/relational/smaller.js","node_modules/mathjs/lib/esm/function/relational/smallerEq.js","node_modules/mathjs/lib/esm/function/relational/larger.js","node_modules/mathjs/lib/esm/function/relational/largerEq.js","node_modules/mathjs/lib/esm/function/relational/deepEqual.js","node_modules/mathjs/lib/esm/function/relational/unequal.js","node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js","node_modules/mathjs/lib/esm/function/matrix/sort.js","node_modules/mathjs/lib/esm/function/statistics/max.js","node_modules/mathjs/lib/esm/function/statistics/min.js","node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js","node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js","node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js","node_modules/mathjs/lib/esm/type/matrix/Spa.js","node_modules/mathjs/lib/esm/type/unit/Unit.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/mathjs/lib/esm/utils/bignumber/constants.js","node_modules/mathjs/lib/esm/type/unit/function/unit.js","node_modules/mathjs/lib/esm/type/matrix/function/sparse.js","node_modules/mathjs/lib/esm/type/unit/function/createUnit.js","node_modules/mathjs/lib/esm/function/trigonometry/acos.js","node_modules/mathjs/lib/esm/function/trigonometry/acosh.js","node_modules/mathjs/lib/esm/function/trigonometry/acot.js","node_modules/mathjs/lib/esm/function/trigonometry/acoth.js","node_modules/mathjs/lib/esm/function/trigonometry/acsc.js","node_modules/mathjs/lib/esm/function/trigonometry/acsch.js","node_modules/mathjs/lib/esm/function/trigonometry/asec.js","node_modules/mathjs/lib/esm/function/trigonometry/asech.js","node_modules/mathjs/lib/esm/function/trigonometry/asin.js","node_modules/mathjs/lib/esm/function/trigonometry/asinh.js","node_modules/mathjs/lib/esm/function/trigonometry/atan.js","node_modules/mathjs/lib/esm/function/trigonometry/atan2.js","node_modules/mathjs/lib/esm/function/trigonometry/atanh.js","node_modules/mathjs/lib/esm/function/trigonometry/cos.js","node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js","node_modules/mathjs/lib/esm/function/trigonometry/cosh.js","node_modules/mathjs/lib/esm/function/trigonometry/cot.js","node_modules/mathjs/lib/esm/function/trigonometry/coth.js","node_modules/mathjs/lib/esm/function/trigonometry/csc.js","node_modules/mathjs/lib/esm/function/trigonometry/csch.js","node_modules/mathjs/lib/esm/function/trigonometry/sec.js","node_modules/mathjs/lib/esm/function/trigonometry/sech.js","node_modules/mathjs/lib/esm/function/trigonometry/sin.js","node_modules/mathjs/lib/esm/function/trigonometry/sinh.js","node_modules/mathjs/lib/esm/function/trigonometry/tan.js","node_modules/mathjs/lib/esm/function/trigonometry/tanh.js","node_modules/mathjs/lib/esm/function/set/setCartesian.js","node_modules/mathjs/lib/esm/function/set/setDifference.js","node_modules/mathjs/lib/esm/function/set/setDistinct.js","node_modules/mathjs/lib/esm/function/set/setIntersect.js","node_modules/mathjs/lib/esm/function/set/setIsSubset.js","node_modules/mathjs/lib/esm/function/set/setMultiplicity.js","node_modules/mathjs/lib/esm/function/set/setPowerset.js","node_modules/mathjs/lib/esm/function/set/setSize.js","node_modules/mathjs/lib/esm/function/set/setSymDifference.js","node_modules/mathjs/lib/esm/function/set/setUnion.js","node_modules/mathjs/lib/esm/function/arithmetic/add.js","node_modules/mathjs/lib/esm/function/arithmetic/hypot.js","node_modules/mathjs/lib/esm/function/arithmetic/norm.js","node_modules/mathjs/lib/esm/function/matrix/dot.js","node_modules/mathjs/lib/esm/function/matrix/trace.js","node_modules/mathjs/lib/esm/type/matrix/function/index.js","node_modules/mathjs/lib/esm/expression/node/Node.js","node_modules/mathjs/lib/esm/expression/keywords.js","node_modules/mathjs/lib/esm/expression/node/AccessorNode.js","node_modules/mathjs/lib/esm/expression/node/utils/access.js","node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js","node_modules/mathjs/lib/esm/expression/node/ArrayNode.js","node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js","node_modules/mathjs/lib/esm/expression/node/utils/assign.js","node_modules/mathjs/lib/esm/expression/operators.js","node_modules/mathjs/lib/esm/expression/node/BlockNode.js","node_modules/mathjs/lib/esm/expression/node/ConditionalNode.js","node_modules/mathjs/lib/esm/expression/node/ConstantNode.js","node_modules/mathjs/lib/esm/utils/latex.js","node_modules/escape-latex/dist/index.js","node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js","node_modules/mathjs/lib/esm/expression/node/IndexNode.js","node_modules/mathjs/lib/esm/expression/node/ObjectNode.js","node_modules/mathjs/lib/esm/expression/node/OperatorNode.js","node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js","node_modules/mathjs/lib/esm/expression/node/RangeNode.js","node_modules/mathjs/lib/esm/expression/node/RelationalNode.js","node_modules/mathjs/lib/esm/expression/node/SymbolNode.js","node_modules/mathjs/lib/esm/expression/node/FunctionNode.js","node_modules/mathjs/lib/esm/utils/scope.js","node_modules/mathjs/lib/esm/expression/parse.js","node_modules/mathjs/lib/esm/expression/function/compile.js","node_modules/mathjs/lib/esm/expression/function/evaluate.js","node_modules/mathjs/lib/esm/expression/Parser.js","node_modules/mathjs/lib/esm/expression/function/parser.js","node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js","node_modules/mathjs/lib/esm/function/algebra/decomposition/qr.js","node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csSqr.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csEtree.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csFkeep.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csCounts.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csLeaf.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csSpsolve.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csReach.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csDfs.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csUnflip.js","node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js","node_modules/mathjs/lib/esm/function/algebra/sparse/csIpvec.js","node_modules/mathjs/lib/esm/function/algebra/polynomialRoot.js","node_modules/mathjs/lib/esm/expression/Help.js","node_modules/mathjs/lib/esm/type/chain/Chain.js","node_modules/mathjs/lib/esm/expression/function/help.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/leafCount.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/polynomialRoot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/resolve.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyConstant.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyCore.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/symbolicEqual.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/invmod.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sylvester.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/schur.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/lyap.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/pinv.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromColumns.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromFunction.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromRows.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/fft.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ifft.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/lgamma.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/cumsum.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/print.js","node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js","node_modules/mathjs/lib/esm/type/chain/function/chain.js","node_modules/mathjs/lib/esm/function/matrix/det.js","node_modules/mathjs/lib/esm/function/matrix/inv.js","node_modules/mathjs/lib/esm/function/matrix/pinv.js","node_modules/mathjs/lib/esm/function/matrix/eigs.js","node_modules/mathjs/lib/esm/function/matrix/eigs/complexEigs.js","node_modules/mathjs/lib/esm/function/matrix/eigs/realSymetric.js","node_modules/mathjs/lib/esm/function/matrix/expm.js","node_modules/mathjs/lib/esm/function/matrix/sqrtm.js","node_modules/mathjs/lib/esm/function/algebra/sylvester.js","node_modules/mathjs/lib/esm/function/algebra/decomposition/schur.js","node_modules/mathjs/lib/esm/function/algebra/lyap.js","node_modules/mathjs/lib/esm/function/arithmetic/divide.js","node_modules/mathjs/lib/esm/function/geometry/distance.js","node_modules/mathjs/lib/esm/function/geometry/intersect.js","node_modules/mathjs/lib/esm/function/statistics/sum.js","node_modules/mathjs/lib/esm/function/statistics/cumsum.js","node_modules/mathjs/lib/esm/function/statistics/mean.js","node_modules/mathjs/lib/esm/function/statistics/median.js","node_modules/mathjs/lib/esm/function/statistics/mad.js","node_modules/mathjs/lib/esm/function/statistics/variance.js","node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js","node_modules/mathjs/lib/esm/function/statistics/std.js","node_modules/mathjs/lib/esm/function/probability/combinations.js","node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js","node_modules/mathjs/lib/esm/function/probability/gamma.js","node_modules/mathjs/lib/esm/function/probability/lgamma.js","node_modules/mathjs/lib/esm/function/probability/factorial.js","node_modules/mathjs/lib/esm/function/probability/kldivergence.js","node_modules/mathjs/lib/esm/function/probability/multinomial.js","node_modules/mathjs/lib/esm/function/probability/permutations.js","node_modules/mathjs/lib/esm/function/probability/pickRandom.js","node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js","node_modules/seedrandom/index.js","node_modules/seedrandom/lib/alea.js","node_modules/seedrandom/lib/xor128.js","node_modules/seedrandom/lib/xorwow.js","node_modules/seedrandom/lib/xorshift7.js","node_modules/seedrandom/lib/xor4096.js","node_modules/seedrandom/lib/tychei.js","node_modules/seedrandom/seedrandom.js","../../../C:/Users/elija/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/mathjs/lib/esm/function/probability/random.js","node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js","node_modules/mathjs/lib/esm/function/probability/randomInt.js","node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js","node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js","node_modules/mathjs/lib/esm/function/combinatorics/catalan.js","node_modules/mathjs/lib/esm/function/combinatorics/composition.js","node_modules/mathjs/lib/esm/function/algebra/leafCount.js","node_modules/mathjs/lib/esm/function/algebra/simplify.js","node_modules/mathjs/lib/esm/function/algebra/simplify/wildcards.js","node_modules/mathjs/lib/esm/function/algebra/simplify/util.js","node_modules/mathjs/lib/esm/function/algebra/simplifyConstant.js","node_modules/mathjs/lib/esm/function/algebra/simplifyCore.js","node_modules/mathjs/lib/esm/function/algebra/resolve.js","node_modules/mathjs/lib/esm/function/algebra/symbolicEqual.js","node_modules/mathjs/lib/esm/function/algebra/derivative.js","node_modules/mathjs/lib/esm/function/algebra/rationalize.js","node_modules/mathjs/lib/esm/json/reviver.js","node_modules/mathjs/lib/esm/json/replacer.js","node_modules/mathjs/lib/esm/constants.js","node_modules/mathjs/lib/esm/version.js","node_modules/mathjs/lib/esm/type/unit/physicalConstants.js","node_modules/mathjs/lib/esm/expression/transform/apply.transform.js","node_modules/mathjs/lib/esm/expression/transform/column.transform.js","node_modules/mathjs/lib/esm/expression/transform/filter.transform.js","node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js","node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js","node_modules/mathjs/lib/esm/expression/transform/index.transform.js","node_modules/mathjs/lib/esm/expression/transform/map.transform.js","node_modules/mathjs/lib/esm/expression/transform/max.transform.js","node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js","node_modules/mathjs/lib/esm/expression/transform/mean.transform.js","node_modules/mathjs/lib/esm/expression/transform/min.transform.js","node_modules/mathjs/lib/esm/expression/transform/range.transform.js","node_modules/mathjs/lib/esm/expression/transform/row.transform.js","node_modules/mathjs/lib/esm/expression/transform/subset.transform.js","node_modules/mathjs/lib/esm/expression/transform/concat.transform.js","node_modules/mathjs/lib/esm/expression/transform/diff.transform.js","node_modules/mathjs/lib/esm/expression/transform/std.transform.js","node_modules/mathjs/lib/esm/expression/transform/sum.transform.js","node_modules/mathjs/lib/esm/expression/transform/cumsum.transform.js","node_modules/mathjs/lib/esm/expression/transform/variance.transform.js","node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js","node_modules/mathjs/lib/esm/entry/typeChecks.js","node_modules/mathjs/lib/esm/entry/dependenciesAny.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAbs.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTyped.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesComplexClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFractionClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAccessorNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSubset.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrix.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEqualScalar.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcos.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcosh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcoth.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcsc.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAcsch.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAdd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAddScalar.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAnd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesZeros.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesApply.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsInteger.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesApplyTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesArg.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesArrayNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAsec.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAsech.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAsin.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAsinh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAssignmentNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAtan.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAtan2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAtanh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAtomicMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUnitClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDivideScalar.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNumeric.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBignumber.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFraction.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNumber.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEqual.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFix.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCeil.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRound.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFloor.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFormat.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNumeric.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPow.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIdentity.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesInv.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDet.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsZero.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMultiply.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConj.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSize.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSubtract.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesAvogadro.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBellNumbers.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNegative.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesStirlingS2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCombinations.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFactorial.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGamma.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLarger.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBin.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBitAnd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBitNot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBitOr.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBitXor.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBlockNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesResultSet.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBohrMagneton.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBohrRadius.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBoltzmann.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesBoolean.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCatalan.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCbrt.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesChain.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesChainClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesClone.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesColumn.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSmaller.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRange.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLargerEq.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSmallerEq.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesColumnTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCombinationsWithRep.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCompare.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCompareNatural.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCompareText.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCompile.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesParse.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConditionalNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConstantNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFunctionNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSymbolNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesObjectNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesOperatorNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRelationalNode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesComplex.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesComposition.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsPositive.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConcat.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConcatTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCos.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCosh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCoth.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCoulomb.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCount.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesProd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCreateUnit.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCross.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCsc.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCsch.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCtranspose.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTranspose.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCube.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCumSum.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUnaryPlus.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesCumSumTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDeepEqual.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDerivative.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplify.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDivide.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesResolve.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplifyConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSimplifyCore.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDeuteronMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDiag.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDiff.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDiffTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDistance.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSqrt.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDotDivide.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDotMultiply.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesDotPow.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesE.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEfimovFactor.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEigs.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFlatten.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIm.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesQr.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSign.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRe.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSin.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUsolve.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUsolveAll.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesElectricConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesElectronMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesElementaryCharge.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEqualText.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesErf.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesEvaluate.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesExp.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesExpm.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesExpm1.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFalse.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFaraday.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFermiCoupling.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFft.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesI.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTau.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFilter.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFilterTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFineStructure.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesFirstRadiation.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesForEach.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesForEachTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGasConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGcd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGravitationConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesGravity.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHasNumericValue.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHelp.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHelpClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHex.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesHypot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIfft.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIndex.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIndexTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesInfinity.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIntersect.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesInvmod.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMod.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesXgcd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsNaN.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesIsPrime.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesKldivergence.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLog.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMap.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSum.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesKlitzing.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesKron.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLN10.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLN2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLOG10E.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLOG2E.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLcm.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLeafCount.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLeftShift.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLgamma.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLog10.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLog1p.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLog2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLoschmidt.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLsolve.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLsolveAll.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLup.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSpaClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLusolve.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSlu.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesLyap.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSylvester.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSchur.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNorm.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMad.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMedian.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPartitionSelect.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMagneticConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMapTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromFunction.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMatrixFromRows.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMax.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMaxTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMean.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMeanTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMin.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMinTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarMassC12.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMolarVolume.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesMultinomial.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNaN.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNeutronMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNthRoot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNthRoots.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesNull.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesOct.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesOnes.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesOr.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesParser.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesParserClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPermutations.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPhi.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPi.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPickRandom.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPinv.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckCharge.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckLength.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPlanckTime.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPolynomialRoot.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTypeOf.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesPrint.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesProtonMass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesQuantileSeq.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRandom.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRandomInt.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeClass.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRangeTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRationalize.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesReplacer.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesReshape.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesResize.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesReviver.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRightArithShift.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRightLogShift.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRotate.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRotationMatrix.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRow.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRowTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesRydberg.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSQRT1_2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSQRT2.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSackurTetrode.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSec.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSech.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSecondRadiation.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetCartesian.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetDifference.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetDistinct.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetIntersect.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetIsSubset.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetPowerset.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetSize.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetSymDifference.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSetUnion.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSinh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSort.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSparse.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSplitUnit.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSqrtm.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSquare.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSqueeze.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesStd.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesVariance.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesStdTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesString.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSubsetTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSumTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesSymbolicEqual.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTan.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTanh.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTo.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTrace.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesTrue.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUnequal.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUnitFunction.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUppercaseE.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesUppercasePi.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesVarianceTransform.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesVersion.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesWienDisplacement.generated.js","node_modules/mathjs/lib/esm/entry/dependenciesAny/dependenciesXor.generated.js","node_modules/mathjs/lib/esm/entry/allFactoriesAny.js","node_modules/mathjs/lib/esm/core/create.js","node_modules/mathjs/lib/esm/utils/emitter.js","node_modules/tiny-emitter/index.js","node_modules/mathjs/lib/esm/core/function/import.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"86c50bfd67a6b0e0\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","const math = require('mathjs');\r\nimport * as THREE from \"../../learning/src/node_modules/three/build/three.module.js\";\r\nimport {OrbitControls} from '../../learning/src/node_modules/three/examples/jsm/controls/OrbitControls.js'\r\n\r\n\r\nconst generate = () => {\r\n\t\r\n\t\r\n\tconst renderer = new THREE.WebGLRenderer({antialias: true });\r\n\trenderer.setSize(500,357);\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\tconst scene = new THREE.Scene();\r\n\tscene.fog = new THREE.FogExp2(0xFFFFFF,0.02)\r\n\tconst camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000);\r\n\trenderer.render(scene,camera);\r\n\tconst Orbit =  new OrbitControls(camera,renderer.domElement);\r\n\tOrbit.update();\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconst geometry = new THREE.BoxGeometry(.1,.1,.1)\r\n\tconst material = new THREE.MeshBasicMaterial({color: 0x00ff00});\r\n\tconst cube = new THREE.Mesh(geometry,material);\r\n\tscene.add(cube);\r\n\t\r\n\t\r\n\t\r\n\tconst headL = 0.3\r\n\tconst headW = 0.15\r\n\tconst orgin = new THREE.Vector3(0,0,0);\r\n\t\r\n\t\r\n\tconst startV1 = new THREE.Vector3(0,2,2);\r\n\tconst V1 = new THREE.Vector3(2,0,0);\r\n\tlength1 = Math.sqrt(2**2)\r\n\tV1.normalize();\r\n\tconst arrowHelper1 = new THREE.ArrowHelper(V1,startV1,3,0x00A30E,headL,headW);\r\n\tscene.add(arrowHelper1);\r\n\t\r\n\tconst startV2 = new THREE.Vector3(0,3,3);\r\n\tconst V2 = new THREE.Vector3(3,-3,0);\r\n\tlength2 = Math.sqrt(3**2+3**2)\r\n\tV2.normalize();\r\n\tconst arrowHelper2 = new THREE.ArrowHelper(V2,startV2,length2,0xE86A00,headL,headW);\r\n\tscene.add(arrowHelper2);\r\n\t\r\n\tconst V3 = new THREE.Vector3(2,1,0);\r\n\tV3.normalize();\r\n\tlength3= Math.sqrt(2**2+1**2);\r\n\tconst arrowHelper3 = new THREE.ArrowHelper(V3,orgin,length3,0x000000,headL,headW);\r\n\tscene.add(arrowHelper3);\r\n\t\r\n\t\r\n\tlength =(Math.ceil(Math.max(length1,length2,length3)))*2;\r\n\tconsole.log(length);\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tcamera.position.z=9.8;\r\n\tcamera.position.y= 6;\r\n\tcamera.position.x=4.49;\r\n\tcamera.lookAt(0,0,0)\r\n\t\r\n\t\r\n\tconst gridHelperx = new THREE.GridHelper(length,length,0x000000,0x8E8E8E);\r\n\tscene.add(gridHelperx)\r\n\t\r\n\tconst gridHelperY = new THREE.GridHelper(length,length,0x000000,0xc7c7c7);\r\n\tgridHelperY.rotation.x=0.5*Math.PI\r\n\tscene.add(gridHelperY);\r\n\t\r\n\tconst gridHelperZ = new THREE.GridHelper(length,length,0x000000,0xc7c7c7);\r\n\tgridHelperZ.rotation.z=0.5*Math.PI\r\n\tscene.add(gridHelperZ);\r\n\t\r\n\trenderer.setClearColor(0xFFFFFF)//background\r\n\t\r\n\t\r\n\t\r\n\tconst planeG = new THREE.PlaneGeometry(length,length);\r\n\tconst planeM = new THREE.MeshBasicMaterial({color:0xffffff,side:THREE.DoubleSide,opacity:0.7,transparent: true});\r\n\tconst planex = new THREE.Mesh(planeG,planeM);\r\n\tconst planey = new THREE.Mesh(planeG,planeM);\r\n\tconst planez = new THREE.Mesh(planeG,planeM);\r\n\t\r\n\tplanex.rotation.x=0.5*Math.PI\r\n\tplaney.rotation.x=0\r\n\tplanez.rotation.y=0.5*Math.PI\r\n\t\r\n\tscene.add(planex);\r\n\tscene.add(planey);\r\n\tscene.add(planez);\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tfunction animate(){\r\n\t\r\n\t\trequestAnimationFrame(animate);\r\n\t\trenderer.render(scene,camera);\r\n\t}\r\n\tanimate();\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tx1 = math.randomInt(-10,10);\r\n\ty1 = math.randomInt(-10,10);\r\n\t\r\n\tx2 = math.randomInt(-10,10);\r\n\ty2 = math.randomInt(-10,10);\r\n\t\r\n\tx = x1 + x2;\r\n\ty = y1 + y2;\r\n\t\r\n\t\r\n\t\t\r\n\tlength = Math.sqrt(x**2+y**2);\r\n\t\r\n\r\n\r\ndata = {\r\n    params: {\r\n\t\tx1: x1, \r\n\t\ty1: y1,\r\n\t\tx2: x2,\r\n\t\ty2: y2\r\n    },\r\n    correct_answers: {\r\n\t\tlength: length,\r\n      },\r\n\r\n    nDigits: 2,\r\n    sigfigs:2\r\n}\r\n\r\nconsole.log(data);\r\nreturn data;\r\n}\r\n\r\nmodule.exports = {\r\n    generate\r\n}","export * from './entry/mainAny.js';","// configuration\nexport { config } from './configReadonly.js';\n\n// functions and constants\nexport * from './pureFunctionsAny.generated.js';\nexport * from './impureFunctionsAny.generated.js';\nexport * from './typeChecks.js';\n\n// error classes\nexport { IndexError } from '../error/IndexError.js';\nexport { DimensionError } from '../error/DimensionError.js';\nexport { ArgumentsError } from '../error/ArgumentsError.js';\n\n// dependency groups\nexport * from './dependenciesAny.generated.js';\n\n// factory functions\nexport * from '../factoriesAny.js';\n\n// core\nexport { create } from '../core/create.js';\nexport { factory } from '../utils/factory.js';","import _extends from \"@babel/runtime/helpers/extends\";\nimport { DEFAULT_CONFIG } from '../core/config.js';\nimport { MATRIX_OPTIONS, NUMBER_OPTIONS } from '../core/function/config.js';\n\n// create a read-only version of config\nexport var config = /* #__PURE__ */function config(options) {\n  if (options) {\n    throw new Error('The global config is readonly. \\n' + 'Please create a mathjs instance if you want to change the default configuration. \\n' + 'Example:\\n' + '\\n' + '  import { create, all } from \\'mathjs\\';\\n' + '  const mathjs = create(all);\\n' + '  mathjs.config({ number: \\'BigNumber\\' });\\n');\n  }\n  return Object.freeze(DEFAULT_CONFIG);\n};\n_extends(config, DEFAULT_CONFIG, {\n  MATRIX_OPTIONS,\n  NUMBER_OPTIONS\n});","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export var DEFAULT_CONFIG = {\n  // minimum relative difference between two compared values,\n  // used by all comparison functions\n  epsilon: 1e-12,\n  // type of default matrix output. Choose 'matrix' (default) or 'array'\n  matrix: 'Matrix',\n  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n  number: 'number',\n  // number of significant digits in BigNumbers\n  precision: 64,\n  // predictable output type of functions. When true, output type depends only\n  // on the input types. When false (default), output type can vary depending\n  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n  // predictable is false, and returns `NaN` when true.\n  predictable: false,\n  // random seed for seeded pseudo random number generation\n  // null = randomly seed\n  randomSeed: null\n};","import { clone, mapObject, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS);\n\n      // merge options\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone);\n\n      // emit 'config' event\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\n  // attach the config properties as readonly properties to the config function\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}","import { isBigNumber } from './is.js';\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexport function clone(x) {\n  var type = typeof x;\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n\n  // object\n  return mapObject(x, clone);\n}\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexport function mapObject(object, callback) {\n  var clone = {};\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n  return clone;\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n  return a;\n}\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n  for (var prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n  _deepFlatten(nestedObject, flattenedObject);\n  return flattenedObject;\n}\n\n// helper function used by deepFlatten\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {\n          return null;\n        }\n      });\n      return true;\n    }\n  } catch (e) {}\n  return false;\n}\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n  var _value;\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n  var obj = object;\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n  return obj;\n}\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n  var child = object;\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n  return child;\n}\n\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n  var child = object;\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n    child = child[key];\n  }\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n  return object;\n}\n\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\nexport function pick(object, properties, transform) {\n  var copy = {};\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n  return copy;\n}\n\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\nexport function pickShallow(object, properties) {\n  var copy = {};\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(key => object[key]);\n}\n\n// helper function to test whether a string contains a path like 'user.name'\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}","// type checks for all known types\n//\n// note that:\n//\n// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n//   instanceof cannot be used because that would not allow to pass data from\n//   one instance of math.js to another since each has it's own instance of Unit.\n// - check the `isUnit` property via the constructor, so there will be no\n//   matches for \"fake\" instances like plain objects with a property `isUnit`.\n//   That is important for security reasons.\n// - It must not be possible to override the type checks used internally,\n//   for security reasons, so these functions are not exposed in the expression\n//   parser.\n\nexport function isNumber(x) {\n  return typeof x === 'number';\n}\nexport function isBigNumber(x) {\n  if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {\n    return false;\n  }\n  if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {\n    return true;\n  }\n  if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {\n    return true;\n  }\n  return false;\n}\nexport function isComplex(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;\n}\nexport function isFraction(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;\n}\nexport function isUnit(x) {\n  return x && x.constructor.prototype.isUnit === true || false;\n}\nexport function isString(x) {\n  return typeof x === 'string';\n}\nexport var isArray = Array.isArray;\nexport function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix === true || false;\n}\n\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\nexport function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n}\nexport function isDenseMatrix(x) {\n  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isSparseMatrix(x) {\n  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isRange(x) {\n  return x && x.constructor.prototype.isRange === true || false;\n}\nexport function isIndex(x) {\n  return x && x.constructor.prototype.isIndex === true || false;\n}\nexport function isBoolean(x) {\n  return typeof x === 'boolean';\n}\nexport function isResultSet(x) {\n  return x && x.constructor.prototype.isResultSet === true || false;\n}\nexport function isHelp(x) {\n  return x && x.constructor.prototype.isHelp === true || false;\n}\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\nexport function isDate(x) {\n  return x instanceof Date;\n}\nexport function isRegExp(x) {\n  return x instanceof RegExp;\n}\nexport function isObject(x) {\n  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));\n}\nexport function isNull(x) {\n  return x === null;\n}\nexport function isUndefined(x) {\n  return x === undefined;\n}\nexport function isAccessorNode(x) {\n  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isArrayNode(x) {\n  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isAssignmentNode(x) {\n  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isBlockNode(x) {\n  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConditionalNode(x) {\n  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConstantNode(x) {\n  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;\n}\n\n/* Very specialized: returns true for those nodes which in the numerator of\n   a fraction means that the division in that fraction has precedence over implicit\n   multiplication, e.g. -2/3 x parses as (-2/3) x and 3/4 x parses as (3/4) x but\n   6!/8 x parses as 6! / (8x). It is located here because it is shared between\n   parse.js and OperatorNode.js (for parsing and printing, respectively).\n\n   This should *not* be exported from mathjs, unlike most of the tests here.\n   Its name does not start with 'is' to prevent utils/snapshot.js from thinking\n   it should be exported.\n*/\nexport function rule2Node(node) {\n  return isConstantNode(node) || isOperatorNode(node) && node.args.length === 1 && isConstantNode(node.args[0]) && '-+~'.includes(node.op);\n}\nexport function isFunctionAssignmentNode(x) {\n  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isFunctionNode(x) {\n  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isIndexNode(x) {\n  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isNode(x) {\n  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isObjectNode(x) {\n  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isOperatorNode(x) {\n  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isParenthesisNode(x) {\n  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isRangeNode(x) {\n  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isRelationalNode(x) {\n  return x && x.isRelationalNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isSymbolNode(x) {\n  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isChain(x) {\n  return x && x.constructor.prototype.isChain === true || false;\n}\nexport function typeOf(x) {\n  var t = typeof x;\n  if (t === 'object') {\n    if (x === null) return 'null';\n    if (isBigNumber(x)) return 'BigNumber'; // Special: weird mashup with Decimal\n    if (x.constructor && x.constructor.name) return x.constructor.name;\n    return 'Object'; // just in case\n  }\n\n  return t; // can be 'string', 'number', 'boolean', 'function', 'bigint', ...\n}","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createBigNumberClass, createComplexClass, createE, createFalse, createFineStructure, createFractionClass, createI, createInfinity, createLN10, createLOG10E, createMatrixClass, createNaN, createNull, createPhi, createRangeClass, createResultSet, createSQRT1_2,\n// eslint-disable-line camelcase\ncreateSackurTetrode, createTau, createTrue, createVersion, createDenseMatrixClass, createEfimovFactor, createLN2, createPi, createReplacer, createSQRT2, createTyped, createUnaryPlus, createWeakMixingAngle, createAbs, createAcos, createAcot, createAcsc, createAddScalar, createArg, createAsech, createAsinh, createAtan, createAtanh, createBignumber, createBitNot, createBoolean, createClone, createCombinations, createComplex, createConj, createCosh, createCoth, createCsc, createCube, createEqualScalar, createErf, createExp, createExpm1, createFilter, createForEach, createFormat, createGetMatrixDataType, createHex, createIm, createIsInteger, createIsNegative, createIsPositive, createIsZero, createLOG2E, createLgamma, createLog10, createLog2, createMap, createMultiplyScalar, createNot, createNumber, createOct, createPickRandom, createPrint, createRandom, createRe, createSec, createSign, createSin, createSparseMatrixClass, createSplitUnit, createSquare, createString, createTan, createTypeOf, createAcosh, createAcsch, createApply, createAsec, createBin, createCombinationsWithRep, createCos, createCsch, createIsNaN, createIsPrime, createRandomInt, createSech, createSinh, createSparse, createSqrt, createTanh, createUnaryMinus, createAcoth, createCot, createFraction, createIsNumeric, createMatrix, createMatrixFromFunction, createMod, createNthRoot, createNumeric, createOr, createProd, createReshape, createSize, createSmaller, createSqueeze, createSubset, createSubtract, createTo, createTranspose, createXgcd, createZeros, createAnd, createBitAnd, createBitXor, createCbrt, createCompare, createCompareText, createConcat, createCount, createCtranspose, createDiag, createDivideScalar, createDotDivide, createEqual, createFft, createFlatten, createGcd, createHasNumericValue, createHypot, createIfft, createKron, createLargerEq, createLeftShift, createLsolve, createMatrixFromColumns, createMin, createMode, createNthRoots, createOnes, createPartitionSelect, createResize, createRightArithShift, createRound, createSmallerEq, createUnequal, createUsolve, createXor, createAdd, createAtan2, createBitOr, createCatalan, createCompareNatural, createCumSum, createDeepEqual, createDiff, createDot, createEqualText, createFloor, createIdentity, createInvmod, createLarger, createLog, createLsolveAll, createMatrixFromRows, createMultiply, createQr, createRange, createRightLogShift, createSetSize, createSlu, createSum, createTrace, createUsolveAll, createAsin, createCeil, createComposition, createCross, createDet, createDistance, createDotMultiply, createFibonacciHeapClass, createFix, createImmutableDenseMatrixClass, createIndexClass, createIntersect, createLcm, createLog1p, createMax, createQuantileSeq, createRow, createSetCartesian, createSetDistinct, createSetIsSubset, createSetPowerset, createSort, createColumn, createIndex, createInv, createPinv, createPow, createSetDifference, createSetMultiplicity, createSpaClass, createSqrtm, createUnitClass, createVacuumImpedance, createWienDisplacement, createAtomicMass, createBohrMagneton, createBoltzmann, createConductanceQuantum, createCreateUnit, createDeuteronMass, createDotPow, createElectricConstant, createElementaryCharge, createExpm, createFaraday, createFirstRadiation, createGamma, createGravitationConstant, createHartreeEnergy, createKlitzing, createLoschmidt, createMagneticConstant, createMolarMass, createMolarPlanckConstant, createNeutronMass, createNuclearMagneton, createPlanckCharge, createPlanckLength, createPlanckTemperature, createProtonMass, createReducedPlanckConstant, createRydberg, createSecondRadiation, createSetSymDifference, createSpeedOfLight, createStefanBoltzmann, createThomsonCrossSection, createAvogadro, createBohrRadius, createCoulomb, createDivide, createElectronMass, createFactorial, createGravity, createInverseConductanceQuantum, createLup, createMagneticFluxQuantum, createMolarMassC12, createMultinomial, createPermutations, createPlanckMass, createPolynomialRoot, createSetIntersect, createStirlingS2, createUnitFunction, createBellNumbers, createEigs, createFermiCoupling, createMean, createMolarVolume, createPlanckConstant, createQuantumOfCirculation, createSetUnion, createVariance, createClassicalElectronRadius, createLusolve, createMedian, createKldivergence, createMad, createStd, createGasConstant, createNorm, createRotationMatrix, createPlanckTime, createSchur, createRotate, createSylvester, createLyap } from '../factoriesAny.js';\nexport var BigNumber = /* #__PURE__ */createBigNumberClass({\n  config\n});\nexport var Complex = /* #__PURE__ */createComplexClass({});\nexport var e = /* #__PURE__ */createE({\n  BigNumber,\n  config\n});\nexport var _false = /* #__PURE__ */createFalse({});\nexport var fineStructure = /* #__PURE__ */createFineStructure({\n  BigNumber,\n  config\n});\nexport var Fraction = /* #__PURE__ */createFractionClass({});\nexport var i = /* #__PURE__ */createI({\n  Complex\n});\nexport var _Infinity = /* #__PURE__ */createInfinity({\n  BigNumber,\n  config\n});\nexport var LN10 = /* #__PURE__ */createLN10({\n  BigNumber,\n  config\n});\nexport var LOG10E = /* #__PURE__ */createLOG10E({\n  BigNumber,\n  config\n});\nexport var Matrix = /* #__PURE__ */createMatrixClass({});\nexport var _NaN = /* #__PURE__ */createNaN({\n  BigNumber,\n  config\n});\nexport var _null = /* #__PURE__ */createNull({});\nexport var phi = /* #__PURE__ */createPhi({\n  BigNumber,\n  config\n});\nexport var Range = /* #__PURE__ */createRangeClass({});\nexport var ResultSet = /* #__PURE__ */createResultSet({});\nexport var SQRT1_2 = /* #__PURE__ */createSQRT1_2({\n  BigNumber,\n  config\n});\nexport var sackurTetrode = /* #__PURE__ */createSackurTetrode({\n  BigNumber,\n  config\n});\nexport var tau = /* #__PURE__ */createTau({\n  BigNumber,\n  config\n});\nexport var _true = /* #__PURE__ */createTrue({});\nexport var version = /* #__PURE__ */createVersion({});\nexport var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({\n  Matrix\n});\nexport var efimovFactor = /* #__PURE__ */createEfimovFactor({\n  BigNumber,\n  config\n});\nexport var LN2 = /* #__PURE__ */createLN2({\n  BigNumber,\n  config\n});\nexport var pi = /* #__PURE__ */createPi({\n  BigNumber,\n  config\n});\nexport var replacer = /* #__PURE__ */createReplacer({});\nexport var SQRT2 = /* #__PURE__ */createSQRT2({\n  BigNumber,\n  config\n});\nexport var typed = /* #__PURE__ */createTyped({\n  BigNumber,\n  Complex,\n  DenseMatrix,\n  Fraction\n});\nexport var unaryPlus = /* #__PURE__ */createUnaryPlus({\n  BigNumber,\n  config,\n  typed\n});\nexport var weakMixingAngle = /* #__PURE__ */createWeakMixingAngle({\n  BigNumber,\n  config\n});\nexport var abs = /* #__PURE__ */createAbs({\n  typed\n});\nexport var acos = /* #__PURE__ */createAcos({\n  Complex,\n  config,\n  typed\n});\nexport var acot = /* #__PURE__ */createAcot({\n  BigNumber,\n  typed\n});\nexport var acsc = /* #__PURE__ */createAcsc({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var addScalar = /* #__PURE__ */createAddScalar({\n  typed\n});\nexport var arg = /* #__PURE__ */createArg({\n  typed\n});\nexport var asech = /* #__PURE__ */createAsech({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var asinh = /* #__PURE__ */createAsinh({\n  typed\n});\nexport var atan = /* #__PURE__ */createAtan({\n  typed\n});\nexport var atanh = /* #__PURE__ */createAtanh({\n  Complex,\n  config,\n  typed\n});\nexport var bignumber = /* #__PURE__ */createBignumber({\n  BigNumber,\n  typed\n});\nexport var bitNot = /* #__PURE__ */createBitNot({\n  typed\n});\nexport var boolean = /* #__PURE__ */createBoolean({\n  typed\n});\nexport var clone = /* #__PURE__ */createClone({\n  typed\n});\nexport var combinations = /* #__PURE__ */createCombinations({\n  typed\n});\nexport var complex = /* #__PURE__ */createComplex({\n  Complex,\n  typed\n});\nexport var conj = /* #__PURE__ */createConj({\n  typed\n});\nexport var cosh = /* #__PURE__ */createCosh({\n  typed\n});\nexport var coth = /* #__PURE__ */createCoth({\n  BigNumber,\n  typed\n});\nexport var csc = /* #__PURE__ */createCsc({\n  BigNumber,\n  typed\n});\nexport var cube = /* #__PURE__ */createCube({\n  typed\n});\nexport var equalScalar = /* #__PURE__ */createEqualScalar({\n  config,\n  typed\n});\nexport var erf = /* #__PURE__ */createErf({\n  typed\n});\nexport var exp = /* #__PURE__ */createExp({\n  typed\n});\nexport var expm1 = /* #__PURE__ */createExpm1({\n  Complex,\n  typed\n});\nexport var filter = /* #__PURE__ */createFilter({\n  typed\n});\nexport var forEach = /* #__PURE__ */createForEach({\n  typed\n});\nexport var format = /* #__PURE__ */createFormat({\n  typed\n});\nexport var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({\n  typed\n});\nexport var hex = /* #__PURE__ */createHex({\n  format,\n  typed\n});\nexport var im = /* #__PURE__ */createIm({\n  typed\n});\nexport var isInteger = /* #__PURE__ */createIsInteger({\n  typed\n});\nexport var isNegative = /* #__PURE__ */createIsNegative({\n  typed\n});\nexport var isPositive = /* #__PURE__ */createIsPositive({\n  typed\n});\nexport var isZero = /* #__PURE__ */createIsZero({\n  typed\n});\nexport var LOG2E = /* #__PURE__ */createLOG2E({\n  BigNumber,\n  config\n});\nexport var lgamma = /* #__PURE__ */createLgamma({\n  Complex,\n  typed\n});\nexport var log10 = /* #__PURE__ */createLog10({\n  Complex,\n  config,\n  typed\n});\nexport var log2 = /* #__PURE__ */createLog2({\n  Complex,\n  config,\n  typed\n});\nexport var map = /* #__PURE__ */createMap({\n  typed\n});\nexport var multiplyScalar = /* #__PURE__ */createMultiplyScalar({\n  typed\n});\nexport var not = /* #__PURE__ */createNot({\n  typed\n});\nexport var number = /* #__PURE__ */createNumber({\n  typed\n});\nexport var oct = /* #__PURE__ */createOct({\n  format,\n  typed\n});\nexport var pickRandom = /* #__PURE__ */createPickRandom({\n  config,\n  typed\n});\nexport var print = /* #__PURE__ */createPrint({\n  typed\n});\nexport var random = /* #__PURE__ */createRandom({\n  config,\n  typed\n});\nexport var re = /* #__PURE__ */createRe({\n  typed\n});\nexport var sec = /* #__PURE__ */createSec({\n  BigNumber,\n  typed\n});\nexport var sign = /* #__PURE__ */createSign({\n  BigNumber,\n  Fraction,\n  complex,\n  typed\n});\nexport var sin = /* #__PURE__ */createSin({\n  typed\n});\nexport var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({\n  Matrix,\n  equalScalar,\n  typed\n});\nexport var splitUnit = /* #__PURE__ */createSplitUnit({\n  typed\n});\nexport var square = /* #__PURE__ */createSquare({\n  typed\n});\nexport var string = /* #__PURE__ */createString({\n  typed\n});\nexport var tan = /* #__PURE__ */createTan({\n  typed\n});\nexport var typeOf = /* #__PURE__ */createTypeOf({\n  typed\n});\nexport var acosh = /* #__PURE__ */createAcosh({\n  Complex,\n  config,\n  typed\n});\nexport var acsch = /* #__PURE__ */createAcsch({\n  BigNumber,\n  typed\n});\nexport var apply = /* #__PURE__ */createApply({\n  isInteger,\n  typed\n});\nexport var asec = /* #__PURE__ */createAsec({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var bin = /* #__PURE__ */createBin({\n  format,\n  typed\n});\nexport var combinationsWithRep = /* #__PURE__ */createCombinationsWithRep({\n  typed\n});\nexport var cos = /* #__PURE__ */createCos({\n  typed\n});\nexport var csch = /* #__PURE__ */createCsch({\n  BigNumber,\n  typed\n});\nexport var isNaN = /* #__PURE__ */createIsNaN({\n  typed\n});\nexport var isPrime = /* #__PURE__ */createIsPrime({\n  typed\n});\nexport var randomInt = /* #__PURE__ */createRandomInt({\n  config,\n  typed\n});\nexport var sech = /* #__PURE__ */createSech({\n  BigNumber,\n  typed\n});\nexport var sinh = /* #__PURE__ */createSinh({\n  typed\n});\nexport var sparse = /* #__PURE__ */createSparse({\n  SparseMatrix,\n  typed\n});\nexport var sqrt = /* #__PURE__ */createSqrt({\n  Complex,\n  config,\n  typed\n});\nexport var tanh = /* #__PURE__ */createTanh({\n  typed\n});\nexport var unaryMinus = /* #__PURE__ */createUnaryMinus({\n  typed\n});\nexport var acoth = /* #__PURE__ */createAcoth({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var cot = /* #__PURE__ */createCot({\n  BigNumber,\n  typed\n});\nexport var fraction = /* #__PURE__ */createFraction({\n  Fraction,\n  typed\n});\nexport var isNumeric = /* #__PURE__ */createIsNumeric({\n  typed\n});\nexport var matrix = /* #__PURE__ */createMatrix({\n  DenseMatrix,\n  Matrix,\n  SparseMatrix,\n  typed\n});\nexport var matrixFromFunction = /* #__PURE__ */createMatrixFromFunction({\n  isZero,\n  matrix,\n  typed\n});\nexport var mod = /* #__PURE__ */createMod({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var nthRoot = /* #__PURE__ */createNthRoot({\n  BigNumber,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var numeric = /* #__PURE__ */createNumeric({\n  bignumber,\n  fraction,\n  number\n});\nexport var or = /* #__PURE__ */createOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var prod = /* #__PURE__ */createProd({\n  config,\n  multiplyScalar,\n  numeric,\n  typed\n});\nexport var reshape = /* #__PURE__ */createReshape({\n  isInteger,\n  matrix,\n  typed\n});\nexport var size = /* #__PURE__ */createSize({\n  matrix,\n  config,\n  typed\n});\nexport var smaller = /* #__PURE__ */createSmaller({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var squeeze = /* #__PURE__ */createSqueeze({\n  matrix,\n  typed\n});\nexport var subset = /* #__PURE__ */createSubset({\n  matrix,\n  typed\n});\nexport var subtract = /* #__PURE__ */createSubtract({\n  DenseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var to = /* #__PURE__ */createTo({\n  matrix,\n  typed\n});\nexport var transpose = /* #__PURE__ */createTranspose({\n  matrix,\n  typed\n});\nexport var xgcd = /* #__PURE__ */createXgcd({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var zeros = /* #__PURE__ */createZeros({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var and = /* #__PURE__ */createAnd({\n  equalScalar,\n  matrix,\n  not,\n  typed,\n  zeros\n});\nexport var bitAnd = /* #__PURE__ */createBitAnd({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitXor = /* #__PURE__ */createBitXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var cbrt = /* #__PURE__ */createCbrt({\n  BigNumber,\n  Complex,\n  Fraction,\n  config,\n  isNegative,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var compare = /* #__PURE__ */createCompare({\n  BigNumber,\n  DenseMatrix,\n  Fraction,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var compareText = /* #__PURE__ */createCompareText({\n  matrix,\n  typed\n});\nexport var concat = /* #__PURE__ */createConcat({\n  isInteger,\n  matrix,\n  typed\n});\nexport var count = /* #__PURE__ */createCount({\n  prod,\n  size,\n  typed\n});\nexport var ctranspose = /* #__PURE__ */createCtranspose({\n  conj,\n  transpose,\n  typed\n});\nexport var diag = /* #__PURE__ */createDiag({\n  DenseMatrix,\n  SparseMatrix,\n  matrix,\n  typed\n});\nexport var divideScalar = /* #__PURE__ */createDivideScalar({\n  numeric,\n  typed\n});\nexport var dotDivide = /* #__PURE__ */createDotDivide({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var equal = /* #__PURE__ */createEqual({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var fft = /* #__PURE__ */createFft({\n  addScalar,\n  divideScalar,\n  exp,\n  i,\n  matrix,\n  multiplyScalar,\n  tau,\n  typed\n});\nexport var flatten = /* #__PURE__ */createFlatten({\n  matrix,\n  typed\n});\nexport var gcd = /* #__PURE__ */createGcd({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var hasNumericValue = /* #__PURE__ */createHasNumericValue({\n  isNumeric,\n  typed\n});\nexport var hypot = /* #__PURE__ */createHypot({\n  abs,\n  addScalar,\n  divideScalar,\n  isPositive,\n  multiplyScalar,\n  smaller,\n  sqrt,\n  typed\n});\nexport var ifft = /* #__PURE__ */createIfft({\n  conj,\n  dotDivide,\n  fft,\n  typed\n});\nexport var kron = /* #__PURE__ */createKron({\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var largerEq = /* #__PURE__ */createLargerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var leftShift = /* #__PURE__ */createLeftShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var lsolve = /* #__PURE__ */createLsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromColumns = /* #__PURE__ */createMatrixFromColumns({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var min = /* #__PURE__ */createMin({\n  config,\n  numeric,\n  smaller,\n  typed\n});\nexport var mode = /* #__PURE__ */createMode({\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var nthRoots = /* #__PURE__ */createNthRoots({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var ones = /* #__PURE__ */createOnes({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var partitionSelect = /* #__PURE__ */createPartitionSelect({\n  compare,\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var resize = /* #__PURE__ */createResize({\n  config,\n  matrix\n});\nexport var rightArithShift = /* #__PURE__ */createRightArithShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var round = /* #__PURE__ */createRound({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var smallerEq = /* #__PURE__ */createSmallerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var unequal = /* #__PURE__ */createUnequal({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var usolve = /* #__PURE__ */createUsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var xor = /* #__PURE__ */createXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var add = /* #__PURE__ */createAdd({\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var atan2 = /* #__PURE__ */createAtan2({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitOr = /* #__PURE__ */createBitOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var catalan = /* #__PURE__ */createCatalan({\n  addScalar,\n  combinations,\n  divideScalar,\n  isInteger,\n  isNegative,\n  multiplyScalar,\n  typed\n});\nexport var compareNatural = /* #__PURE__ */createCompareNatural({\n  compare,\n  typed\n});\nexport var cumsum = /* #__PURE__ */createCumSum({\n  add,\n  typed,\n  unaryPlus\n});\nexport var deepEqual = /* #__PURE__ */createDeepEqual({\n  equal,\n  typed\n});\nexport var diff = /* #__PURE__ */createDiff({\n  matrix,\n  number,\n  subtract,\n  typed\n});\nexport var dot = /* #__PURE__ */createDot({\n  addScalar,\n  conj,\n  multiplyScalar,\n  size,\n  typed\n});\nexport var equalText = /* #__PURE__ */createEqualText({\n  compareText,\n  isZero,\n  typed\n});\nexport var floor = /* #__PURE__ */createFloor({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var identity = /* #__PURE__ */createIdentity({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var invmod = /* #__PURE__ */createInvmod({\n  BigNumber,\n  add,\n  config,\n  equal,\n  isInteger,\n  mod,\n  smaller,\n  typed,\n  xgcd\n});\nexport var larger = /* #__PURE__ */createLarger({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var log = /* #__PURE__ */createLog({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var lsolveAll = /* #__PURE__ */createLsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromRows = /* #__PURE__ */createMatrixFromRows({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var multiply = /* #__PURE__ */createMultiply({\n  addScalar,\n  dot,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var qr = /* #__PURE__ */createQr({\n  addScalar,\n  complex,\n  conj,\n  divideScalar,\n  equal,\n  identity,\n  isZero,\n  matrix,\n  multiplyScalar,\n  sign,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus,\n  zeros\n});\nexport var range = /* #__PURE__ */createRange({\n  bignumber,\n  matrix,\n  config,\n  larger,\n  largerEq,\n  smaller,\n  smallerEq,\n  typed\n});\nexport var rightLogShift = /* #__PURE__ */createRightLogShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var setSize = /* #__PURE__ */createSetSize({\n  compareNatural,\n  typed\n});\nexport var slu = /* #__PURE__ */createSlu({\n  SparseMatrix,\n  abs,\n  add,\n  divideScalar,\n  larger,\n  largerEq,\n  multiply,\n  subtract,\n  transpose,\n  typed\n});\nexport var sum = /* #__PURE__ */createSum({\n  add,\n  config,\n  numeric,\n  typed\n});\nexport var trace = /* #__PURE__ */createTrace({\n  add,\n  matrix,\n  typed\n});\nexport var usolveAll = /* #__PURE__ */createUsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var asin = /* #__PURE__ */createAsin({\n  Complex,\n  config,\n  typed\n});\nexport var ceil = /* #__PURE__ */createCeil({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var composition = /* #__PURE__ */createComposition({\n  addScalar,\n  combinations,\n  isInteger,\n  isNegative,\n  isPositive,\n  larger,\n  typed\n});\nexport var cross = /* #__PURE__ */createCross({\n  matrix,\n  multiply,\n  subtract,\n  typed\n});\nexport var det = /* #__PURE__ */createDet({\n  divideScalar,\n  isZero,\n  matrix,\n  multiply,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var distance = /* #__PURE__ */createDistance({\n  abs,\n  addScalar,\n  divideScalar,\n  multiplyScalar,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var dotMultiply = /* #__PURE__ */createDotMultiply({\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var FibonacciHeap = /* #__PURE__ */createFibonacciHeapClass({\n  larger,\n  smaller\n});\nexport var fix = /* #__PURE__ */createFix({\n  Complex,\n  DenseMatrix,\n  ceil,\n  equalScalar,\n  floor,\n  matrix,\n  typed,\n  zeros\n});\nexport var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({\n  DenseMatrix,\n  smaller\n});\nexport var Index = /* #__PURE__ */createIndexClass({\n  ImmutableDenseMatrix\n});\nexport var intersect = /* #__PURE__ */createIntersect({\n  abs,\n  add,\n  addScalar,\n  config,\n  divideScalar,\n  equalScalar,\n  flatten,\n  isNumeric,\n  isZero,\n  matrix,\n  multiply,\n  multiplyScalar,\n  smaller,\n  subtract,\n  typed\n});\nexport var lcm = /* #__PURE__ */createLcm({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var log1p = /* #__PURE__ */createLog1p({\n  Complex,\n  config,\n  divideScalar,\n  log,\n  typed\n});\nexport var max = /* #__PURE__ */createMax({\n  config,\n  larger,\n  numeric,\n  typed\n});\nexport var quantileSeq = /* #__PURE__ */createQuantileSeq({\n  add,\n  compare,\n  multiply,\n  partitionSelect,\n  typed\n});\nexport var row = /* #__PURE__ */createRow({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var setCartesian = /* #__PURE__ */createSetCartesian({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setDistinct = /* #__PURE__ */createSetDistinct({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setIsSubset = /* #__PURE__ */createSetIsSubset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setPowerset = /* #__PURE__ */createSetPowerset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var sort = /* #__PURE__ */createSort({\n  compare,\n  compareNatural,\n  matrix,\n  typed\n});\nexport var column = /* #__PURE__ */createColumn({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var index = /* #__PURE__ */createIndex({\n  Index,\n  typed\n});\nexport var inv = /* #__PURE__ */createInv({\n  abs,\n  addScalar,\n  det,\n  divideScalar,\n  identity,\n  matrix,\n  multiply,\n  typed,\n  unaryMinus\n});\nexport var pinv = /* #__PURE__ */createPinv({\n  Complex,\n  add,\n  ctranspose,\n  deepEqual,\n  divideScalar,\n  dot,\n  dotDivide,\n  equal,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var pow = /* #__PURE__ */createPow({\n  Complex,\n  config,\n  fraction,\n  identity,\n  inv,\n  matrix,\n  multiply,\n  number,\n  typed\n});\nexport var setDifference = /* #__PURE__ */createSetDifference({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setMultiplicity = /* #__PURE__ */createSetMultiplicity({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var Spa = /* #__PURE__ */createSpaClass({\n  FibonacciHeap,\n  addScalar,\n  equalScalar\n});\nexport var sqrtm = /* #__PURE__ */createSqrtm({\n  abs,\n  add,\n  identity,\n  inv,\n  map,\n  max,\n  multiply,\n  size,\n  sqrt,\n  subtract,\n  typed\n});\nexport var Unit = /* #__PURE__ */createUnitClass({\n  BigNumber,\n  Complex,\n  Fraction,\n  abs,\n  addScalar,\n  config,\n  divideScalar,\n  equal,\n  fix,\n  format,\n  isNumeric,\n  multiplyScalar,\n  number,\n  pow,\n  round,\n  subtract\n});\nexport var vacuumImpedance = /* #__PURE__ */createVacuumImpedance({\n  BigNumber,\n  Unit,\n  config\n});\nexport var wienDisplacement = /* #__PURE__ */createWienDisplacement({\n  BigNumber,\n  Unit,\n  config\n});\nexport var atomicMass = /* #__PURE__ */createAtomicMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrMagneton = /* #__PURE__ */createBohrMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var boltzmann = /* #__PURE__ */createBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var conductanceQuantum = /* #__PURE__ */createConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var createUnit = /* #__PURE__ */createCreateUnit({\n  Unit,\n  typed\n});\nexport var deuteronMass = /* #__PURE__ */createDeuteronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var dotPow = /* #__PURE__ */createDotPow({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  pow,\n  typed\n});\nexport var electricConstant = /* #__PURE__ */createElectricConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var elementaryCharge = /* #__PURE__ */createElementaryCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var expm = /* #__PURE__ */createExpm({\n  abs,\n  add,\n  identity,\n  inv,\n  multiply,\n  typed\n});\nexport var faraday = /* #__PURE__ */createFaraday({\n  BigNumber,\n  Unit,\n  config\n});\nexport var firstRadiation = /* #__PURE__ */createFirstRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var gamma = /* #__PURE__ */createGamma({\n  BigNumber,\n  Complex,\n  config,\n  multiplyScalar,\n  pow,\n  typed\n});\nexport var gravitationConstant = /* #__PURE__ */createGravitationConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var hartreeEnergy = /* #__PURE__ */createHartreeEnergy({\n  BigNumber,\n  Unit,\n  config\n});\nexport var klitzing = /* #__PURE__ */createKlitzing({\n  BigNumber,\n  Unit,\n  config\n});\nexport var loschmidt = /* #__PURE__ */createLoschmidt({\n  BigNumber,\n  Unit,\n  config\n});\nexport var magneticConstant = /* #__PURE__ */createMagneticConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMass = /* #__PURE__ */createMolarMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarPlanckConstant = /* #__PURE__ */createMolarPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var neutronMass = /* #__PURE__ */createNeutronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var nuclearMagneton = /* #__PURE__ */createNuclearMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckCharge = /* #__PURE__ */createPlanckCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckLength = /* #__PURE__ */createPlanckLength({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckTemperature = /* #__PURE__ */createPlanckTemperature({\n  BigNumber,\n  Unit,\n  config\n});\nexport var protonMass = /* #__PURE__ */createProtonMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var reducedPlanckConstant = /* #__PURE__ */createReducedPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var rydberg = /* #__PURE__ */createRydberg({\n  BigNumber,\n  Unit,\n  config\n});\nexport var secondRadiation = /* #__PURE__ */createSecondRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setSymDifference = /* #__PURE__ */createSetSymDifference({\n  Index,\n  concat,\n  setDifference,\n  size,\n  subset,\n  typed\n});\nexport var speedOfLight = /* #__PURE__ */createSpeedOfLight({\n  BigNumber,\n  Unit,\n  config\n});\nexport var stefanBoltzmann = /* #__PURE__ */createStefanBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var thomsonCrossSection = /* #__PURE__ */createThomsonCrossSection({\n  BigNumber,\n  Unit,\n  config\n});\nexport var avogadro = /* #__PURE__ */createAvogadro({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrRadius = /* #__PURE__ */createBohrRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var coulomb = /* #__PURE__ */createCoulomb({\n  BigNumber,\n  Unit,\n  config\n});\nexport var divide = /* #__PURE__ */createDivide({\n  divideScalar,\n  equalScalar,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var electronMass = /* #__PURE__ */createElectronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var factorial = /* #__PURE__ */createFactorial({\n  gamma,\n  typed\n});\nexport var gravity = /* #__PURE__ */createGravity({\n  BigNumber,\n  Unit,\n  config\n});\nexport var inverseConductanceQuantum = /* #__PURE__ */createInverseConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lup = /* #__PURE__ */createLup({\n  DenseMatrix,\n  Spa,\n  SparseMatrix,\n  abs,\n  addScalar,\n  divideScalar,\n  equalScalar,\n  larger,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var magneticFluxQuantum = /* #__PURE__ */createMagneticFluxQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMassC12 = /* #__PURE__ */createMolarMassC12({\n  BigNumber,\n  Unit,\n  config\n});\nexport var multinomial = /* #__PURE__ */createMultinomial({\n  add,\n  divide,\n  factorial,\n  isInteger,\n  isPositive,\n  multiply,\n  typed\n});\nexport var permutations = /* #__PURE__ */createPermutations({\n  factorial,\n  typed\n});\nexport var planckMass = /* #__PURE__ */createPlanckMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var polynomialRoot = /* #__PURE__ */createPolynomialRoot({\n  add,\n  cbrt,\n  divide,\n  equalScalar,\n  im,\n  isZero,\n  multiply,\n  re,\n  sqrt,\n  subtract,\n  typeOf,\n  typed,\n  unaryMinus\n});\nexport var setIntersect = /* #__PURE__ */createSetIntersect({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var stirlingS2 = /* #__PURE__ */createStirlingS2({\n  bignumber,\n  addScalar,\n  combinations,\n  divideScalar,\n  factorial,\n  isInteger,\n  isNegative,\n  larger,\n  multiplyScalar,\n  number,\n  pow,\n  subtract,\n  typed\n});\nexport var unit = /* #__PURE__ */createUnitFunction({\n  Unit,\n  typed\n});\nexport var bellNumbers = /* #__PURE__ */createBellNumbers({\n  addScalar,\n  isInteger,\n  isNegative,\n  stirlingS2,\n  typed\n});\nexport var eigs = /* #__PURE__ */createEigs({\n  abs,\n  add,\n  addScalar,\n  atan,\n  bignumber,\n  column,\n  complex,\n  config,\n  cos,\n  diag,\n  divideScalar,\n  dot,\n  equal,\n  flatten,\n  im,\n  inv,\n  larger,\n  matrix,\n  matrixFromColumns,\n  multiply,\n  multiplyScalar,\n  number,\n  qr,\n  re,\n  sin,\n  smaller,\n  sqrt,\n  subtract,\n  typed,\n  usolve,\n  usolveAll\n});\nexport var fermiCoupling = /* #__PURE__ */createFermiCoupling({\n  BigNumber,\n  Unit,\n  config\n});\nexport var mean = /* #__PURE__ */createMean({\n  add,\n  divide,\n  typed\n});\nexport var molarVolume = /* #__PURE__ */createMolarVolume({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckConstant = /* #__PURE__ */createPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var quantumOfCirculation = /* #__PURE__ */createQuantumOfCirculation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setUnion = /* #__PURE__ */createSetUnion({\n  Index,\n  concat,\n  setIntersect,\n  setSymDifference,\n  size,\n  subset,\n  typed\n});\nexport var variance = /* #__PURE__ */createVariance({\n  add,\n  apply,\n  divide,\n  isNaN,\n  multiply,\n  subtract,\n  typed\n});\nexport var classicalElectronRadius = /* #__PURE__ */createClassicalElectronRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lusolve = /* #__PURE__ */createLusolve({\n  DenseMatrix,\n  lsolve,\n  lup,\n  matrix,\n  slu,\n  typed,\n  usolve\n});\nexport var median = /* #__PURE__ */createMedian({\n  add,\n  compare,\n  divide,\n  partitionSelect,\n  typed\n});\nexport var kldivergence = /* #__PURE__ */createKldivergence({\n  divide,\n  dotDivide,\n  isNumeric,\n  log,\n  map,\n  matrix,\n  multiply,\n  sum,\n  typed\n});\nexport var mad = /* #__PURE__ */createMad({\n  abs,\n  map,\n  median,\n  subtract,\n  typed\n});\nexport var std = /* #__PURE__ */createStd({\n  map,\n  sqrt,\n  typed,\n  variance\n});\nexport var gasConstant = /* #__PURE__ */createGasConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var norm = /* #__PURE__ */createNorm({\n  abs,\n  add,\n  conj,\n  ctranspose,\n  eigs,\n  equalScalar,\n  larger,\n  matrix,\n  multiply,\n  pow,\n  smaller,\n  sqrt,\n  typed\n});\nexport var rotationMatrix = /* #__PURE__ */createRotationMatrix({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  config,\n  cos,\n  matrix,\n  multiplyScalar,\n  norm,\n  sin,\n  typed,\n  unaryMinus\n});\nexport var planckTime = /* #__PURE__ */createPlanckTime({\n  BigNumber,\n  Unit,\n  config\n});\nexport var schur = /* #__PURE__ */createSchur({\n  identity,\n  matrix,\n  multiply,\n  norm,\n  qr,\n  subtract,\n  typed\n});\nexport var rotate = /* #__PURE__ */createRotate({\n  multiply,\n  rotationMatrix,\n  typed\n});\nexport var sylvester = /* #__PURE__ */createSylvester({\n  abs,\n  add,\n  concat,\n  identity,\n  index,\n  lusolve,\n  matrix,\n  matrixFromColumns,\n  multiply,\n  range,\n  schur,\n  subset,\n  subtract,\n  transpose,\n  typed\n});\nexport var lyap = /* #__PURE__ */createLyap({\n  matrix,\n  multiply,\n  sylvester,\n  transpose,\n  typed\n});","export { createTyped } from './core/function/typed.js';\nexport { createResultSet } from './type/resultset/ResultSet.js';\nexport { createBigNumberClass } from './type/bignumber/BigNumber.js';\nexport { createComplexClass } from './type/complex/Complex.js';\nexport { createFractionClass } from './type/fraction/Fraction.js';\nexport { createRangeClass } from './type/matrix/Range.js';\nexport { createMatrixClass } from './type/matrix/Matrix.js';\nexport { createDenseMatrixClass } from './type/matrix/DenseMatrix.js';\nexport { createClone } from './function/utils/clone.js';\nexport { createIsInteger } from './function/utils/isInteger.js';\nexport { createIsNegative } from './function/utils/isNegative.js';\nexport { createIsNumeric } from './function/utils/isNumeric.js';\nexport { createHasNumericValue } from './function/utils/hasNumericValue.js';\nexport { createIsPositive } from './function/utils/isPositive.js';\nexport { createIsZero } from './function/utils/isZero.js';\nexport { createIsNaN } from './function/utils/isNaN.js';\nexport { createTypeOf } from './function/utils/typeOf.js';\nexport { createEqualScalar } from './function/relational/equalScalar.js';\nexport { createSparseMatrixClass } from './type/matrix/SparseMatrix.js';\nexport { createNumber } from './type/number.js';\nexport { createString } from './type/string.js';\nexport { createBoolean } from './type/boolean.js';\nexport { createBignumber } from './type/bignumber/function/bignumber.js';\nexport { createComplex } from './type/complex/function/complex.js';\nexport { createFraction } from './type/fraction/function/fraction.js';\nexport { createMatrix } from './type/matrix/function/matrix.js';\nexport { createMatrixFromFunction } from './function/matrix/matrixFromFunction.js';\nexport { createMatrixFromRows } from './function/matrix/matrixFromRows.js';\nexport { createMatrixFromColumns } from './function/matrix/matrixFromColumns.js';\nexport { createSplitUnit } from './type/unit/function/splitUnit.js';\nexport { createUnaryMinus } from './function/arithmetic/unaryMinus.js';\nexport { createUnaryPlus } from './function/arithmetic/unaryPlus.js';\nexport { createAbs } from './function/arithmetic/abs.js';\nexport { createApply } from './function/matrix/apply.js';\nexport { createAddScalar } from './function/arithmetic/addScalar.js';\nexport { createCbrt } from './function/arithmetic/cbrt.js';\nexport { createCeil } from './function/arithmetic/ceil.js';\nexport { createCube } from './function/arithmetic/cube.js';\nexport { createExp } from './function/arithmetic/exp.js';\nexport { createExpm1 } from './function/arithmetic/expm1.js';\nexport { createFix } from './function/arithmetic/fix.js';\nexport { createFloor } from './function/arithmetic/floor.js';\nexport { createGcd } from './function/arithmetic/gcd.js';\nexport { createLcm } from './function/arithmetic/lcm.js';\nexport { createLog10 } from './function/arithmetic/log10.js';\nexport { createLog2 } from './function/arithmetic/log2.js';\nexport { createMod } from './function/arithmetic/mod.js';\nexport { createMultiplyScalar } from './function/arithmetic/multiplyScalar.js';\nexport { createMultiply } from './function/arithmetic/multiply.js';\nexport { createNthRoot } from './function/arithmetic/nthRoot.js';\nexport { createSign } from './function/arithmetic/sign.js';\nexport { createSqrt } from './function/arithmetic/sqrt.js';\nexport { createSquare } from './function/arithmetic/square.js';\nexport { createSubtract } from './function/arithmetic/subtract.js';\nexport { createXgcd } from './function/arithmetic/xgcd.js';\nexport { createInvmod } from './function/arithmetic/invmod.js';\nexport { createDotMultiply } from './function/arithmetic/dotMultiply.js';\nexport { createBitAnd } from './function/bitwise/bitAnd.js';\nexport { createBitNot } from './function/bitwise/bitNot.js';\nexport { createBitOr } from './function/bitwise/bitOr.js';\nexport { createBitXor } from './function/bitwise/bitXor.js';\nexport { createArg } from './function/complex/arg.js';\nexport { createConj } from './function/complex/conj.js';\nexport { createIm } from './function/complex/im.js';\nexport { createRe } from './function/complex/re.js';\nexport { createNot } from './function/logical/not.js';\nexport { createOr } from './function/logical/or.js';\nexport { createXor } from './function/logical/xor.js';\nexport { createConcat } from './function/matrix/concat.js';\nexport { createColumn } from './function/matrix/column.js';\nexport { createCount } from './function/matrix/count.js';\nexport { createCross } from './function/matrix/cross.js';\nexport { createDiag } from './function/matrix/diag.js';\nexport { createFilter } from './function/matrix/filter.js';\nexport { createFlatten } from './function/matrix/flatten.js';\nexport { createForEach } from './function/matrix/forEach.js';\nexport { createGetMatrixDataType } from './function/matrix/getMatrixDataType.js';\nexport { createIdentity } from './function/matrix/identity.js';\nexport { createKron } from './function/matrix/kron.js';\nexport { createMap } from './function/matrix/map.js';\nexport { createDiff } from './function/matrix/diff.js';\nexport { createOnes } from './function/matrix/ones.js';\nexport { createRange } from './function/matrix/range.js';\nexport { createReshape } from './function/matrix/reshape.js';\nexport { createResize } from './function/matrix/resize.js';\nexport { createRotate } from './function/matrix/rotate.js';\nexport { createRotationMatrix } from './function/matrix/rotationMatrix.js';\nexport { createRow } from './function/matrix/row.js';\nexport { createSize } from './function/matrix/size.js';\nexport { createSqueeze } from './function/matrix/squeeze.js';\nexport { createSubset } from './function/matrix/subset.js';\nexport { createTranspose } from './function/matrix/transpose.js';\nexport { createCtranspose } from './function/matrix/ctranspose.js';\nexport { createZeros } from './function/matrix/zeros.js';\nexport { createFft } from './function/matrix/fft.js';\nexport { createIfft } from './function/matrix/ifft.js';\nexport { createErf } from './function/special/erf.js';\nexport { createMode } from './function/statistics/mode.js';\nexport { createProd } from './function/statistics/prod.js';\nexport { createFormat } from './function/string/format.js';\nexport { createBin } from './function/string/bin.js';\nexport { createOct } from './function/string/oct.js';\nexport { createHex } from './function/string/hex.js';\nexport { createPrint } from './function/string/print.js';\nexport { createTo } from './function/unit/to.js';\nexport { createIsPrime } from './function/utils/isPrime.js';\nexport { createNumeric } from './function/utils/numeric.js';\nexport { createDivideScalar } from './function/arithmetic/divideScalar.js';\nexport { createPow } from './function/arithmetic/pow.js';\nexport { createRound } from './function/arithmetic/round.js';\nexport { createLog } from './function/arithmetic/log.js';\nexport { createLog1p } from './function/arithmetic/log1p.js';\nexport { createNthRoots } from './function/arithmetic/nthRoots.js';\nexport { createDotPow } from './function/arithmetic/dotPow.js';\nexport { createDotDivide } from './function/arithmetic/dotDivide.js';\nexport { createLsolve } from './function/algebra/solver/lsolve.js';\nexport { createUsolve } from './function/algebra/solver/usolve.js';\nexport { createLsolveAll } from './function/algebra/solver/lsolveAll.js';\nexport { createUsolveAll } from './function/algebra/solver/usolveAll.js';\nexport { createLeftShift } from './function/bitwise/leftShift.js';\nexport { createRightArithShift } from './function/bitwise/rightArithShift.js';\nexport { createRightLogShift } from './function/bitwise/rightLogShift.js';\nexport { createAnd } from './function/logical/and.js';\nexport { createCompare } from './function/relational/compare.js';\nexport { createCompareNatural } from './function/relational/compareNatural.js';\nexport { createCompareText } from './function/relational/compareText.js';\nexport { createEqual } from './function/relational/equal.js';\nexport { createEqualText } from './function/relational/equalText.js';\nexport { createSmaller } from './function/relational/smaller.js';\nexport { createSmallerEq } from './function/relational/smallerEq.js';\nexport { createLarger } from './function/relational/larger.js';\nexport { createLargerEq } from './function/relational/largerEq.js';\nexport { createDeepEqual } from './function/relational/deepEqual.js';\nexport { createUnequal } from './function/relational/unequal.js';\nexport { createPartitionSelect } from './function/matrix/partitionSelect.js';\nexport { createSort } from './function/matrix/sort.js';\nexport { createMax } from './function/statistics/max.js';\nexport { createMin } from './function/statistics/min.js';\nexport { createImmutableDenseMatrixClass } from './type/matrix/ImmutableDenseMatrix.js';\nexport { createIndexClass } from './type/matrix/MatrixIndex.js';\nexport { createFibonacciHeapClass } from './type/matrix/FibonacciHeap.js';\nexport { createSpaClass } from './type/matrix/Spa.js';\nexport { createUnitClass } from './type/unit/Unit.js';\nexport { createUnitFunction } from './type/unit/function/unit.js';\nexport { createSparse } from './type/matrix/function/sparse.js';\nexport { createCreateUnit } from './type/unit/function/createUnit.js';\nexport { createAcos } from './function/trigonometry/acos.js';\nexport { createAcosh } from './function/trigonometry/acosh.js';\nexport { createAcot } from './function/trigonometry/acot.js';\nexport { createAcoth } from './function/trigonometry/acoth.js';\nexport { createAcsc } from './function/trigonometry/acsc.js';\nexport { createAcsch } from './function/trigonometry/acsch.js';\nexport { createAsec } from './function/trigonometry/asec.js';\nexport { createAsech } from './function/trigonometry/asech.js';\nexport { createAsin } from './function/trigonometry/asin.js';\nexport { createAsinh } from './function/trigonometry/asinh.js';\nexport { createAtan } from './function/trigonometry/atan.js';\nexport { createAtan2 } from './function/trigonometry/atan2.js';\nexport { createAtanh } from './function/trigonometry/atanh.js';\nexport { createCos } from './function/trigonometry/cos.js';\nexport { createCosh } from './function/trigonometry/cosh.js';\nexport { createCot } from './function/trigonometry/cot.js';\nexport { createCoth } from './function/trigonometry/coth.js';\nexport { createCsc } from './function/trigonometry/csc.js';\nexport { createCsch } from './function/trigonometry/csch.js';\nexport { createSec } from './function/trigonometry/sec.js';\nexport { createSech } from './function/trigonometry/sech.js';\nexport { createSin } from './function/trigonometry/sin.js';\nexport { createSinh } from './function/trigonometry/sinh.js';\nexport { createTan } from './function/trigonometry/tan.js';\nexport { createTanh } from './function/trigonometry/tanh.js';\nexport { createSetCartesian } from './function/set/setCartesian.js';\nexport { createSetDifference } from './function/set/setDifference.js';\nexport { createSetDistinct } from './function/set/setDistinct.js';\nexport { createSetIntersect } from './function/set/setIntersect.js';\nexport { createSetIsSubset } from './function/set/setIsSubset.js';\nexport { createSetMultiplicity } from './function/set/setMultiplicity.js';\nexport { createSetPowerset } from './function/set/setPowerset.js';\nexport { createSetSize } from './function/set/setSize.js';\nexport { createSetSymDifference } from './function/set/setSymDifference.js';\nexport { createSetUnion } from './function/set/setUnion.js';\nexport { createAdd } from './function/arithmetic/add.js';\nexport { createHypot } from './function/arithmetic/hypot.js';\nexport { createNorm } from './function/arithmetic/norm.js';\nexport { createDot } from './function/matrix/dot.js';\nexport { createTrace } from './function/matrix/trace.js';\nexport { createIndex } from './type/matrix/function/index.js';\nexport { createNode } from './expression/node/Node.js';\nexport { createAccessorNode } from './expression/node/AccessorNode.js';\nexport { createArrayNode } from './expression/node/ArrayNode.js';\nexport { createAssignmentNode } from './expression/node/AssignmentNode.js';\nexport { createBlockNode } from './expression/node/BlockNode.js';\nexport { createConditionalNode } from './expression/node/ConditionalNode.js';\nexport { createConstantNode } from './expression/node/ConstantNode.js';\nexport { createFunctionAssignmentNode } from './expression/node/FunctionAssignmentNode.js';\nexport { createIndexNode } from './expression/node/IndexNode.js';\nexport { createObjectNode } from './expression/node/ObjectNode.js';\nexport { createOperatorNode } from './expression/node/OperatorNode.js';\nexport { createParenthesisNode } from './expression/node/ParenthesisNode.js';\nexport { createRangeNode } from './expression/node/RangeNode.js';\nexport { createRelationalNode } from './expression/node/RelationalNode.js';\nexport { createSymbolNode } from './expression/node/SymbolNode.js';\nexport { createFunctionNode } from './expression/node/FunctionNode.js';\nexport { createParse } from './expression/parse.js';\nexport { createCompile } from './expression/function/compile.js';\nexport { createEvaluate } from './expression/function/evaluate.js';\nexport { createParserClass } from './expression/Parser.js';\nexport { createParser } from './expression/function/parser.js';\nexport { createLup } from './function/algebra/decomposition/lup.js';\nexport { createQr } from './function/algebra/decomposition/qr.js';\nexport { createSlu } from './function/algebra/decomposition/slu.js';\nexport { createLusolve } from './function/algebra/solver/lusolve.js';\nexport { createPolynomialRoot } from './function/algebra/polynomialRoot.js';\nexport { createHelpClass } from './expression/Help.js';\nexport { createChainClass } from './type/chain/Chain.js';\nexport { createHelp } from './expression/function/help.js';\nexport { createChain } from './type/chain/function/chain.js';\nexport { createDet } from './function/matrix/det.js';\nexport { createInv } from './function/matrix/inv.js';\nexport { createPinv } from './function/matrix/pinv.js';\nexport { createEigs } from './function/matrix/eigs.js';\nexport { createExpm } from './function/matrix/expm.js';\nexport { createSqrtm } from './function/matrix/sqrtm.js';\nexport { createSylvester } from './function/algebra/sylvester.js';\nexport { createSchur } from './function/algebra/decomposition/schur.js';\nexport { createLyap } from './function/algebra/lyap.js';\nexport { createDivide } from './function/arithmetic/divide.js';\nexport { createDistance } from './function/geometry/distance.js';\nexport { createIntersect } from './function/geometry/intersect.js';\nexport { createSum } from './function/statistics/sum.js';\nexport { createCumSum } from './function/statistics/cumsum.js';\nexport { createMean } from './function/statistics/mean.js';\nexport { createMedian } from './function/statistics/median.js';\nexport { createMad } from './function/statistics/mad.js';\nexport { createVariance } from './function/statistics/variance.js';\nexport { createQuantileSeq } from './function/statistics/quantileSeq.js';\nexport { createStd } from './function/statistics/std.js';\nexport { createCombinations } from './function/probability/combinations.js';\nexport { createCombinationsWithRep } from './function/probability/combinationsWithRep.js';\nexport { createGamma } from './function/probability/gamma.js';\nexport { createLgamma } from './function/probability/lgamma.js';\nexport { createFactorial } from './function/probability/factorial.js';\nexport { createKldivergence } from './function/probability/kldivergence.js';\nexport { createMultinomial } from './function/probability/multinomial.js';\nexport { createPermutations } from './function/probability/permutations.js';\nexport { createPickRandom } from './function/probability/pickRandom.js';\nexport { createRandom } from './function/probability/random.js';\nexport { createRandomInt } from './function/probability/randomInt.js';\nexport { createStirlingS2 } from './function/combinatorics/stirlingS2.js';\nexport { createBellNumbers } from './function/combinatorics/bellNumbers.js';\nexport { createCatalan } from './function/combinatorics/catalan.js';\nexport { createComposition } from './function/combinatorics/composition.js';\nexport { createLeafCount } from './function/algebra/leafCount.js';\nexport { createSimplify } from './function/algebra/simplify.js';\nexport { createSimplifyConstant } from './function/algebra/simplifyConstant.js';\nexport { createSimplifyCore } from './function/algebra/simplifyCore.js';\nexport { createResolve } from './function/algebra/resolve.js';\nexport { createSymbolicEqual } from './function/algebra/symbolicEqual.js';\nexport { createDerivative } from './function/algebra/derivative.js';\nexport { createRationalize } from './function/algebra/rationalize.js';\nexport { createReviver } from './json/reviver.js';\nexport { createReplacer } from './json/replacer.js';\nexport { createE, createUppercaseE, createFalse, createI, createInfinity, createLN10, createLN2, createLOG10E, createLOG2E, createNaN, createNull, createPhi, createPi, createUppercasePi, createSQRT1_2,\n// eslint-disable-line camelcase\ncreateSQRT2, createTau, createTrue, createVersion } from './constants.js';\nexport { createAtomicMass, createAvogadro, createBohrMagneton, createBohrRadius, createBoltzmann, createClassicalElectronRadius, createConductanceQuantum, createCoulomb, createDeuteronMass, createEfimovFactor, createElectricConstant, createElectronMass, createElementaryCharge, createFaraday, createFermiCoupling, createFineStructure, createFirstRadiation, createGasConstant, createGravitationConstant, createGravity, createHartreeEnergy, createInverseConductanceQuantum, createKlitzing, createLoschmidt, createMagneticConstant, createMagneticFluxQuantum, createMolarMass, createMolarMassC12, createMolarPlanckConstant, createMolarVolume, createNeutronMass, createNuclearMagneton, createPlanckCharge, createPlanckConstant, createPlanckLength, createPlanckMass, createPlanckTemperature, createPlanckTime, createProtonMass, createQuantumOfCirculation, createReducedPlanckConstant, createRydberg, createSackurTetrode, createSecondRadiation, createSpeedOfLight, createStefanBoltzmann, createThomsonCrossSection, createVacuumImpedance, createWeakMixingAngle, createWienDisplacement } from './type/unit/physicalConstants.js';\nexport { createApplyTransform } from './expression/transform/apply.transform.js';\nexport { createColumnTransform } from './expression/transform/column.transform.js';\nexport { createFilterTransform } from './expression/transform/filter.transform.js';\nexport { createForEachTransform } from './expression/transform/forEach.transform.js';\nexport { createIndexTransform } from './expression/transform/index.transform.js';\nexport { createMapTransform } from './expression/transform/map.transform.js';\nexport { createMaxTransform } from './expression/transform/max.transform.js';\nexport { createMeanTransform } from './expression/transform/mean.transform.js';\nexport { createMinTransform } from './expression/transform/min.transform.js';\nexport { createRangeTransform } from './expression/transform/range.transform.js';\nexport { createRowTransform } from './expression/transform/row.transform.js';\nexport { createSubsetTransform } from './expression/transform/subset.transform.js';\nexport { createConcatTransform } from './expression/transform/concat.transform.js';\nexport { createDiffTransform } from './expression/transform/diff.transform.js';\nexport { createStdTransform } from './expression/transform/std.transform.js';\nexport { createSumTransform } from './expression/transform/sum.transform.js';\nexport { createCumSumTransform } from './expression/transform/cumsum.transform.js';\nexport { createVarianceTransform } from './expression/transform/variance.transform.js';","/**\n * Create a typed-function which checks the types of the arguments and\n * can match them against multiple provided signatures. The typed-function\n * automatically converts inputs in order to find a matching signature.\n * Typed functions throw informative errors in case of wrong input arguments.\n *\n * See the library [typed-function](https://github.com/josdejong/typed-function)\n * for detailed documentation.\n *\n * Syntax:\n *\n *     math.typed(name, signatures) : function\n *     math.typed(signatures) : function\n *\n * Examples:\n *\n *     // create a typed function with multiple types per argument (type union)\n *     const fn2 = typed({\n *       'number | boolean': function (b) {\n *         return 'b is a number or boolean'\n *       },\n *       'string, number | boolean': function (a, b) {\n *         return 'a is a string, b is a number or boolean'\n *       }\n *     })\n *\n *     // create a typed function with an any type argument\n *     const log = typed({\n *       'string, any': function (event, data) {\n *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))\n *       }\n *     })\n *\n * @param {string} [name]                          Optional name for the typed-function\n * @param {Object<string, function>} signatures   Object with one or multiple function signatures\n * @returns {function} The created typed-function.\n */\n\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRelationalNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../../utils/is.js';\nimport typedFunction from 'typed-function';\nimport { digits } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMap } from '../../utils/map.js';\n\n// returns a new instance of typed-function\nvar _createTyped2 = function _createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped2 = typedFunction.create;\n  return typedFunction;\n};\nvar dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];\n\n/**\n * Factory function for creating a new typed instance\n * @param {Object} dependencies   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\nexport var createTyped = /* #__PURE__ */factory('typed', dependencies, function createTyped(_ref) {\n  var {\n    BigNumber,\n    Complex,\n    DenseMatrix,\n    Fraction\n  } = _ref;\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n\n  // get a new instance of typed-function\n  var typed = _createTyped2();\n\n  // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n  typed.clear();\n  typed.addTypes([{\n    name: 'number',\n    test: isNumber\n  }, {\n    name: 'Complex',\n    test: isComplex\n  }, {\n    name: 'BigNumber',\n    test: isBigNumber\n  }, {\n    name: 'Fraction',\n    test: isFraction\n  }, {\n    name: 'Unit',\n    test: isUnit\n  },\n  // The following type matches a valid variable name, i.e., an alphanumeric\n  // string starting with an alphabetic character. It is used (at least)\n  // in the definition of the derivative() function, as the argument telling\n  // what to differentiate over must (currently) be a variable.\n  {\n    name: 'identifier',\n    test: s => isString && /^(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])*$/.test(s)\n  }, {\n    name: 'string',\n    test: isString\n  }, {\n    name: 'Chain',\n    test: isChain\n  }, {\n    name: 'Array',\n    test: isArray\n  }, {\n    name: 'Matrix',\n    test: isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: isSparseMatrix\n  }, {\n    name: 'Range',\n    test: isRange\n  }, {\n    name: 'Index',\n    test: isIndex\n  }, {\n    name: 'boolean',\n    test: isBoolean\n  }, {\n    name: 'ResultSet',\n    test: isResultSet\n  }, {\n    name: 'Help',\n    test: isHelp\n  }, {\n    name: 'function',\n    test: isFunction\n  }, {\n    name: 'Date',\n    test: isDate\n  }, {\n    name: 'RegExp',\n    test: isRegExp\n  }, {\n    name: 'null',\n    test: isNull\n  }, {\n    name: 'undefined',\n    test: isUndefined\n  }, {\n    name: 'AccessorNode',\n    test: isAccessorNode\n  }, {\n    name: 'ArrayNode',\n    test: isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: isConditionalNode\n  }, {\n    name: 'ConstantNode',\n    test: isConstantNode\n  }, {\n    name: 'FunctionNode',\n    test: isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: isFunctionAssignmentNode\n  }, {\n    name: 'IndexNode',\n    test: isIndexNode\n  }, {\n    name: 'Node',\n    test: isNode\n  }, {\n    name: 'ObjectNode',\n    test: isObjectNode\n  }, {\n    name: 'OperatorNode',\n    test: isOperatorNode\n  }, {\n    name: 'ParenthesisNode',\n    test: isParenthesisNode\n  }, {\n    name: 'RangeNode',\n    test: isRangeNode\n  }, {\n    name: 'RelationalNode',\n    test: isRelationalNode\n  }, {\n    name: 'SymbolNode',\n    test: isSymbolNode\n  }, {\n    name: 'Map',\n    test: isMap\n  }, {\n    name: 'Object',\n    test: isObject\n  } // order 'Object' last, it matches on other classes too\n  ]);\n\n  typed.addConversions([{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      // note: conversion from number to BigNumber can fail if x has >15 digits\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n      return new BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x, 0);\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      var f = new Fraction(x);\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n      return f;\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n      try {\n        return new BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      try {\n        return new Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      try {\n        return new Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n      return new BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      return new Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return String(x);\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      if (!DenseMatrix) {\n        throwNoMatrix();\n      }\n      return new DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }]);\n\n  // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&\n    // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n    throw usualError;\n  };\n\n  // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&\n    // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n    throw usualError;\n  };\n  return typed;\n});\nfunction throwNoBignumber(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a BigNumber: no class 'BigNumber' provided\"));\n}\nfunction throwNoComplex(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Complex number: no class 'Complex' provided\"));\n}\nfunction throwNoMatrix() {\n  throw new Error('Cannot convert array into a Matrix: no class \\'DenseMatrix\\' provided');\n}\nfunction throwNoFraction(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Fraction, no class 'Fraction' provided.\"));\n}",null,"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nvar NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n  }\n\n  var _types = [{\n    name: 'number',\n    test: function test(x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function test(x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function test(x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function test(x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function test(x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function test(x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function test(x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function test(x) {\n      return x === undefined;\n    }\n  }];\n  var anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  var typeMap; // primary store of all types\n\n  var typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  var nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  var typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    var type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    var message = 'Unknown type \"' + typeName + '\"';\n    var name = typeName.toLowerCase();\n    var otherName;\n\n    var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        otherName = _step.value;\n\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    var newTypes = [];\n\n    for (var i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      var typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    var affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n      typeMap.get(typeList[_i]).index = _i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    var typeName;\n\n    var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        typeName = _step2.value;\n        typeMap.get(typeName).conversionsTo = [];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    var matches = typeList.filter(function (name) {\n      var type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    var exact = options && options.exact;\n    var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    var params = parseSignature(stringSignature);\n    var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    var nParams = params.length;\n    var remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      var name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (var i = 0; i < nParams; ++i) {\n      var want = params[i];\n      var filteredSignatures = [];\n      var possibility = void 0;\n\n      var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          possibility = _step3.value;\n          var have = getParamAtIndex(possibility.params, i);\n\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n\n          if (!have.hasAny) {\n            var _ret = function () {\n              // have to check all of the wanted types are available\n              var haveTypes = paramTypeSet(have);\n\n              if (want.types.some(function (wtype) {\n                return !haveTypes.has(wtype.name);\n              })) {\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          } // OK, this looks good\n\n\n          filteredSignatures.push(possibility);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    var candidate;\n\n    var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        candidate = _step4.value;\n\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    var type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    var conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (var i = 0; i < conversions.length; i++) {\n      var fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(function (p) {\n      return p.name;\n    }).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    var restParam = param.indexOf('...') === 0;\n    var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    var typeDefs = types.split('|').map(function (s) {\n      return findType(s.trim());\n    });\n    var hasAny = false;\n    var paramName = restParam ? '...' : '';\n    var exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny: hasAny,\n      hasConversion: false,\n      restParam: restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    var typeNames = param.types.map(function (t) {\n      return t.name;\n    });\n    var matchingConversions = availableConversions(typeNames);\n    var hasAny = param.hasAny;\n    var newName = param.name;\n    var convertibleTypes = matchingConversions.map(function (conversion) {\n      var type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny: hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(function (type) {\n        return param.typeSet.add(type.name);\n      });\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    var params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    var signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    var rawParams = signature.split(',');\n\n    for (var i = 0; i < rawParams.length; ++i) {\n      var parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    var param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      var test0 = findType(param.types[0].name).test;\n      var test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      var tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (var i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    var tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      var varIndex = tests.length;\n      var lastTest = compileTest(last(params));\n\n      var testRestParam = function testRestParam(args) {\n        for (var i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (var i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    var param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    var typeSet = new Set();\n    signatures.forEach(function (signature) {\n      var paramSet = getTypeSetAtIndex(signature.params, index);\n      var name;\n\n      var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          name = _step5.value;\n          typeSet.add(name);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    var err, expected;\n\n    var _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    var matchingSignatures = signatures;\n    var index;\n\n    var _loop = function _loop() {\n      var nextMatchingDefs = [];\n      matchingSignatures.forEach(function (signature) {\n        var param = getParamAtIndex(signature.params, index);\n        var test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          var actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index: index,\n            actual: actualTypes,\n            expected: expected\n          };\n          return {\n            v: err\n          };\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    };\n\n    for (index = 0; index < args.length; index++) {\n      var _ret2 = _loop();\n\n      if (_typeof(_ret2) === \"object\") return _ret2.v;\n    } // test for too few arguments\n\n\n    var lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected: expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    var maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    var argTypes = [];\n\n    for (var i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    var min = typeList.length + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    var min = nConversions + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    var pars1 = signature1.params;\n    var pars2 = signature2.params;\n    var last1 = last(pars1);\n    var last2 = last(pars2);\n    var hasRest1 = hasRestParam(pars1);\n    var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    var any1 = 0;\n    var conv1 = 0;\n    var par;\n\n    var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        par = _step6.value;\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var any2 = 0;\n    var conv2 = 0;\n\n    var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        par = _step7.value;\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    var comparisons = [];\n    var tc = 0;\n\n    for (var i = 0; i < pars1.length; ++i) {\n      var thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    var c;\n\n    for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n      c = _comparisons[_i2];\n\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    var types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort(function (t1, t2) {\n        return t1.index - t2.index;\n      });\n    }\n\n    var matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    var knownTypes = new Set(typeNames);\n\n    for (var i = 1; i < types.length; ++i) {\n      var newMatch = void 0;\n\n      var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          newMatch = _step8.value;\n\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(function (p) {\n      return p.hasConversion;\n    })) {\n      var restParam = hasRestParam(params);\n      var compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        var args = [];\n        var last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (var i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    var fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      var offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    var test0, test1, conversion0, conversion1;\n    var tests = [];\n    var conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (var i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        var param = params[index];\n        var resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          var exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(function (t) {\n                return t.name;\n              }).join('|'),\n              hasAny: exactTypes.some(function (t) {\n                return t.isAny;\n              }),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    var ii = Math.max(params1.length, params2.length);\n\n    for (var i = 0; i < ii; i++) {\n      var typeSet1 = getTypeSetAtIndex(params1, i);\n      var typeSet2 = getTypeSetAtIndex(params2, i);\n      var overlap = false;\n      var name = void 0;\n\n      var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          name = _step9.value;\n\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    var len1 = params1.length;\n    var len2 = params2.length;\n    var restParam1 = hasRestParam(params1);\n    var restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(function (fn) {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    var resolvedReferences = [];\n    var reference;\n\n    var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        reference = _step10.value;\n        var resolution = signatureMap[reference];\n\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n\n        resolution = functionList[resolution];\n\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n\n        resolvedReferences.push(resolution);\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    var resolvedFunctions = clearResolutions(functionList);\n    var isResolved = new Array(resolvedFunctions.length).fill(false);\n    var leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      var nothingResolved = true;\n\n      for (var i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        var fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(function (signature) {\n      var fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    var parsedParams = [];\n    var originalFunctions = [];\n    var signaturesMap = {};\n    var preliminarySignatures = []; // may have duplicates from conversions\n\n    var signature;\n\n    var _loop2 = function _loop2() {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        return \"continue\";\n      } // B) Parse the signature\n\n\n      var params = parseSignature(signature);\n      if (!params) return \"continue\"; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      var functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      var sp = void 0;\n\n      var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          sp = _step11.value;\n          var spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n\n          if (sp.every(function (p) {\n            return !p.hasConversion;\n          })) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n\n    for (signature in rawSignaturesMap) {\n      var _ret3 = _loop2();\n\n      if (_ret3 === \"continue\") continue;\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    var s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    var signatures = [];\n    var internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n      s = _preliminarySignature[_i3];\n\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (var i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n      signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n    }\n\n    var fn0 = ok0 ? signatures[0].implementation : undef;\n    var fn1 = ok1 ? signatures[1].implementation : undef;\n    var fn2 = ok2 ? signatures[2].implementation : undef;\n    var fn3 = ok3 ? signatures[3].implementation : undef;\n    var fn4 = ok4 ? signatures[4].implementation : undef;\n    var fn5 = ok5 ? signatures[5].implementation : undef;\n    var len0 = ok0 ? signatures[0].params.length : -1;\n    var len1 = ok1 ? signatures[1].params.length : -1;\n    var len2 = ok2 ? signatures[2].params.length : -1;\n    var len3 = ok3 ? signatures[3].params.length : -1;\n    var len4 = ok4 ? signatures[4].params.length : -1;\n    var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    var iStart = allOk ? 6 : 0;\n    var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    var tests = signatures.map(function (s) {\n      return s.test;\n    });\n    var fns = signatures.map(function (s) {\n      return s.implementation;\n    });\n\n    var generic = function generic() {\n      'use strict';\n\n      for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n        if (tests[_i5](arguments)) {\n          return fns[_i5].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures: signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (var i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    var references = initial(arguments).map(function (s) {\n      return stringifyParams(parseSignature(s));\n    });\n    var callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references: references,\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    var name;\n\n    for (var key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    var key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            var err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  var saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function typed(maybeName) {\n    var named = typeof maybeName === 'string';\n    var start = named ? 1 : 0;\n    var name = named ? maybeName : '';\n    var allSignatures = {};\n\n    for (var i = start; i < arguments.length; ++i) {\n      var item = arguments[i];\n      var theseSignatures = {};\n      var thisName = void 0;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    var before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n    var existingConversion = findInArray(to.conversionsTo, function (c) {\n      return c.from === conversion.from;\n    });\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    var index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    var sigs = tf._typedFunctionData.signatures;\n\n    for (var i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map","import { isNumber } from './is.js';\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n    if (n < 0) {\n      n = n + 2 ** size;\n    }\n    suffix = \"i\".concat(size);\n  }\n  var sign = '';\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign,\n    coefficients,\n    exponent\n  };\n}\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  }\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  }\n\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n  if (x === y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}","import { contains } from './array.js';\nimport { pickShallow } from './object.js';\n\n/**\n * Create a factory function, which can be used to inject dependencies.\n *\n * The created functions are memoized, a consecutive call of the factory\n * with the exact same inputs will return the same function instance.\n * The memoized cache is exposed on `factory.cache` and can be cleared\n * if needed.\n *\n * Example:\n *\n *     const name = 'log'\n *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']\n *\n *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {\n *       // ... create the function log here and return it\n *     }\n *\n * @param {string} name           Name of the function to be created\n * @param {string[]} dependencies The names of all required dependencies\n * @param {function} create       Callback function called with an object with all dependencies\n * @param {Object} [meta]         Optional object with meta information that will be attached\n *                                to the created factory function as property `meta`.\n * @returns {function}\n */\nexport function factory(name, dependencies, create, meta) {\n  function assertAndCreate(scope) {\n    // we only pass the requested dependencies to the factory function\n    // to prevent functions to rely on dependencies that are not explicitly\n    // requested.\n    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));\n    assertDependencies(name, dependencies, scope);\n    return create(deps);\n  }\n  assertAndCreate.isFactory = true;\n  assertAndCreate.fn = name;\n  assertAndCreate.dependencies = dependencies.slice().sort();\n  if (meta) {\n    assertAndCreate.meta = meta;\n  }\n  return assertAndCreate;\n}\n\n/**\n * Sort all factories such that when loading in order, the dependencies are resolved.\n *\n * @param {Array} factories\n * @returns {Array} Returns a new array with the sorted factories.\n */\nexport function sortFactories(factories) {\n  var factoriesByName = {};\n  factories.forEach(factory => {\n    factoriesByName[factory.fn] = factory;\n  });\n  function containsDependency(factory, dependency) {\n    // TODO: detect circular references\n    if (isFactory(factory)) {\n      if (contains(factory.dependencies, dependency.fn || dependency.name)) {\n        return true;\n      }\n      if (factory.dependencies.some(d => containsDependency(factoriesByName[d], dependency))) {\n        return true;\n      }\n    }\n    return false;\n  }\n  var sorted = [];\n  function addFactory(factory) {\n    var index = 0;\n    while (index < sorted.length && !containsDependency(sorted[index], factory)) {\n      index++;\n    }\n    sorted.splice(index, 0, factory);\n  }\n\n  // sort regular factory functions\n  factories.filter(isFactory).forEach(addFactory);\n\n  // sort legacy factory functions AFTER the regular factory functions\n  factories.filter(factory => !isFactory(factory)).forEach(addFactory);\n  return sorted;\n}\n\n// TODO: comment or cleanup if unused in the end\nexport function create(factories) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  sortFactories(factories).forEach(factory => factory(scope));\n  return scope;\n}\n\n/**\n * Test whether an object is a factory. This is the case when it has\n * properties name, dependencies, and a function create.\n * @param {*} obj\n * @returns {boolean}\n */\nexport function isFactory(obj) {\n  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);\n}\n\n/**\n * Assert that all dependencies of a list with dependencies are available in the provided scope.\n *\n * Will throw an exception when there are dependencies missing.\n *\n * @param {string} name   Name for the function to be created. Used to generate a useful error message\n * @param {string[]} dependencies\n * @param {Object} scope\n */\nexport function assertDependencies(name, dependencies, scope) {\n  var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals\n  .every(dependency => scope[dependency] !== undefined);\n  if (!allDefined) {\n    var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined);\n\n    // TODO: create a custom error class for this, a MathjsError or something like that\n    throw new Error(\"Cannot create function \\\"\".concat(name, \"\\\", \") + \"some dependencies are missing: \".concat(missingDependencies.map(d => \"\\\"\".concat(d, \"\\\"\")).join(', '), \".\"));\n  }\n}\nexport function isOptionalDependency(dependency) {\n  return dependency && dependency[0] === '?';\n}\nexport function stripOptionalNotation(dependency) {\n  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;\n}","import { isInteger } from './number.js';\nimport { isNumber } from './is.js';\nimport { format } from './string.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nexport function arraySize(x) {\n  var s = [];\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n  return s;\n}\n\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n  if (len !== size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\nexport function validate(array, size) {\n  var isScalar = size.length === 0;\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\nexport function validateIndex(index, length) {\n  if (!isNumber(index) || !isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new IndexError(index, length);\n  }\n}\n\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\nexport function resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n  });\n\n  // recursively resize the array\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n  return array;\n}\n\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    // fill new elements with the default value\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nexport function reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n  if (sizes.length === 0) {\n    throw new DimensionError(0, currentLength, '!=');\n  }\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n  if (currentLength !== newLength) {\n    throw new DimensionError(newLength, currentLength, '!=');\n  }\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(newLength, currentLength, '!=');\n    }\n    throw e;\n  }\n}\n\n/**\n * Replaces the wildcard -1 in the sizes array.\n * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.\n * @param {number} currentLength  Number of elements in the array.\n * @throws {Error}                If more than one wildcard or unable to replace it.\n * @returns {Array.<number>}      The sizes array with wildcard replaced.\n */\nexport function processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n  return processedSizes;\n}\n\n/**\n * Computes the product of all array elements.\n * @param {Array<number>} array Array of factors\n * @returns {number}            Product of all elements\n */\nfunction product(array) {\n  return array.reduce((prev, curr) => prev * curr, 1);\n}\n\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2;\n  // for each dimensions starting by the last one and ignoring the first one\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = [];\n\n    // aggregate the elements of the current tmpArray in elements of the requested size\n    var length = tmpArray.length / size;\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    }\n    // set it as the new tmpArray for the next loop turn or for return\n    tmpArray = tmpArray2;\n  }\n  return tmpArray;\n}\n\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\nexport function squeeze(array, size) {\n  var s = size || arraySize(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n  return array;\n}\n\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n  return array;\n}\n\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [size] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\nexport function unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n  return array;\n}\n\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\nexport function flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\nexport function map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\nexport function forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\nexport function filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, callback);\n}\n\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\nexport function filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\n}\n\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\nexport function join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\nexport function identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n  return b;\n}\n\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\nexport function generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param {Array} array\n * @param {function} typeOf   Callback function to use to determine the type of a value\n * @return {string}\n */\nexport function getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var isArray = Array.isArray(item);\n\n    // Saving the target matrix row size\n    if (i === 0 && isArray) {\n      length = item.length;\n    }\n\n    // If the current item is an array but the length does not equal the targetVectorSize\n    if (isArray && item.length !== length) {\n      return undefined;\n    }\n    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {\n      // we're good, everything has the same type so far\n    }\n  }\n  return type;\n}\n\n/**\n * Return the last item from an array\n * @param array\n * @returns {*}\n */\nexport function last(array) {\n  return array[array.length - 1];\n}\n\n/**\n * Get all but the last element of array.\n */\nexport function initial(array) {\n  return array.slice(0, array.length - 1);\n}\n\n/**\n * Test whether an array or string contains an item\n * @param {Array | string} array\n * @param {*} item\n * @return {boolean}\n */\nexport function contains(array, item) {\n  return array.indexOf(item) !== -1;\n}","import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *     math.format(value, options)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]\n *     Formatting options. See src/utils/number.js:format for a\n *     description of the available options controlling number output.\n *     This generic \"format\" also supports the option property `truncate: NN`\n *     giving the maximum number NN of characters to return (if there would\n *     have been more, they are deleted and replaced by an ellipsis).\n * @return {string} str\n */\nexport function format(value, options) {\n  var result = _format(value, options);\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n  return result;\n}\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  }\n\n  // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\n\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}","import { isInteger } from '../number.js';\n\n/**\n * Formats a BigNumber in a given base\n * @param {BigNumber} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nfunction formatBigNumberToBase(n, base, size) {\n  var BigNumberCtor = n.constructor;\n  var big2 = new BigNumberCtor(2);\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!n.isInteger()) {\n      throw new Error('Value must be an integer');\n    }\n    if (n.lessThan(0)) {\n      n = n.add(big2.pow(size));\n    }\n    suffix = \"i\".concat(size);\n  }\n  switch (base) {\n    case 2:\n      return \"\".concat(n.toBinary()).concat(suffix);\n    case 8:\n      return \"\".concat(n.toOctal()).concat(suffix);\n    case 16:\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\n    default:\n      throw new Error(\"Base \".concat(base, \" not supported \"));\n  }\n}\n\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatBigNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatBigNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatBigNumberToBase(value, 16, wordSize);\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n\n        // handle special case zero\n        if (value.isZero()) return '0';\n\n        // determine whether or not to output exponential notation\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        }\n\n        // remove trailing zeros after the decimal point\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  // find difference in exponents, and calculate the value without exponent\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}","/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nexport function DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;","/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nexport function IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.index = index;\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n  this.stack = new Error().stack;\n}\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;","import { setSafeProperty, hasSafeProperty, getSafeProperty } from './customs.js';\nimport { isObject } from './is.js';\n\n/**\n * A map facade on a bare object.\n *\n * The small number of methods needed to implement a scope,\n * forwarding on to the SafeProperty functions. Over time, the codebase\n * will stop using this method, as all objects will be Maps, rather than\n * more security prone objects.\n */\nexport class ObjectWrappingMap {\n  constructor(object) {\n    this.wrappedObject = object;\n  }\n  keys() {\n    return Object.keys(this.wrappedObject);\n  }\n  get(key) {\n    return getSafeProperty(this.wrappedObject, key);\n  }\n  set(key, value) {\n    setSafeProperty(this.wrappedObject, key, value);\n    return this;\n  }\n  has(key) {\n    return hasSafeProperty(this.wrappedObject, key);\n  }\n}\n\n/**\n * Creates an empty map, or whatever your platform's polyfill is.\n *\n * @returns an empty Map or Map like object.\n */\nexport function createEmptyMap() {\n  return new Map();\n}\n\n/**\n * Creates a Map from the given object.\n *\n * @param { Map | { [key: string]: unknown } | undefined } mapOrObject\n * @returns\n */\nexport function createMap(mapOrObject) {\n  if (!mapOrObject) {\n    return createEmptyMap();\n  }\n  if (isMap(mapOrObject)) {\n    return mapOrObject;\n  }\n  if (isObject(mapOrObject)) {\n    return new ObjectWrappingMap(mapOrObject);\n  }\n  throw new Error('createMap can create maps from objects or Maps');\n}\n\n/**\n * Unwraps a map into an object.\n *\n * @param {Map} map\n * @returns { [key: string]: unknown }\n */\nexport function toObject(map) {\n  if (map instanceof ObjectWrappingMap) {\n    return map.wrappedObject;\n  }\n  var object = {};\n  for (var key of map.keys()) {\n    var value = map.get(key);\n    setSafeProperty(object, key, value);\n  }\n  return object;\n}\n\n/**\n * Returns `true` if the passed object appears to be a Map (i.e. duck typing).\n *\n * Methods looked for are `get`, `set`, `keys` and `has`.\n *\n * @param {Map | object} object\n * @returns\n */\nexport function isMap(object) {\n  // We can use the fast instanceof, or a slower duck typing check.\n  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.\n  if (!object) {\n    return false;\n  }\n  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';\n}\n\n/**\n * Copies the contents of key-value pairs from each `objects` in to `map`.\n *\n * Object is `objects` can be a `Map` or object.\n *\n * This is the `Map` analog to `Object.assign`.\n */\nexport function assign(map) {\n  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    objects[_key - 1] = arguments[_key];\n  }\n  for (var args of objects) {\n    if (!args) {\n      continue;\n    }\n    if (isMap(args)) {\n      for (var key of args.keys()) {\n        map.set(key, args.get(key));\n      }\n    } else if (isObject(args)) {\n      for (var _key2 of Object.keys(args)) {\n        map.set(_key2, args[_key2]);\n      }\n    }\n  }\n  return map;\n}","import { hasOwnProperty } from './object.js';\n\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n  throw new Error('No access to property \"' + prop + '\"');\n}\nfunction getSafeProperties(object) {\n  return Object.keys(object).filter(prop => hasOwnProperty(object, prop));\n}\nfunction hasSafeProperty(object, prop) {\n  return prop in object;\n}\n\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\nfunction isSafeProperty(object, prop) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  // SAFE: whitelisted\n  // e.g length\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  }\n  // UNSAFE: inherited from Object prototype\n  // e.g constructor\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  }\n  // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n  return true;\n}\n\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\nfunction isSafeMethod(object, method) {\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\n    return false;\n  }\n  // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  }\n  // SAFE: whitelisted\n  // e.g toString\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  }\n  // UNSAFE: inherited from Object prototype\n  // e.g constructor\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  }\n  // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n  return true;\n}\nfunction isPlainObject(object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexport { getSafeProperty };\nexport { setSafeProperty };\nexport { isSafeProperty };\nexport { hasSafeProperty };\nexport { getSafeProperties };\nexport { validateSafeMethod };\nexport { isSafeMethod };\nexport { isPlainObject };","import { factory } from '../../utils/factory.js';\nvar name = 'ResultSet';\nvar dependencies = [];\nexport var createResultSet = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.entries = entries || [];\n  }\n\n  /**\n   * Attach type information\n   */\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n  return ResultSet;\n}, {\n  isClass: true\n});","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: Decimal.EUCLID\n  });\n  BigNumber.prototype = Object.create(BigNumber.prototype);\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n  return BigNumber;\n}, {\n  isClass: true\n});",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*!\r\n   *  decimal.js v10.4.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return Complex;\n}, {\n  isClass: true\n});","/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = Math.cosh || function(x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = Math.sinh || function(x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n     a = a / 2;\n     b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n","import Fraction from 'fraction.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Fraction';\nvar dependencies = [];\nexport var createFractionClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Fraction, 'name', {\n    value: 'Fraction'\n  });\n  Fraction.prototype.constructor = Fraction;\n  Fraction.prototype.type = 'Fraction';\n  Fraction.prototype.isFraction = true;\n\n  /**\n   * Get a JSON representation of a Fraction containing type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   */\n  Fraction.prototype.toJSON = function () {\n    return {\n      mathjs: 'Fraction',\n      n: this.s * this.n,\n      d: this.d\n    };\n  };\n\n  /**\n   * Instantiate a Fraction from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   * @return {BigNumber}\n   */\n  Fraction.fromJSON = function (json) {\n    return new Fraction(json);\n  };\n  return Fraction;\n}, {\n  isClass: true\n});","/**\n * @license Fraction.js v4.2.0 05/03/2022\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n\n    n = n < 0 ? -n : n;\n\n    var a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    var factors = {};\n\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n\n      while (n % i === 0) {\n        n/= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s+= 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n*= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throw Fraction['InvalidParameter'];\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1/= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A+= C;\n                    B+= D;\n                  } else {\n                    C+= A;\n                    D+= B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n*= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throw Fraction['InvalidParameter'];\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A+= 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A+= 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A+= 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throw Fraction['InvalidParameter'];\n      }\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d/= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d/= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","import { isBigNumber } from '../../utils/is.js';\nimport { format, sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Range';\nvar dependencies = [];\nexport var createRangeClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *\n   *     const range = new Range(start, end)\n   *     const range = new Range(start, end, step)\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x)\n   *     })\n   *     range.map(function (x) {\n   *         return math.sin(x)\n   *     })\n   *     range.toArray()\n   *\n   * Example usage:\n   *\n   *     const c = new Range(2, 6)       // 2:1:5\n   *     c.toArray()                     // [2, 3, 4, 5]\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n    if (hasStart) {\n      if (isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number') {\n        throw new TypeError('Parameter start must be a number');\n      }\n    }\n    if (hasEnd) {\n      if (isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number') {\n        throw new TypeError('Parameter end must be a number');\n      }\n    }\n    if (hasStep) {\n      if (isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number') {\n        throw new TypeError('Parameter step must be a number');\n      }\n    }\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n\n  /**\n   * Attach type information\n   */\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n    if (sign(step) === sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n    if (isNaN(len)) {\n      len = 0;\n    }\n    return [len];\n  };\n\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Range.prototype.format = function (options) {\n    var str = format(this.start, options);\n    if (this.step !== 1) {\n      str += ':' + format(this.step, options);\n    }\n    str += ':' + format(this.end, options);\n    return str;\n  };\n\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n  return Range;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'Matrix';\nvar dependencies = [];\nexport var createMatrixClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  Matrix.prototype[Symbol.iterator] = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot iterate a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n  return Matrix;\n}, {\n  isClass: true\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});","// function utils\n\nimport { lruQueue } from './lruQueue.js';\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {Object} [options]\n * @param {function(args: Array): string} [options.hasher]\n *    A custom hash builder. Is JSON.stringify by default.\n * @param {number | undefined} [options.limit]\n *    Maximum number of values that may be cached. Undefined indicates\n *    unlimited (default)\n * @return {function}                       Returns the memoized function\n */\nexport function memoize(fn) {\n  var {\n    hasher,\n    limit\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  limit = limit == null ? Number.POSITIVE_INFINITY : limit;\n  hasher = hasher == null ? JSON.stringify : hasher;\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {\n        values: new Map(),\n        lru: lruQueue(limit || Number.POSITIVE_INFINITY)\n      };\n    }\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    var hash = hasher(args);\n    if (memoize.cache.values.has(hash)) {\n      memoize.cache.lru.hit(hash);\n      return memoize.cache.values.get(hash);\n    }\n    var newVal = fn.apply(fn, args);\n    memoize.cache.values.set(hash, newVal);\n    memoize.cache.values.delete(memoize.cache.lru.hit(hash));\n    return newVal;\n  };\n}\n\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args,\n      res\n    });\n    return res;\n  };\n  memoize.cache = [];\n  return memoize;\n}\n\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}","// (c) 2018, Mariusz Nowak\n// SPDX-License-Identifier: ISC\n// Derived from https://github.com/medikoo/lru-queue\nexport function lruQueue(limit) {\n  var size = 0;\n  var base = 1;\n  var queue = Object.create(null);\n  var map = Object.create(null);\n  var index = 0;\n  var del = function del(id) {\n    var oldIndex = map[id];\n    if (!oldIndex) return;\n    delete queue[oldIndex];\n    delete map[id];\n    --size;\n    if (base !== oldIndex) return;\n    if (!size) {\n      index = 0;\n      base = 1;\n      return;\n    }\n    while (!hasOwnProperty.call(queue, ++base)) {\n      continue;\n    }\n  };\n  limit = Math.abs(limit);\n  return {\n    hit: function hit(id) {\n      var oldIndex = map[id];\n      var nuIndex = ++index;\n      queue[nuIndex] = id;\n      map[id] = nuIndex;\n      if (!oldIndex) {\n        ++size;\n        if (size <= limit) return undefined;\n        id = queue[base];\n        del(id);\n        return id;\n      }\n      delete queue[oldIndex];\n      if (base !== oldIndex) return undefined;\n      while (!hasOwnProperty.call(queue, ++base)) {\n        continue;\n      }\n      return undefined;\n    },\n    delete: del,\n    clear: function clear() {\n      size = index = 0;\n      base = 1;\n      queue = Object.create(null);\n      map = Object.create(null);\n    }\n  };\n}","import { clone as objectClone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'clone';\nvar dependencies = ['typed'];\nexport var createClone = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Clone an object. Will make a deep copy of the data.\n   *\n   * Syntax:\n   *\n   *     math.clone(x)\n   *\n   * Examples:\n   *\n   *    math.clone(3.5)                   // returns number 3.5\n   *    math.clone(math.complex('2-4i'))  // returns Complex 2 - 4i\n   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg\n   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]\n   *    math.clone(\"hello world\")         // returns string \"hello world\"\n   *\n   * @param {*} x   Object to be cloned\n   * @return {*} A clone of object x\n   */\n  return typed(name, {\n    any: objectClone\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { isCollection, isMatrix } from './is.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { arraySize } from './array.js';\nimport { _switch } from './switch.js';\n\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\nexport function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\nexport function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n}\n\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\nexport function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n}\n\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\nexport function reduce(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n}\n\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n      return ret;\n    }\n  } else {\n    ret = [];\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n    return ret;\n  }\n}\n\n// TODO: document function scatter\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n\n  // vars\n  var k, k0, k1, i;\n\n  // check we need to process values (pattern matrix)\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n        // x(i) = A, check we need to call function this time\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n          // function was called on current row\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n        // function was called on current row\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n}","/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\nexport function _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n    ret.push(tmp);\n  }\n  return ret;\n}","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNegativeNumber } from '../../plain/number/index.js';\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","export * from './arithmetic.js';\nexport * from './bitwise.js';\nexport * from './combinations.js';\nexport * from './constants.js';\nexport * from './logical.js';\nexport * from './relational.js';\nexport * from './probability.js';\nexport * from './trigonometry.js';\nexport * from './utils.js';","import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  var r;\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n  var t;\n  var prod = a * b;\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n\n/**\n * Calculate the logarithm of a value, optionally to a given base.\n * @param {number} x\n * @param {number | null | undefined} base\n * @return {number}\n */\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n  return Math.log(x);\n}\n\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} [2] root\n * @private\n */\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n  if (inv) {\n    root = -root;\n  }\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  }\n\n  // edge cases zero and infinity\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n  var x = Math.pow(Math.abs(a), 1 / root);\n  // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x;\n\n  // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n  var q; // quotient\n  var r; // remainder\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n  var res;\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n  return res;\n}\nxgcdNumber.signature = n2;\n\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n  return parseFloat(toFixed(value, decimals));\n}\n\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","import { isInteger } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function bitAndNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n  return x & y;\n}\nbitAndNumber.signature = n2;\nexport function bitNotNumber(x) {\n  if (!isInteger(x)) {\n    throw new Error('Integer expected in function bitNot');\n  }\n  return ~x;\n}\nbitNotNumber.signature = n1;\nexport function bitOrNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitOr');\n  }\n  return x | y;\n}\nbitOrNumber.signature = n2;\nexport function bitXorNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitXor');\n  }\n  return x ^ y;\n}\nbitXorNumber.signature = n2;\nexport function leftShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function leftShift');\n  }\n  return x << y;\n}\nleftShiftNumber.signature = n2;\nexport function rightArithShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n  return x >> y;\n}\nrightArithShiftNumber.signature = n2;\nexport function rightLogShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightLogShift');\n  }\n  return x >>> y;\n}\nrightLogShiftNumber.signature = n2;","import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nexport function combinationsNumber(n, k) {\n  if (!isInteger(n) || n < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n  if (!isInteger(k) || k < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n  if (k > n) {\n    throw new TypeError('k must be less than or equal to n');\n  }\n  var nMinusk = n - k;\n  var answer = 1;\n  var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;\n  var nextdivisor = 2;\n  var lastdivisor = k < nMinusk ? k : nMinusk;\n  // balance multiplications and divisions to try to keep intermediate values\n  // in exact-integer range as long as possible\n  for (var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator) {\n    answer *= nextnumerator;\n    while (nextdivisor <= lastdivisor && answer % nextdivisor === 0) {\n      answer /= nextdivisor;\n      ++nextdivisor;\n    }\n  }\n  // for big n, k, floating point may have caused weirdness in remainder\n  if (nextdivisor <= lastdivisor) {\n    answer /= product(nextdivisor, lastdivisor);\n  }\n  return answer;\n}\ncombinationsNumber.signature = 'number, number';","/** @param {number} i\n *  @param {number} n\n *  @returns {number} product of i to n\n */\nexport function product(i, n) {\n  if (n < i) {\n    return 1;\n  }\n  if (n === i) {\n    return n;\n  }\n  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer\n  return product(i, half) * product(half + 1, n);\n}","export var pi = Math.PI;\nexport var tau = 2 * Math.PI;\nexport var e = Math.E;\nexport var phi = 1.6180339887498948; // eslint-disable-line no-loss-of-precision","var n1 = 'number';\nvar n2 = 'number, number';\nexport function notNumber(x) {\n  return !x;\n}\nnotNumber.signature = n1;\nexport function orNumber(x, y) {\n  return !!(x || y);\n}\norNumber.signature = n2;\nexport function xorNumber(x, y) {\n  return !!x !== !!y;\n}\nxorNumber.signature = n2;\nexport function andNumber(x, y) {\n  return !!(x && y);\n}\nandNumber.signature = n2;",null,"/* eslint-disable no-loss-of-precision */\n\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nexport function gammaNumber(n) {\n  var x;\n  if (isInteger(n)) {\n    if (n <= 0) {\n      return isFinite(n) ? Infinity : NaN;\n    }\n    if (n > 171) {\n      return Infinity; // Will overflow\n    }\n\n    return product(1, n - 1);\n  }\n  if (n < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));\n  }\n  if (n >= 171.35) {\n    return Infinity; // will overflow\n  }\n\n  if (n > 85.0) {\n    // Extended Stirling Approx\n    var twoN = n * n;\n    var threeN = twoN * n;\n    var fourN = threeN * n;\n    var fiveN = fourN * n;\n    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));\n  }\n  --n;\n  x = gammaP[0];\n  for (var i = 1; i < gammaP.length; ++i) {\n    x += gammaP[i] / (n + i);\n  }\n  var t = n + gammaG + 0.5;\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n}\ngammaNumber.signature = 'number';\n\n// TODO: comment on the variables g and p\n\nexport var gammaG = 4.7421875;\nexport var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];\n\n// lgamma implementation ref: https://mrob.com/pub/ries/lanczos-gamma.html#code\n\n// log(2 * pi) / 2\nexport var lnSqrt2PI = 0.91893853320467274178;\nexport var lgammaG = 5; // Lanczos parameter \"g\"\nexport var lgammaN = 7; // Range of coefficients \"n\"\n\nexport var lgammaSeries = [1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\nexport function lgammaNumber(n) {\n  if (n < 0) return NaN;\n  if (n === 0) return Infinity;\n  if (!isFinite(n)) return n;\n  if (n < 0.5) {\n    // Use Euler's reflection formula:\n    // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))\n    return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);\n  }\n\n  // Compute the logarithm of the Gamma function using the Lanczos method\n\n  n = n - 1;\n  var base = n + lgammaG + 0.5; // Base of the Lanczos exponential\n  var sum = lgammaSeries[0];\n\n  // We start with the terms that have the smallest coefficients and largest denominator\n  for (var i = lgammaN - 1; i >= 1; i--) {\n    sum += lgammaSeries[i] / (n + i);\n  }\n  return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);\n}\nlgammaNumber.signature = 'number';","import { acosh, asinh, atanh, cosh, sign, sinh, tanh } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function acosNumber(x) {\n  return Math.acos(x);\n}\nacosNumber.signature = n1;\nexport function acoshNumber(x) {\n  return acosh(x);\n}\nacoshNumber.signature = n1;\nexport function acotNumber(x) {\n  return Math.atan(1 / x);\n}\nacotNumber.signature = n1;\nexport function acothNumber(x) {\n  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;\n}\nacothNumber.signature = n1;\nexport function acscNumber(x) {\n  return Math.asin(1 / x);\n}\nacscNumber.signature = n1;\nexport function acschNumber(x) {\n  var xInv = 1 / x;\n  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));\n}\nacschNumber.signature = n1;\nexport function asecNumber(x) {\n  return Math.acos(1 / x);\n}\nasecNumber.signature = n1;\nexport function asechNumber(x) {\n  var xInv = 1 / x;\n  var ret = Math.sqrt(xInv * xInv - 1);\n  return Math.log(ret + xInv);\n}\nasechNumber.signature = n1;\nexport function asinNumber(x) {\n  return Math.asin(x);\n}\nasinNumber.signature = n1;\nexport function asinhNumber(x) {\n  return asinh(x);\n}\nasinhNumber.signature = n1;\nexport function atanNumber(x) {\n  return Math.atan(x);\n}\natanNumber.signature = n1;\nexport function atan2Number(y, x) {\n  return Math.atan2(y, x);\n}\natan2Number.signature = n2;\nexport function atanhNumber(x) {\n  return atanh(x);\n}\natanhNumber.signature = n1;\nexport function cosNumber(x) {\n  return Math.cos(x);\n}\ncosNumber.signature = n1;\nexport function coshNumber(x) {\n  return cosh(x);\n}\ncoshNumber.signature = n1;\nexport function cotNumber(x) {\n  return 1 / Math.tan(x);\n}\ncotNumber.signature = n1;\nexport function cothNumber(x) {\n  var e = Math.exp(2 * x);\n  return (e + 1) / (e - 1);\n}\ncothNumber.signature = n1;\nexport function cscNumber(x) {\n  return 1 / Math.sin(x);\n}\ncscNumber.signature = n1;\nexport function cschNumber(x) {\n  // consider values close to zero (+/-)\n  if (x === 0) {\n    return Number.POSITIVE_INFINITY;\n  } else {\n    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\n  }\n}\ncschNumber.signature = n1;\nexport function secNumber(x) {\n  return 1 / Math.cos(x);\n}\nsecNumber.signature = n1;\nexport function sechNumber(x) {\n  return 2 / (Math.exp(x) + Math.exp(-x));\n}\nsechNumber.signature = n1;\nexport function sinNumber(x) {\n  return Math.sin(x);\n}\nsinNumber.signature = n1;\nexport function sinhNumber(x) {\n  return sinh(x);\n}\nsinhNumber.signature = n1;\nexport function tanNumber(x) {\n  return Math.tan(x);\n}\ntanNumber.signature = n1;\nexport function tanhNumber(x) {\n  return tanh(x);\n}\ntanhNumber.signature = n1;","import { isInteger } from '../../utils/number.js';\nvar n1 = 'number';\nexport function isIntegerNumber(x) {\n  return isInteger(x);\n}\nisIntegerNumber.signature = n1;\nexport function isNegativeNumber(x) {\n  return x < 0;\n}\nisNegativeNumber.signature = n1;\nexport function isPositiveNumber(x) {\n  return x > 0;\n}\nisPositiveNumber.signature = n1;\nexport function isZeroNumber(x) {\n  return x === 0;\n}\nisZeroNumber.signature = n1;\nexport function isNaNNumber(x) {\n  return Number.isNaN(x);\n}\nisNaNNumber.signature = n1;","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isNumeric';\nvar dependencies = ['typed'];\nexport var createIsNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2)                     // returns true\n   *    math.isNumeric('2')                   // returns false\n   *    math.hasNumericValue('2')             // returns true\n   *    math.isNumeric(0)                     // returns true\n   *    math.isNumeric(math.bignumber(500))   // returns true\n   *    math.isNumeric(math.fraction(4))      // returns true\n   *    math.isNumeric(math.complex('2-4i'))  // returns false\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | boolean': () => true,\n    'Complex | Unit | string | null | undefined | Node': () => false,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'hasNumericValue';\nvar dependencies = ['typed', 'isNumeric'];\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric\n  } = _ref;\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * In case of a string, true is returned if the string contains a numeric value.\n   *\n   * Syntax:\n   *\n   *     math.hasNumericValue(x)\n   *\n   * Examples:\n   *\n   *    math.hasNumericValue(2)                     // returns true\n   *    math.hasNumericValue('2')                   // returns true\n   *    math.isNumeric('2')                         // returns false\n   *    math.hasNumericValue(0)                     // returns true\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\n   *    math.hasNumericValue(math.fraction(4))      // returns true\n   *    math.hasNumericValue(math.complex('2-4i'))  // returns false\n   *    math.hasNumericValue(false)                 // returns true\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    boolean: () => true,\n    string: function string(x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    any: function any(x) {\n      return isNumeric(x);\n    }\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isPositiveNumber } from '../../plain/number/index.js';\nvar name = 'isPositive';\nvar dependencies = ['typed'];\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3)                     // returns true\n   *    math.isPositive(-2)                    // returns false\n   *    math.isPositive(0)                     // returns false\n   *    math.isPositive(-0)                    // returns false\n   *    math.isPositive(0.5)                   // returns true\n   *    math.isPositive(math.bignumber(2))     // returns true\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\n   *    math.isPositive(math.fraction(1, 3))   // returns true\n   *    math.isPositive('2')                   // returns true\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isPositiveNumber,\n    BigNumber: function BigNumber(x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s > 0 && x.n > 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                      // returns true\n   *    math.isZero(2)                      // returns false\n   *    math.isZero(0.5)                    // returns false\n   *    math.isZero(math.bignumber(0))      // returns true\n   *    math.isZero(math.fraction(0))       // returns true\n   *    math.isZero(math.fraction(1,3))     // returns false\n   *    math.isZero(math.complex('2 - 4i')) // returns false\n   *    math.isZero(math.complex('0i'))     // returns true\n   *    math.isZero('0')                    // returns true\n   *    math.isZero('2')                    // returns false\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNaNNumber } from '../../plain/number/index.js';\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3)                     // returns false\n   *    math.isNaN(NaN)                   // returns true\n   *    math.isNaN(0)                     // returns false\n   *    math.isNaN(math.bignumber(NaN))   // returns true\n   *    math.isNaN(math.bignumber(0))     // returns false\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\n   *    math.isNaN('-2')                  // returns false\n   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { typeOf as _typeOf } from '../../utils/is.js';\nvar name = 'typeOf';\nvar dependencies = ['typed'];\nexport var createTypeOf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Determine the type of an entity.\n   *\n   * Syntax:\n   *\n   *    math.typeOf(x)\n   *\n   * Examples:\n   *\n   *    // This list is intended to include all relevant types, for testing\n   *    // purposes:\n   *    math.typeOf(3.5)                      // returns 'number'\n   *    math.typeOf(math.complex('2-4i'))     // returns 'Complex'\n   *    math.typeOf(math.unit('45 deg'))      // returns 'Unit'\n   *    math.typeOf('hello world')            // returns 'string'\n   *    math.typeOf(null)                     // returns 'null'\n   *    math.typeOf(true)                     // returns 'boolean'\n   *    math.typeOf([1, 2, 3])                // returns 'Array'\n   *    math.typeOf(new Date())               // returns 'Date'\n   *    math.typeOf(function () {})           // returns 'function'\n   *    math.typeOf({a: 2, b: 3})             // returns 'Object'\n   *    math.typeOf(/a regexp/)               // returns 'RegExp'\n   *    math.typeOf(undefined)                // returns 'undefined'\n   *    math.typeOf(math.bignumber('23e99'))  // returns 'BigNumber'\n   *    math.typeOf(math.chain(2))            // returns 'Chain'\n   *    math.typeOf(math.fraction(1, 3))      // returns 'Fraction'\n   *    math.typeOf(math.help('sqrt'))        // returns 'Help'\n   *    math.typeOf(math.index(1, 3))         // returns 'Index'\n   *    math.typeOf(math.matrix([[1],[3]]))   // returns 'DenseMatrix'\n   *    math.typeOf(math.matrix([],'sparse')) // returns 'SparseMatrix'\n   *    math.typeOf(new math.Range(0, 10))    // returns 'Range'\n   *    math.typeOf(math.evaluate('a=2\\na'))  // returns 'ResultSet'\n   *    math.typeOf(math.parse('A[2]'))       // returns 'AccessorNode'\n   *    math.typeOf(math.parse('[1,2,3]'))    // returns 'ArrayNode'\n   *    math.typeOf(math.parse('x=2'))        // returns 'AssignmentNode'\n   *    math.typeOf(math.parse('a=2; b=3'))   // returns 'BlockNode'\n   *    math.typeOf(math.parse('x<0?-1:1'))   // returns 'ConditionalNode'\n   *    math.typeOf(math.parse('2.3'))        // returns 'ConstantNode'\n   *    math.typeOf(math.parse('f(x)=x^2'))   // returns 'FunctionAssignmentNode'\n   *    math.typeOf(math.parse('sqrt(4)'))    // returns 'FunctionNode'\n   *    math.typeOf(math.parse('A[2]').index) // returns 'IndexNode'\n   *    math.typeOf(math.parse('{a:2}'))      // returns 'ObjectNode'\n   *    math.typeOf(math.parse('(2+3)'))      // returns 'ParenthesisNode'\n   *    math.typeOf(math.parse('1:10'))       // returns 'RangeNode'\n   *    math.typeOf(math.parse('a<b<c'))      // returns 'RelationalNode'\n   *    math.typeOf(math.parse('x'))          // returns 'SymbolNode'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  return typed(name, {\n    any: _typeOf\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}","import { nearlyEqual } from './number.js';\n\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\nexport function complexEquals(x, y, epsilon) {\n  return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);\n}","import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            }\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            }\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;\n      } while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new SparseMatrix\n   */\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    }\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n\n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n\n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n\n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n\n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n\n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];\n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n\n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    }\n\n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // insert the sub matrix\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n    return matrix;\n  }\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    }\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    }\n    // we did not find row\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // check sizes\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n\n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }\n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    }\n\n    // check sizes\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1];\n\n    // m * n must not change\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var args = maxArgumentCount(callback);\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n\n    // invoke callback\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k];\n          // check i is in range\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    }\n\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k];\n\n          // value @ k\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n    var columns = this._size[1];\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;\n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        }\n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        }\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        }\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});","import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n  var result = n + f;\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n  return result;\n}\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        // check if the bit at index size - 1 is set and if so do the twos complement\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});","import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nimport { format } from '../utils/number.js';\nvar name = 'string';\nvar dependencies = ['typed'];\nexport var createString = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)               // returns string '4.2'\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))         // returns string '5000 m'\n   *\n   *    math.string([true, false])     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  return typed(name, {\n    '': function _() {\n      return '';\n    },\n    number: format,\n    null: function _null(x) {\n      return 'null';\n    },\n    boolean: function boolean(x) {\n      return x + '';\n    },\n    string: function string(x) {\n      return x;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\n    any: function any(x) {\n      return String(x);\n    }\n  });\n});","import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    boolean: function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    null: function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      }\n\n      // test whether value is a valid number\n      var num = Number(x);\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n\n    null: function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n  /**\n   * Create a fraction or convert a value to a fraction.\n   *\n   * With one numeric argument, produces the closest rational approximation to the\n   * input.\n   * With two arguments, the first is the numerator and the second is the denominator,\n   * and creates the corresponding fraction. Both numerator and denominator must be\n   * integers.\n   * With one object argument, looks for the integer numerator as the value of property\n   * 'n' and the integer denominator as the value of property 'd'.\n   * With a matrix argument, creates a matrix of the same shape with entries\n   * converted into fractions.\n   *\n   * Syntax:\n   *     math.fraction(value)\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)\n   *\n   * Examples:\n   *\n   *     math.fraction(6.283)             // returns Fraction 6283/1000\n   *     math.fraction(1, 3)              // returns Fraction 1/3\n   *     math.fraction('2/3')             // returns Fraction 2/3\n   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3\n   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]\n   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the value, or numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromFunction';\nvar dependencies = ['typed', 'matrix', 'isZero'];\nexport var createMatrixFromFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isZero\n  } = _ref;\n  /**\n   * Create a matrix by evaluating a generating function at each index.\n   * The simplest overload returns a multi-dimensional array as long as `size` is an array.\n   * Passing `size` as a Matrix or specifying a `format` will result in returning a Matrix.\n   *\n   * Syntax:\n   *\n   *    math.matrixFromFunction(size, fn)\n   *    math.matrixFromFunction(size, fn, format)\n   *    math.matrixFromFunction(size, fn, format, datatype)\n   *    math.matrixFromFunction(size, format, fn)\n   *    math.matrixFromFunction(size, format, datatype, fn)\n   *\n   * Examples:\n   *\n   *    math.matrixFromFunction([3,3], i => i[0] - i[1]) // an antisymmetric matrix\n   *    math.matrixFromFunction([100, 100], 'sparse', i => i[0] - i[1] === 1 ? 4 : 0) // a sparse subdiagonal matrix\n   *    math.matrixFromFunction([5], i => math.random()) // a random vector\n   *\n   * See also:\n   *\n   *    matrix, zeros\n   *\n   * @param {Array | Matrix} size   The size of the matrix to be created\n   * @param {function} fn           Callback function invoked for every entry in the matrix\n   * @param {string} [format]       The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]     Type of the values\n   * @return {Array | Matrix} Returns the created matrix\n   */\n  return typed(name, {\n    'Array | Matrix, function, string, string': function ArrayMatrixFunctionStringString(size, fn, format, datatype) {\n      return _create(size, fn, format, datatype);\n    },\n    'Array | Matrix, function, string': function ArrayMatrixFunctionString(size, fn, format) {\n      return _create(size, fn, format);\n    },\n    'Matrix, function': function MatrixFunction(size, fn) {\n      return _create(size, fn, 'dense');\n    },\n    'Array, function': function ArrayFunction(size, fn) {\n      return _create(size, fn, 'dense').toArray();\n    },\n    'Array | Matrix, string, function': function ArrayMatrixStringFunction(size, format, fn) {\n      return _create(size, fn, format);\n    },\n    'Array | Matrix, string, string, function': function ArrayMatrixStringStringFunction(size, format, datatype, fn) {\n      return _create(size, fn, format, datatype);\n    }\n  });\n  function _create(size, fn, format, datatype) {\n    var m;\n    if (datatype !== undefined) {\n      m = matrix(format, datatype);\n    } else {\n      m = matrix(format);\n    }\n    m.resize(size);\n    m.forEach(function (_, index) {\n      var val = fn(index);\n      if (isZero(val)) return;\n      m.set(index, val);\n    });\n    return m;\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromRows';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromRows = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n  /**\n   * Create a dense matrix from vectors as individual rows.\n   * If you pass column vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromRows(...arr)\n   *    math.matrixFromRows(row1, row2)\n   *    math.matrixFromRows(row1, row2, row3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromRows(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromColumns, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} rows  Multiple rows\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    }\n\n    // TODO implement this properly for SparseMatrix\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]);\n    var result = [];\n    for (var row of arr) {\n      var rowLength = checkVectorTypeAndReturnLength(row);\n      if (rowLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));\n      }\n      result.push(flatten(row));\n    }\n    return result;\n  }\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromColumns';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromColumns = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n  /**\n   * Create a dense matrix from vectors as individual columns.\n   * If you pass row vectors, they will be transposed (but not conjugated!)\n   *\n   * Syntax:\n   *\n   *    math.matrixFromColumns(...arr)\n   *    math.matrixFromColumns(col1, col2)\n   *    math.matrixFromColumns(col1, col2, col3)\n   *\n   * Examples:\n   *\n   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])\n   *    math.matrixFromColumns(...vectors)\n   *\n   * See also:\n   *\n   *    matrix, matrixFromRows, matrixFromFunction, zeros\n   *\n   * @param {... Array | Matrix} cols Multiple columns\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    }\n\n    // TODO implement this properly for SparseMatrix\n  });\n\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]);\n\n    // create an array with empty rows\n    var result = [];\n    for (var i = 0; i < N; i++) {\n      result[i] = [];\n    }\n\n    // loop columns\n    for (var col of arr) {\n      var colLength = checkVectorTypeAndReturnLength(col);\n      if (colLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));\n      }\n      var f = flatten(col);\n\n      // push a value to each row\n      for (var _i = 0; _i < N; _i++) {\n        result[_i].push(f[_i]);\n      }\n    }\n    return result;\n  }\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nexport var createSplitUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n\n    // TODO: add support for string\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber\n  } = _ref;\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    // deep map collection, skip zeros since unaryPlus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  return typed(name, {\n    number: absNumber,\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\n    // deep map collection, skip zeros since abs(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { arraySize } from '../../utils/array.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { IndexError } from '../../error/IndexError.js';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\nexport var createApply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  /**\n   * Apply a function that maps an array to a scalar\n   * along a given axis of a matrix or array.\n   * Returns a new matrix or array with one less dimension than the input.\n   *\n   * Syntax:\n   *\n   *     math.apply(A, dim, callback)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [3, 4]]\n   *    const sum = math.sum\n   *\n   *    math.apply(A, 0, sum)             // returns [4, 6]\n   *    math.apply(A, 1, sum)             // returns [3, 7]\n   *\n   * See also:\n   *\n   *    map, filter, forEach\n   *\n   * @param {Array | Matrix} array   The input Matrix\n   * @param {number} dim             The dimension along which the callback is applied\n   * @param {Function} callback      The callback function that is applied. This Function\n   *                                 should take an array or 1-d matrix as an input and\n   *                                 return a number.\n   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.\n   */\n  return typed(name, {\n    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {\n      if (!isInteger(dim)) {\n        throw new TypeError('Integer number expected for dimension');\n      }\n      var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n      if (dim < 0 || dim >= size.length) {\n        throw new IndexError(dim, size.length);\n      }\n      if (isMatrix(mat)) {\n        return mat.create(_apply(mat.valueOf(), dim, callback));\n      } else {\n        return _apply(mat, dim, callback);\n      }\n    }\n  });\n});\n\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\nfunction _apply(mat, dim, callback) {\n  var i, ret, tran;\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      return callback(mat);\n    } else {\n      tran = _switch(mat);\n      ret = [];\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _apply(tran[i], dim - 1, callback);\n      }\n      return ret;\n    }\n  } else {\n    ret = [];\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _apply(mat[i], dim - 1, callback);\n    }\n    return ret;\n  }\n}\n\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n    ret.push(tmp);\n  }\n  return ret;\n}","import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n      var _result = x.pow(third);\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n      return _result;\n    }\n  }\n});","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.ceil(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo12xSfs';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo12xSfs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo12xSfs(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { cubeNumber } from '../../plain/number/index.js';\nvar name = 'cube';\nvar dependencies = ['typed'];\nexport var createCube = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * To avoid confusion with `pow(M,3)`, this function does not apply to matrices.\n   * If you wish to cube every entry of a matrix, see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.map([1, 2, 3, 4], math.cube) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Unit} Cube of x\n   */\n  return typed(name, {\n    number: cubeNumber,\n    Complex: function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n\n    BigNumber: function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n\n    Unit: function Unit(x) {\n      return x.pow(3);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { expNumber } from '../../plain/number/index.js';\nvar name = 'exp';\nvar dependencies = ['typed'];\nexport var createExp = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the exponential of a value.\n   * For matrices, if you want the matrix exponential of square matrix, use\n   * the `expm` function; if you want to take the exponential of each element,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.map([1, 2, 3], math.exp)\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, expm, log, pow\n   *\n   * @param {number | BigNumber | Complex} x  A number to exponentiate\n   * @return {number | BigNumber | Complex} Exponential of `x`\n   */\n  return typed(name, {\n    number: expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { expm1Number } from '../../plain/number/index.js';\nvar name = 'expm1';\nvar dependencies = ['typed', 'Complex'];\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * This function is more accurate than `math.exp(x)-1` when `x` is near 0\n   * To avoid ambiguity with the matrix exponential `expm`, this function\n   * does not operate on matrices; if you wish to apply it elementwise, see\n   * the examples.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.expm1(1e-8)                   // returns number 1.0000000050000001e-8\n   *    math.exp(1e-8) - 1                 // returns number 9.9999999392253e-9\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.map([1, 2, 3], math.expm1)\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, expm, log, pow\n   *\n   * @param {number | BigNumber | Complex} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex} Exponential of `x`, minus one\n   */\n  return typed(name, {\n    number: expm1Number,\n    Complex: function Complex(x) {\n      var r = Math.exp(x.re);\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp().minus(1);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'fix';\nvar dependencies = ['typed', 'Complex', 'matrix', 'ceil', 'floor', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createFixNumber = /* #__PURE__ */factory(name, ['typed', 'ceil', 'floor'], _ref => {\n  var {\n    typed,\n    ceil,\n    floor\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      return x > 0 ? floor(x) : ceil(x);\n    },\n    'number, number': function numberNumber(x, n) {\n      return x > 0 ? floor(x, n) : ceil(x, n);\n    }\n  });\n});\nexport var createFix = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    Complex: _Complex,\n    matrix,\n    ceil,\n    floor,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var fixNumber = createFixNumber({\n    typed,\n    ceil,\n    floor\n  });\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *    math.fix(x,n)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2)                // returns number 3\n   *    math.fix(3.8)                // returns number 3\n   *    math.fix(-4.2)               // returns number -4\n   *    math.fix(-4.7)               // returns number -4\n   *\n   *    math.fix(3.12, 1)                // returns number 3.1\n   *    math.fix(3.18, 1)                // returns number 3.1\n   *    math.fix(-4.12, 1)               // returns number -4.1\n   *    math.fix(-4.17, 1)               // returns number -4.1\n   *\n   *    const c = math.complex(3.22, -2.78)\n   *    math.fix(c)                  // returns Complex 3 - 2i\n   *    math.fix(c, 1)               // returns Complex 3.2 -2.7i\n   *\n   *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]\n   *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                             Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value\n   */\n  return typed('fix', {\n    number: fixNumber.signatures.number,\n    'number, number | BigNumber': fixNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, bn) {\n      var n = bn.toNumber();\n      return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isNegative() ? ceil(x) : floor(x);\n    },\n    'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {\n      return x.isNegative() ? ceil(x, n) : floor(x, n);\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n    'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {\n      return x.s < 0 ? ceil(x, n) : floor(x, n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array | Matrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createFloorNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var floorNumber = createFloorNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 -2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   *    math.floor(math.tau, [2, 3])  // returns Array [6.28, 6.283]\n   *\n   *    // Note that floor(array, array) currently not implemented.\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed('floor', {\n    number: floorNumber.signatures.number,\n    'number,number': floorNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo01xDSid';\nvar dependencies = ['typed'];\nexport var createMatAlgo01xDSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n\n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo04xSidSid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo04xSidSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  B(i,j)       ; A(i,j) === 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo04xSidSid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(x, y, elop),\n        'Array, Array': (x, y) => matAlgo13xDD(matrix(x), matrix(y), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(matrix(x), y, elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(x, matrix(y), elop)\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(x, y, elop, false);\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(x, y, elop, false);\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(matrix(x), y, elop, false);\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(y, x, elop, true);\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(matrix(y), x, elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, y, self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), matrix(y), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), y, self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, matrix(y), self);\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(x, y, self, false);\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(x, y, self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(matrix(x), y, self, false);\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(y, x, self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(matrix(y), x, self, true);\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo13xDD';\nvar dependencies = ['typed'];\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  return function matAlgo13xDD(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      }\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': (x, y) => x.lcm(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'matAlgo06xS0S0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo06xS0S0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo06xS0S0(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, cindex, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, cindex, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log10Number } from '../../plain/number/index.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex: _Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log2Number } from '../../plain/number/index.js';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { modNumber } from '../../plain/number/index.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo03xDSf';\nvar dependencies = ['typed'];\nexport var createMatAlgo03xDSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo03xDSf(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (DenseMatrix)\n    var cdata = [];\n\n    // initialize dense matrix\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      }\n      // process workspace\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo05xSfSf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo05xSfSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo05xSfSf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values A(:,j)\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // push index\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop values B(:,j)\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row existed in A\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        }\n        // update workspace\n        wb[i] = mark;\n        // check we need to process values\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // marks\n          var wai = wa[i];\n          var wbi = wb[i];\n          // check Aij or Bij are nonzero\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero;\n            // Cij\n            var vc = cf(va, vb);\n            // check for zero\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n    return dot(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);\n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    }\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij = void 0;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n\n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y));\n\n      // use dense matrix implementation\n      var m = selfMM(matrix(x), matrix(y));\n      // return array or scalar\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { signNumber } from '../../plain/number/index.js';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber,\n    complex,\n    Fraction: _Fraction\n  } = _ref;\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    // deep map collection, skip zeros since sign(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    Unit: typed.referToSelf(self => x => {\n      if (!x._isDerived() && x.units[0].unit.offset !== 0) {\n        throw new TypeError('sign is ambiguous for units with offset');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, if you want the matrix square root of a square matrix,\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\n   * a matrix M, use `math.map(M, math.sqrt)`.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { squareNumber } from '../../plain/number/index.js';\nvar name = 'square';\nvar dependencies = ['typed'];\nexport var createSquare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the square of a value, `x * x`.\n   * To avoid confusion with multiplying a square matrix by itself,\n   * this function does not apply to matrices. If you wish to square\n   * every element of a matrix, see the examples.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2)           // returns number 4\n   *    math.square(3)           // returns number 9\n   *    math.pow(3, 2)           // returns number 9\n   *    math.multiply(3, 3)      // returns number 9\n   *\n   *    math.map([1, 2, 3, 4], math.square)  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Unit}\n   *            Squared value\n   */\n  return typed(name, {\n    number: squareNumber,\n    Complex: function Complex(x) {\n      return x.mul(x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.times(x);\n    },\n    Fraction: function Fraction(x) {\n      return x.mul(x);\n    },\n    Unit: function Unit(x) {\n      return x.pow(2);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { xgcdNumber } from '../../plain/number/index.js';\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createXgcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = xgcdNumber(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var\n    // used to swap two variables\n    t;\n    var\n    // quotient\n    q;\n    var\n    // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    multiplyScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: multiplyScalar,\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo09xS0Sf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo09xS0Sf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n      return new BigNumber(0);\n    }\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n      return y;\n    }\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n      return x;\n    }\n  }\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n    return x.isFinite() ? y : x;\n  }\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n  var minBits, maxBits, minSign;\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  BigNumber.config({\n    precision: prevPrec\n  });\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n  return outVal;\n}\n\n/* Extracted from decimal.js, and edited to specialize. */\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n  var r = a[0] + '';\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n    r += s;\n  }\n  var j = r.length;\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  }\n\n  // Convert from base 10 (decimal) to base 2\n  var arr = [0];\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n  return arr.reverse();\n}\n\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero()) {\n    return y;\n  }\n  if (y.isZero()) {\n    return x;\n  }\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n  var negOne = new BigNumber(-1);\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n  return x.times(new BigNumber(2).pow(y));\n}\n\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n    return new BigNumber(0);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n  return x.div(new BigNumber(2).pow(y)).floor();\n}","import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { bitNotNumber } from '../../plain/number/index.js';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { bitOrBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitOrNumber } from '../../plain/number/index.js';\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createBitOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }));\n});","import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitXorNumber } from '../../plain/number/index.js';\nvar name = 'bitXor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createBitXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2)               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitXorNumber,\n    'BigNumber, BigNumber': bigBitXor\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo07xSSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n\n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'arg';\nvar dependencies = ['typed'];\nexport var createArg = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'im';\nvar dependencies = ['typed'];\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\n   *    math.re(math.complex(2.4))     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  return typed(name, {\n    number: () => 0,\n    'BigNumber | Fraction': x => x.mul(0),\n    Complex: x => x.im,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 're';\nvar dependencies = ['typed'];\nexport var createRe = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.re,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { notNumber } from '../../plain/number/index.js';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    'null | undefined': () => true,\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { xorNumber } from '../../plain/number/index.js';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}","import { factory } from '../../utils/factory.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix(clone(value)), column).valueOf();\n    }\n  });\n\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    validateIndex(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'count';\nvar dependencies = ['typed', 'size', 'prod'];\nexport var createCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    prod\n  } = _ref;\n  /**\n   * Count the number of elements of a matrix, array or string.\n   *\n   * Syntax:\n   *\n   *     math.count(x)\n   *\n   * Examples:\n   *\n   *     math.count('hello world')        // returns 11\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.count(A)                    // returns 6\n   *     math.count(math.range(1,6))      // returns 5\n   *\n   * See also:\n   *\n   *     size\n   *\n   * @param {string | Array | Matrix} x  A matrix or string\n   * @return {number} An integer with the elements in `x`.\n   */\n  return typed(name, {\n    string: function string(x) {\n      return x.length;\n    },\n    'Matrix | Array': function MatrixArray(x) {\n      return prod(size(x));\n    }\n  });\n});","import { arraySize, squeeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nexport var createCross = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply\n  } = _ref;\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n  function _cross(x, y) {\n    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);\n    x = squeeze(x);\n    y = squeeze(y);\n    var xSize = arraySize(x);\n    var ySize = arraySize(y);\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});","import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'diag';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createDiag = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n   *    math.diag(a)   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, identity\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  return typed(name, {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    Array: function Array(x) {\n      return _diag(x, 0, arraySize(x), null);\n    },\n    'Array, number': function ArrayNumber(x, k) {\n      return _diag(x, k, arraySize(x), null);\n    },\n    'Array, BigNumber': function ArrayBigNumber(x, k) {\n      return _diag(x, k.toNumber(), arraySize(x), null);\n    },\n    'Array, string': function ArrayString(x, format) {\n      return _diag(x, 0, arraySize(x), format);\n    },\n    'Array, number, string': function ArrayNumberString(x, k, format) {\n      return _diag(x, k, arraySize(x), format);\n    },\n    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), arraySize(x), format);\n    },\n    Matrix: function Matrix(x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n    'Matrix, number': function MatrixNumber(x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n    'Matrix, BigNumber': function MatrixBigNumber(x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n    'Matrix, string': function MatrixString(x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n    'Matrix, number, string': function MatrixNumberString(x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag(x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError('Second parameter in function diag must be an integer');\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    if (format && format !== 'sparse' && format !== 'dense') {\n      throw new TypeError(\"Unknown matrix type \".concat(format, \"\\\"\"));\n    }\n\n    // create diagonal matrix\n    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage()) {\n          return matrix(dm, format);\n        }\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n});","import { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}","import { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Flatten a multidimensional matrix into a single dimensional matrix.\n   * A new matrix is returned, the original matrix is left untouched.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(x);\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(x.toArray());\n      // TODO: return the same matrix type as x (Dense or Sparse Matrix)\n      return matrix(flat);\n    }\n  });\n});","import { maxArgumentCount } from '../../utils/function.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n  recurse(array, []);\n}","import { factory } from '../../utils/factory.js';\nimport { getArrayDataType } from '../../utils/array.js';\nimport { typeOf } from '../../utils/is.js';\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nexport var createGetMatrixDataType = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Find the data type of all elements in a matrix or array,\n   * for example 'number' if all items are a number and 'Complex' if all values\n   * are complex numbers.\n   * If a matrix contains more than one data type, it will return 'mixed'.\n   *\n   * Syntax:\n   *\n   *    math.getMatrixDataType(x)\n   *\n   * Examples:\n   *\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\n   *    const mixedX = [ [1, true], [2, 3] ]\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\n   *    const sparse = math.sparse(x)\n   *    const dense = math.matrix(x)\n   *    math.getMatrixDataType(x)   // returns 'number'\n   *    math.getMatrixDataType(sparse)   // returns 'number'\n   *    math.getMatrixDataType(dense)   // returns 'number'\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\n   *\n   * See also:\n   *  SparseMatrix, DenseMatrix\n   *\n   * @param {...Matrix | Array} x   The Matrix with values.\n   *\n   * @return {string} A string representation of the matrix type\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return getArrayDataType(x, typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});","import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n      case 1:\n        return _identity(size[0], size[0], format);\n      case 2:\n        return _identity(size[0], size[1], format);\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n\n    // check we need to return a matrix\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    // create and resize array\n    var res = resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n});","import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nexport var createKron = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiplyScalar\n  } = _ref;\n  /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4])\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n\n  /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if (size(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n    if (size(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n    if (size(a).length > 2 || size(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});","import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a new matrix or array with the results of a callback function executed on\n   * each entry of a given matrix/array.\n   *\n   * For each entry of the input, the callback is invoked with three arguments:\n   * the value of the entry, the index at which that entry occurs, and the full\n   * matrix/array being traversed. Note that because the matrix/array might be\n   * multidimensional, the \"index\" argument is always an array of numbers giving\n   * the index in each dimension. This is true even for vectors: the \"index\"\n   * argument is an array of length 1, rather than simply a number.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   *    // The calling convention for the callback can cause subtleties:\n   *    math.map([1, 2, 3], math.format)\n   *    // throws TypeError: map attempted to call 'format(1,[0])' but argument 2 of type Array does not match expected type number or function or Object or string or boolean\n   *    // [This happens because `format` _can_ take a second argument,\n   *    // but its semantics don't match that of the 2nd argument `map` provides]\n   *\n   *    // To avoid this error, use a function that takes exactly the\n   *    // desired arguments:\n   *    math.map([1, 2, 3], x => math.format(x)) // returns ['1', '2', '3']\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The input to iterate on.\n   * @param {Function} callback\n   *     The function to call (as described above) on each entry of the input\n   * @return {Matrix | array}\n   *     Transformed map of x; always has the same type and shape as x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      try {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, array);\n        }\n      } catch (err) {\n        // But maybe the arguments still weren't right\n        if (err instanceof TypeError && 'data' in err && err.data.category === 'wrongType') {\n          var newmsg = \"map attempted to call '\".concat(err.data.fn, \"(\").concat(value);\n          var indexString = JSON.stringify(index);\n          if (args === 2) {\n            newmsg += ',' + indexString;\n          } else if (args !== 1) {\n            newmsg += \",\".concat(indexString, \",\").concat(array);\n          }\n          newmsg += \")' but argument \".concat(err.data.index + 1, \" of type \");\n          newmsg += \"\".concat(err.data.actual, \" does not match expected type \");\n          newmsg += err.data.expected.join(' or ');\n          throw new TypeError(newmsg);\n        }\n        throw err;\n      }\n    }\n  };\n  return recurse(array, []);\n}","import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nexport var createDiff = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number\n  } = _ref;\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns Matrix [1, 2, 3, -7]\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @param {number} dim            Dimension\n   * @return {Array | Matrix}       Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if (isMatrix(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!isInteger(dim)) throw new RangeError('Dimension must be a whole number');\n      if (isMatrix(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array, BigNumber': typed.referTo('Array,number', selfAn => (arr, dim) => selfAn(arr, number(dim))),\n    'Matrix, BigNumber': typed.referTo('Matrix,number', selfMn => (arr, dim) => selfMn(arr, number(dim)))\n  });\n\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n  function _recursive(arr, dim) {\n    if (isMatrix(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(element => {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if (isMatrix(obj1)) obj1 = obj1.toArray();\n    if (isMatrix(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n    var result = [];\n    var size = arr1.length;\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n    return result;\n  }\n});","import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones()                    // returns []\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    var fn;\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});","export function noBignumber() {\n  throw new Error('No \"bignumber\" implementation available');\n}\nexport function noFraction() {\n  throw new Error('No \"fraction\" implementation available');\n}\nexport function noMatrix() {\n  throw new Error('No \"matrix\" implementation available');\n}\nexport function noIndex() {\n  throw new Error('No \"index\" implementation available');\n}\nexport function noSubset() {\n  throw new Error('No \"matrix\" implementation available');\n}","import { reshape as arrayReshape } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4])\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\n   *     math.reshape(x, [2, 2, 2])\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\n   *    // returns Matrix [[1, 2], [3, 4]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension. One -1 is allowed as wildcard,\n   *                                which calculates this dimension automatically.\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      return x.reshape(sizes, true);\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return arrayReshape(x, sizes);\n    }\n  });\n});","import { isBigNumber, isMatrix } from '../../utils/is.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nimport { resize as arrayResize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    matrix\n  } = _ref;\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    }\n\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    }\n\n    // check result should be a matrix\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n    var len = size[0];\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n      return res;\n    } else {\n      return str;\n    }\n  }\n});","/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nexport function ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;","import { factory } from '../../utils/factory.js';\nimport { arraySize } from '../../utils/array.js';\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nexport var createRotate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    multiply,\n    rotationMatrix\n  } = _ref;\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns [-12, 11]\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns [-12, 11]\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns [0, 1, 0]\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns Matrix [0, 1, 0]\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns [cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)]\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? arraySize(v) : v.size();\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});","import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    addScalar,\n    unaryMinus,\n    norm,\n    BigNumber,\n    matrix,\n    DenseMatrix,\n    SparseMatrix,\n    cos,\n    sin\n  } = _ref;\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n      _validateVector(matrixV);\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n      _validateVector(matrixV);\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n  function _validateVector(v) {\n    var size = v.size();\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n  function _mul(array) {\n    return array.reduce((p, curr) => multiplyScalar(p, curr));\n  }\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n    return data;\n  }\n\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createRow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    validateIndex(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { noMatrix } from '../../utils/noop.js';\nvar name = 'size';\nvar dependencies = ['typed', 'config', '?matrix'];\nexport var createSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix\n  } = _ref;\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3)                  // returns []\n   *     math.size('hello world')        // returns [11]\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.size(A)                    // returns [2, 3]\n   *     math.size(math.range(1,6))      // returns [5]\n   *\n   * See also:\n   *\n   *     count, resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  return typed(name, {\n    Matrix: function Matrix(x) {\n      return x.create(x.size());\n    },\n    Array: arraySize,\n    string: function string(x) {\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\n    },\n    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {\n      // scalar\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\n    }\n  });\n});","import { clone } from '../../utils/object.js';\nimport { squeeze as arraySqueeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'squeeze';\nvar dependencies = ['typed', 'matrix'];\nexport var createSqueeze = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3])           // returns 3\n   *     math.squeeze([[3]])         // returns 3\n   *\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\n   *\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return arraySqueeze(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var res = arraySqueeze(x.toArray());\n      // FIXME: return the same type of matrix as the input\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    any: function any(x) {\n      // scalar\n      return clone(x);\n    }\n  });\n});","import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]] and e = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}","import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed(name, {\n    Array: x => transposeMatrix(matrix(x)).valueOf(),\n    Matrix: transposeMatrix,\n    any: clone // scalars\n  });\n\n  function transposeMatrix(x) {\n    // matrix size\n    var size = x.size();\n\n    // result\n    var c;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        c = x.clone();\n        break;\n      case 2:\n        {\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n        }\n        break;\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(size) + ')');\n    }\n    return c;\n  }\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    }\n    // return matrix\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    }\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    }\n    // return matrix\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'ctranspose';\nvar dependencies = ['typed', 'transpose', 'conj'];\nexport var createCtranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    transpose,\n    conj\n  } = _ref;\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n  return typed(name, {\n    any: function any(x) {\n      return conj(transpose(x));\n    }\n  });\n});","import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros()                   // returns []\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...(number|BigNumber) | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n    _validate(size);\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n});\n\n// TODO: zeros contains almost the same code as ones. Reuse this?","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I\n  } = _ref;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    }\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n  /**\n   * Calculate N-dimensional inverse fourier transform\n   *\n   * Syntax:\n   *\n   *     math.ifft(arr)\n   *\n   * Examples:\n   *\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\n   *\n   * See Also:\n   *\n   *      fft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});","/* eslint-disable no-loss-of-precision */\n\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNaN,\n    isNumeric\n  } = _ref;\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are multiple modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n    var count = {};\n    var mode = [];\n    var max = 0;\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n      count[value]++;\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n    return mode;\n  }\n});","import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    numeric\n  } = _ref;\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], math.prod)\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});","import { typeOf } from '../../../utils/is.js';\n\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\nexport function improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n  if (String(err).indexOf('Unexpected type') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n  if (String(err).indexOf('complex numbers') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n  return err;\n}","import { format as formatString } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'format';\nvar dependencies = ['typed'];\nexport var createFormat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - `'fixed'`\n   *        Always use regular number notation.\n   *        For example `'123.40'` and `'14000000'`\n   *      - `'exponential'`\n   *        Always use exponential notation.\n   *        For example `'1.234e+2'` and `'1.4e+7'`\n   *      - `'engineering'`\n   *        Always use engineering notation: always have exponential notation,\n   *        and select the exponent to be a multiple of `3`.\n   *        For example `'123.4e+0'` and `'14.0e+6'`\n   *      - `'auto'` (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example `'123.4'` and `'1.4e7'`.\n   *      - `'bin'`, `'oct'`, or `'hex'`\n   *        Format the number using binary, octal, or hexadecimal notation.\n   *        For example `'0b1101'` and `'0x10fe'`.\n   *    - `wordSize: number`\n   *      The word size in bits to use for formatting in binary, octal, or\n   *      hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`\n   *      values for `notation` option. When this option is defined the value\n   *      is formatted as a signed twos complement integer of the given word\n   *      size and the size suffix is appended to the output.\n   *      For example `format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'`.\n   *      Default value is undefined.\n   *    - `precision: number`\n   *      Limit the number of digits of the formatted value.\n   *      For regular numbers, must be a number between `0` and `16`.\n   *      For bignumbers, the maximum depends on the configured precision,\n   *      see function `config()`.\n   *      In case of notations `'exponential'`, `'engineering'`, and `'auto'`,\n   *      `precision` defines the total number of significant digits returned.\n   *      In case of notation `'fixed'`, `precision` defines the number of\n   *      significant digits after the decimal point.\n   *      `precision` is undefined by default.\n   *    - `lowerExp: number`\n   *      Exponent determining the lower boundary for formatting a value with\n   *      an exponent when `notation='auto'`. Default value is `-3`.\n   *    - `upperExp: number`\n   *      Exponent determining the upper boundary for formatting a value with\n   *      an exponent when `notation='auto'`. Default value is `5`.\n   *    - `fraction: string`. Available values: `'ratio'` (default) or `'decimal'`.\n   *      For example `format(fraction(1, 3))` will output `'1/3'` when `'ratio'`\n   *      is configured, and will output `'0.(3)'` when `'decimal'` is configured.\n   *    - `truncate: number`. Specifies the maximum allowed length of the\n   *      returned string. If it had been longer, the excess characters\n   *      are deleted and replaced with `'...'`.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4)                                        // returns '6.4'\n   *    math.format(1240000)                                    // returns '1.24e+6'\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3)                                     // returns '0.333'\n   *    math.format(21385, 2)                                   // returns '21000'\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\n   *    math.format(12400, {notation: 'engineering'})           // returns '12.4e+3'\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2)\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n  return typed(name, {\n    any: formatString,\n    'any, Object | function | number': formatString\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as binary.\n *\n * Syntax:\n *\n *    math.bin(value)\n *\n * Examples:\n *\n *    //the following outputs \"0b10\"\n *    math.bin(2)\n *\n * See also:\n *\n *    oct\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createBin = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize\n      });\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize\n      });\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'hex';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as hexadecimal.\n *\n * Syntax:\n *\n *    math.hex(value)\n *\n * Examples:\n *\n *    math.hex(240) // returns \"0xF0\"\n *\n * See also:\n *\n *    oct\n *    bin\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createHex = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'hex'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'hex',\n        wordSize\n      });\n    }\n  });\n});","import { format } from '../../utils/string.js';\nimport { isString } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'print';\nvar dependencies = ['typed'];\nexport var createPrint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Interpolate values into a string template.\n   *\n   * Syntax:\n   *\n   *     math.print(template, values)\n   *     math.print(template, values, precision)\n   *     math.print(template, values, options)\n   *\n   * Example usage:\n   *\n   *     // the following outputs: 'Lucy is 5 years old'\n   *     math.print('Lucy is $age years old', {age: 5})\n   *\n   *     // the following outputs: 'The value of pi is 3.141592654'\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)\n   *\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n   *     math.print('Hello $user.name! The date is $date', {\n   *       user: {\n   *         name: 'Mary',\n   *       },\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n   *     })\n   *\n   *     // the following outputs: 'My favorite fruits are apples and bananas !'\n   *     math.print('My favorite fruits are $0 and $1 !', [\n   *       'apples',\n   *       'bananas'\n   *     ])\n   *\n   * See also:\n   *\n   *     format\n   *\n   * @param {string} template           A string containing variable placeholders.\n   * @param {Object | Array | Matrix}   values An object or array containing variables\n   *                                    which will be filled in in the template.\n   * @param {number | Object} [options] Formatting options,\n   *                                    or the number of digits to format numbers.\n   *                                    See function math.format for a description\n   *                                    of all options.\n   * @return {string} Interpolated string\n   */\n  return typed(name, {\n    // note: Matrix will be converted automatically to an Array\n    'string, Object | Array': _print,\n    'string, Object | Array, number | Object': _print\n  });\n});\n\n/**\n * Interpolate values into a string template.\n * @param {string} template\n * @param {Object} values\n * @param {number | Object} [options]\n * @returns {string} Interpolated string\n * @private\n */\nfunction _print(template, values, options) {\n  return template.replace(/\\$([\\w.]+)/g, function (original, key) {\n    var keys = key.split('.');\n    var value = values[keys.shift()];\n    while (keys.length && value !== undefined) {\n      var k = keys.shift();\n      value = k ? value[k] : value + '.';\n    }\n    if (value !== undefined) {\n      if (!isString(value)) {\n        return format(value, options);\n      } else {\n        return value;\n      }\n    }\n    return original;\n  });\n}","import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n        return accumulator;\n      }\n\n      // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n      var bases = null;\n      // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { arraySize as size } from '../../utils/array.js';\nimport { powNumber } from '../../plain/number/index.js';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    identity,\n    multiply,\n    matrix,\n    inv,\n    number,\n    fraction,\n    Complex\n  } = _ref;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * To avoid confusion with the matrix logarithm, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Complex} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(self(x), self(base));\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log1p as _log1p } from '../../utils/number.js';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    log,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(self(x), log(base));\n    })\n  });\n\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'nthRoots';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createNthRoots = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Each function here returns a real multiple of i as a Complex value.\n   * @param  {number} val\n   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n   */\n  // This is used to fix float artifacts for zero-valued components.\n  var _calculateExactResult = [function realPos(val) {\n    return new Complex(val, 0);\n  }, function imagPos(val) {\n    return new Complex(0, val);\n  }, function realNeg(val) {\n    return new Complex(-val, 0);\n  }, function imagNeg(val) {\n    return new Complex(0, -val);\n  }];\n\n  /**\n   * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n   * @param  {Complex} a\n   * @param  {number} root\n   * @return {Array} array of n Complex Roots\n   */\n  function _nthComplexRoots(a, root) {\n    if (root < 0) throw new Error('Root must be greater than zero');\n    if (root === 0) throw new Error('Root must be non-zero');\n    if (root % 1 !== 0) throw new Error('Root must be an integer');\n    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];\n    var aIsNumeric = typeof a === 'number';\n    var offset;\n    // determine the offset (argument of a)/(pi/2)\n    if (aIsNumeric || a.re === 0 || a.im === 0) {\n      if (aIsNumeric) {\n        offset = 2 * +(a < 0); // numeric value on the real axis\n      } else if (a.im === 0) {\n        offset = 2 * +(a.re < 0); // complex value on the real axis\n      } else {\n        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n      }\n    }\n\n    var arg = a.arg();\n    var abs = a.abs();\n    var roots = [];\n    var r = Math.pow(abs, 1 / root);\n    for (var k = 0; k < root; k++) {\n      var halfPiFactor = (offset + 4 * k) / root;\n      /**\n       * If (offset + 4*k)/root is an integral multiple of pi/2\n       * then we can produce a more exact result.\n       */\n      if (halfPiFactor === Math.round(halfPiFactor)) {\n        roots.push(_calculateExactResult[halfPiFactor % 4](r));\n        continue;\n      }\n      roots.push(new Complex({\n        r,\n        phi: (arg + 2 * Math.PI * k) / root\n      }));\n    }\n    return roots;\n  }\n\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    math.nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    // ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex}            Rounded value\n   */\n  return typed(name, {\n    Complex: function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    matrix,\n    pow,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var powScalarSignatures = {};\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n  var powScalar = typed(powScalarSignatures);\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    divideScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: divideScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolve(a, b)  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lsolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseForwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j + 1; i < rows; i++) {\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // degenerate row, we can choose any value\n        xj = 0;\n      }\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n        // matrix values & indices (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first and last index in the column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j]\n        for (var k = firstIndex; k < lastIndex; k++) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i > j) {\n            // store lower triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, l = jIndices.length; _k < l; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n    var rows = mSize[0];\n    var columns = mSize[1];\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n    var data = [];\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data;\n\n      // 1-dim vector\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n\n      // 2-dim column\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n            return new DenseMatrix({\n              data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          return b;\n        }\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n          return new DenseMatrix({\n            data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolve(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolve(a, b)  // [[8], [9]]\n   *\n   * See also:\n   *\n   *    usolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseBackwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // value at [j, j]\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // zero value at j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n\n        // upper triangular matrix values & index (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j], loop backwards\n        for (var k = lastIndex - 1; k >= firstIndex; k--) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i < j) {\n            // store upper triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolveAll(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]\n   *\n   * See also:\n   *\n   *    lsolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var R = _denseForwardSubstitution(m, b);\n      return R.map(r => r.valueOf());\n    }\n  });\n  function _denseForwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // loop columns\n    for (var i = 0; i < columns; i++) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], M[i][i]);\n          for (var j = i + 1; j < columns; j++) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j = i + 1; _j < columns; _j++) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n  function _sparseForwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // loop columns\n    for (var i = 0; i < columns; i++) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        // values & indices (column i)\n        var iValues = [];\n        var iIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1];\n\n        // find the value at [i, i]\n        var Mii = 0;\n        for (var j = firstIndex; j < lastIndex; j++) {\n          var J = index[j];\n          // check row\n          if (J === i) {\n            Mii = values[j];\n          } else if (J > i) {\n            // store lower triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], Mii);\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolveAll(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]\n   *\n   * See also:\n   *\n   *    usolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var R = _denseBackwardSubstitution(m, b);\n      return R.map(r => r.valueOf());\n    }\n  });\n  function _denseBackwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // loop columns backwards\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], M[i][i]);\n          for (var j = i - 1; j >= 0; j--) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n          for (var _j = i - 1; _j >= 0; _j--) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n  function _sparseBackwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // loop columns backwards\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length;\n\n      // loop right-hand sides\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        // values & indices (column i)\n        var iValues = [];\n        var iIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1];\n\n        // find the value at [i, i]\n        var Mii = 0;\n        for (var j = lastIndex - 1; j >= firstIndex; j--) {\n          var J = index[j];\n          // check row\n          if (J === i) {\n            Mii = values[j];\n          } else if (J < i) {\n            // store upper triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n\n          b[i] = divideScalar(b[i], Mii);\n\n          // loop upper triangular\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          // loop upper triangular\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n          B.push(bNew);\n        }\n      }\n    }\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});","import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo08xS0Sid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo08xS0Sid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo08xS0Sid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nexport var createUseMatrixForArrayScalar = /* #__PURE__ */factory('useMatrixForArrayScalar', ['typed', 'matrix'], _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  return {\n    'Array, number': typed.referTo('DenseMatrix, number', selfDn => (x, y) => selfDn(matrix(x), y).valueOf()),\n    'Array, BigNumber': typed.referTo('DenseMatrix, BigNumber', selfDB => (x, y) => selfDB(matrix(x), y).valueOf()),\n    'number, Array': typed.referTo('number, DenseMatrix', selfnD => (x, y) => selfnD(x, matrix(y)).valueOf()),\n    'BigNumber, Array': typed.referTo('BigNumber, DenseMatrix', selfBD => (x, y) => selfBD(x, matrix(y)).valueOf())\n  };\n});","import { rightArithShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { rightArithShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightArithShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightArithShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n   */\n  return typed(name, {\n    'number, number': rightArithShiftNumber,\n    'BigNumber, BigNumber': rightArithShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    BigNumber,\n    Fraction,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, createCompareNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","import naturalSort from 'javascript-natural-sort';\nimport { isDenseMatrix, isSparseMatrix, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compareNatural';\nvar dependencies = ['typed', 'compare'];\nexport var createCompareNatural = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compare\n  } = _ref;\n  var compareBooleans = compare.signatures['boolean,boolean'];\n\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, {\n    'any, any': _compareNatural\n  }); // just to check # args\n\n  function _compareNatural(x, y) {\n    var typeX = typeOf(x);\n    var typeY = typeOf(y);\n    var c;\n\n    // numeric types\n    if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n      c = compare(x, y);\n      if (c.toString() !== '0') {\n        // c can be number, BigNumber, or Fraction\n        return c > 0 ? 1 : -1; // return a number\n      } else {\n        return naturalSort(typeX, typeY);\n      }\n    }\n\n    // matrix types\n    var matTypes = ['Array', 'DenseMatrix', 'SparseMatrix'];\n    if (matTypes.includes(typeX) || matTypes.includes(typeY)) {\n      c = compareMatricesAndArrays(_compareNatural, x, y);\n      if (c !== 0) {\n        return c;\n      } else {\n        return naturalSort(typeX, typeY);\n      }\n    }\n\n    // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n    if (typeX !== typeY) {\n      return naturalSort(typeX, typeY);\n    }\n    if (typeX === 'Complex') {\n      return compareComplexNumbers(x, y);\n    }\n    if (typeX === 'Unit') {\n      if (x.equalBase(y)) {\n        return _compareNatural(x.value, y.value);\n      }\n\n      // compare by units\n      return compareArrays(_compareNatural, x.formatUnits(), y.formatUnits());\n    }\n    if (typeX === 'boolean') {\n      return compareBooleans(x, y);\n    }\n    if (typeX === 'string') {\n      return naturalSort(x, y);\n    }\n    if (typeX === 'Object') {\n      return compareObjects(_compareNatural, x, y);\n    }\n    if (typeX === 'null') {\n      return 0;\n    }\n    if (typeX === 'undefined') {\n      return 0;\n    }\n\n    // this should not occur...\n    throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n  }\n\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareMatricesAndArrays(compareNatural, x, y) {\n    if (isSparseMatrix(x) && isSparseMatrix(y)) {\n      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);\n    }\n    if (isSparseMatrix(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x.toArray(), y);\n    }\n    if (isSparseMatrix(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x, y.toArray());\n    }\n\n    // convert DenseArray into Array\n    if (isDenseMatrix(x)) {\n      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);\n    }\n    if (isDenseMatrix(y)) {\n      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);\n    }\n\n    // convert scalars to array\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays(compareNatural, [x], y);\n    }\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(compareNatural, x, [y]);\n    }\n    return compareArrays(compareNatural, x, y);\n  }\n\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareArrays(compareNatural, x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    // compare the size of the arrays\n    if (x.length > y.length) {\n      return 1;\n    }\n    if (x.length < y.length) {\n      return -1;\n    }\n\n    // both Arrays have equal size and content\n    return 0;\n  }\n\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareObjects(compareNatural, x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y);\n\n    // compare keys\n    keysX.sort(naturalSort);\n    keysY.sort(naturalSort);\n    var c = compareArrays(compareNatural, keysX, keysY);\n    if (c !== 0) {\n      return c;\n    }\n\n    // compare values\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n    return 0;\n  }\n});\n\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n  if (x.re < y.re) {\n    return -1;\n  }\n  if (x.im > y.im) {\n    return 1;\n  }\n  if (x.im < y.im) {\n    return -1;\n  }\n  return 0;\n}","/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n","import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\n_compareText.signature = 'any, any';\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, _compareText, matrixAlgorithmSuite({\n    elop: _compareText,\n    Ds: true\n  }));\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, _compareText);\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n  return typed(name, createEqualNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: equalScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n      if (y === null) {\n        return x === null;\n      }\n      if (x === undefined) {\n        return y === undefined;\n      }\n      if (y === undefined) {\n        return x === undefined;\n      }\n      return equalScalar(x, y);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'equalText';\nvar dependencies = ['typed', 'compareText', 'isZero'];\nexport var createEqualText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareText,\n    isZero\n  } = _ref;\n  /**\n   * Check equality of two strings. Comparison is case sensitive.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.equalText(x, y)\n   *\n   * Examples:\n   *\n   *    math.equalText('Hello', 'Hello')     // returns true\n   *    math.equalText('a', 'A')             // returns false\n   *    math.equal('2e3', '2000')            // returns true\n   *    math.equalText('2e3', '2000')        // returns false\n   *\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    equal, compareText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'larger';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createLarger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  return typed(name, createLargerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x > y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'largerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createLargerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  return typed(name, createLargerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x >= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equal\n  } = _ref;\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n        if (len !== y.length) {\n          return false;\n        }\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n      if (y === null) {\n        return x !== null;\n      }\n      if (x === undefined) {\n        return y !== undefined;\n      }\n      if (y === undefined) {\n        return x !== undefined;\n      }\n      return !equalScalar(x, y);\n    }\n  });\n});","import { isMatrix } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nexport var createPartitionSelect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric,\n    isNaN,\n    compare\n  } = _ref;\n  var asc = compare;\n  var desc = (a, b) => -compare(a, b);\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n    if (isMatrix(x)) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    // check for NaN values since these can cause an infinite while loop\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n    return arr[k];\n  }\n});","import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sort';\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\nexport var createSort = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    compare,\n    compareNatural\n  } = _ref;\n  var compareAsc = compare;\n  var compareDesc = (a, b) => -compare(a, b);\n\n  /**\n   * Sort the items in a matrix.\n   *\n   * Syntax:\n   *\n   *    math.sort(x)\n   *    math.sort(x, compare)\n   *\n   * Examples:\n   *\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\n   *    // returns ['A', 'B', 'C', 'D']\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\n   *    // returns ['Tom', 'Sara', 'Langdon']\n   *\n   * See also:\n   *\n   *    filter, forEach, map, compare, compareNatural\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\n   *        An optional _comparator function or name. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {Matrix | Array} Returns the sorted matrix.\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      _arrayIsVector(x);\n      return x.sort(compareAsc);\n    },\n    Matrix: function Matrix(x) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n    'Array, function': function ArrayFunction(x, _comparator) {\n      _arrayIsVector(x);\n      return x.sort(_comparator);\n    },\n    'Matrix, function': function MatrixFunction(x, _comparator) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n    'Array, string': function ArrayString(x, order) {\n      _arrayIsVector(x);\n      return x.sort(_comparator(order));\n    },\n    'Matrix, string': function MatrixString(x, order) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n\n  /**\n   * Get the comparator for given order ('asc', 'desc', 'natural')\n   * @param {'asc' | 'desc' | 'natural'} order\n   * @return {Function} Returns a _comparator function\n   */\n  function _comparator(order) {\n    if (order === 'asc') {\n      return compareAsc;\n    } else if (order === 'desc') {\n      return compareDesc;\n    } else if (order === 'natural') {\n      return compareNatural;\n    } else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n\n  /**\n   * Validate whether an array is one dimensional\n   * Throws an error when this is not the case\n   * @param {Array} array\n   * @private\n   */\n  function _arrayIsVector(array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n\n  /**\n   * Validate whether a matrix is one dimensional\n   * Throws an error when this is not the case\n   * @param {Matrix} matrix\n   * @private\n   */\n  function _matrixIsVector(matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n});","import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multidimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n      return _max(args);\n    }\n  });\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n    return res;\n  }\n});","import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    smaller\n  } = _ref;\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multidimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n      return _min(args);\n    }\n  });\n\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof min === 'string') {\n      min = numeric(min, config.number);\n    }\n    return min;\n  }\n});","import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index);\n          // check result is a matrix\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n          return m;\n        }\n      // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});","import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    addScalar,\n    equalScalar,\n    FibonacciHeap\n  } = _ref;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n    var value = simp._denormalize(simp.value);\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n    // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { memoize } from '../function.js';\n\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\nexport var createBigNumberE = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, {\n  hasher\n});\n\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\nexport var createBigNumberPhi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, {\n  hasher\n});\n\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\nexport var createBigNumberPi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, {\n  hasher\n});\n\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\nexport var createBigNumberTau = memoize(function (BigNumber) {\n  return createBigNumberPi(BigNumber).times(2);\n}, {\n  hasher\n});\n\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\nfunction hasher(args) {\n  return args[0].precision;\n}","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit'];\n\n// This function is named createUnitFunction to prevent a naming conflict with createUnit\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Note that a Sparse Matrix is always 2-dimensional, so for example if\n   * you create one from a plain array of _n_ numbers, you get an _n_ by 1\n   * Sparse \"column vector\".\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *    let v = math.sparse([0, 0, 1])\n   *    v.size()                        // Array [3, 1]\n   *    v.get([2, 0])                   // number 1\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *     math.createUnit('km', math.unit(1000, 'm'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, UnitDefinition, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * To avoid confusion with the matrix arccosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5)           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)) // returns number 1.5\n   *\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc cosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { acoshNumber } from '../../plain/number/index.js';\nvar name = 'acosh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n      return new Complex(x, 0).acosh();\n    },\n    Complex: function Complex(x) {\n      return x.acosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acosh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * To avoid confusion with the matrix arccotanget, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 1.1071487177940904\n   *    math.acot(2)             // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | BigNumber| Complex} x   Function input\n   * @return {number | BigNumber| Complex} The arc cotangent of x\n   */\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { acothNumber } from '../../plain/number/index.js';\nvar name = 'acoth';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccotangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * To avoid confusion with the matrix hyperbolic arccotangent, this\n   * function does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5)       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccotangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return acothNumber(x);\n      }\n      return new Complex(x, 0).acoth();\n    },\n    Complex: function Complex(x) {\n      return x.acoth();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atanh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { acscNumber } from '../../plain/number/index.js';\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * To avoid confusion with the matrix arccosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(2)             // returns 0.5235987755982989\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return acscNumber(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { acschNumber } from '../../plain/number/index.js';\nvar name = 'acsch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix hyperbolic arccosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5)       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x\n   */\n  return typed(name, {\n    number: acschNumber,\n    Complex: function Complex(x) {\n      return x.acsch();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asinh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { asecNumber } from '../../plain/number/index.js';\nvar name = 'asec';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * To avoid confusion with the matrix arcsecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(2)             // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)) // returns 1.5\n   *\n   *    math.asec(0.5)           // returns Complex 0 + 1.3169578969248166i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc secant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return asecNumber(x);\n      }\n      return new Complex(x, 0).asec();\n    },\n    Complex: function Complex(x) {\n      return x.asec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acos();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'asin';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAsin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * To avoid confusion with the matric arcsine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5)           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)) // returns number ~1.5\n   *\n   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc sine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.asin(x);\n      } else {\n        return new Complex(x, 0).asin();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.asin();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asin();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\n   */\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'atan';\nvar dependencies = ['typed'];\nexport var createAtan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * To avoid confusion with matrix arctangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createAtan2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  return typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored\n    // the imaginary.\n\n    'BigNumber, BigNumber': (y, x) => BigNumber.atan2(y, x)\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { atanhNumber } from '../../plain/number/index.js';\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * To avoid confusion with the matrix hyperbolic arctangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5)       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cos';\nvar dependencies = ['typed'];\nexport var createCos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * To avoid confusion with the matrix cosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosine of x\n   */\n  return typed(name, {\n    number: Math.cos,\n    'Complex | BigNumber': x => x.cos()\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nexport var createTrigUnit = /* #__PURE__ */factory('trigUnit', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    Unit: typed.referToSelf(self => x => {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosine of x\n   */\n  return typed(name, {\n    number: coshNumber,\n    'Complex | BigNumber': x => x.cosh()\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { cotNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * To avoid confusion with the matrix cotangent, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  return typed(name, {\n    number: cotNumber,\n    Complex: x => x.cot(),\n    BigNumber: x => new _BigNumber(1).div(x.tan())\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nimport { cothNumber } from '../../plain/number/index.js';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cotangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x\n   */\n  return typed(name, {\n    number: cothNumber,\n    Complex: x => x.coth(),\n    BigNumber: x => new _BigNumber(1).div(x.tanh())\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { cscNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * To avoid confusion with the matrix cosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosecant of x\n   */\n  return typed(name, {\n    number: cscNumber,\n    Complex: x => x.csc(),\n    BigNumber: x => new _BigNumber(1).div(x.sin())\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nimport { cschNumber } from '../../plain/number/index.js';\nvar name = 'csch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosecant of a value,\n   * defined as `csch(x) = 1 / sinh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csch(x)\n   *\n   * Examples:\n   *\n   *    // csch(x) = 1/ sinh(x)\n   *    math.csch(0.5)       // returns 1.9190347513349437\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\n   *\n   * See also:\n   *\n   *    sinh, sech, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x\n   */\n  return typed(name, {\n    number: cschNumber,\n    Complex: x => x.csch(),\n    BigNumber: x => new _BigNumber(1).div(x.sinh())\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * To avoid confusion with the matrix secant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic secant, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\n   */\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sin';\nvar dependencies = ['typed'];\nexport var createSin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * To avoid confusion with the matrix sine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Sine of x\n   */\n  return typed(name, {\n    number: Math.sin,\n    'Complex | BigNumber': x => x.sin()\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nimport { sinhNumber } from '../../plain/number/index.js';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic sine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic sine of x\n   */\n  return typed(name, {\n    number: sinhNumber,\n    'Complex | BigNumber': x => x.sinh()\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'tan';\nvar dependencies = ['typed'];\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * To avoid confusion with the matrix tangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Tangent of x\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': x => x.tan()\n  }, trigUnit);\n});","import { factory } from '../../utils/factory.js';\nimport { tanh as _tanh } from '../../utils/number.js';\nvar name = 'tanh';\nvar dependencies = ['typed'];\nexport var createTanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * To avoid confusion with matrix hyperbolic tangent, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic tangent of x\n   */\n  return typed('tanh', {\n    number: _tanh,\n    'Complex | BigNumber': x => x.tanh()\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays\n   * and the values will be sorted in ascending order before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});","import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      }\n      // return an array, if the input was an array\n      if (Array.isArray(a)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});","import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIntersect';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\n        // of any of them is empty, return empty\n        result = [];\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              result.push(b1[i]);\n              break;\n            }\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});","import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetMultiplicity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n      return count;\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetPowerset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n\n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareNatural\n  } = _ref;\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSymDifference';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];\nexport var createSetSymDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nexport var createSetUnion = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setIntersect,\n    setSymDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    equalScalar,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { flatten } from '../../utils/array.js';\nimport { isComplex } from '../../utils/is.js';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    sqrt,\n    smaller,\n    isPositive\n  } = _ref;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: _hypot,\n    Matrix: M => _hypot(flatten(M.toArray()))\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n    for (var i = 0; i < args.length; i++) {\n      if (isComplex(args[i])) {\n        throw new TypeError('Unexpected type of argument to hypot');\n      }\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n    return multiplyScalar(largest, sqrt(result));\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0;\n        // skip zeros since abs(0) === 0\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    }\n    // invalid parameter value\n    throw new Error('Unsupported parameter value');\n  }\n\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = [];\n    // result\n    var maxc = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = [];\n    // result\n    var maxr = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size();\n\n    // check if it is a vector\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    }\n    // MxN matrix\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n    var ySize = _size(y);\n    var xLen, yLen;\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined;\n\n    // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt;\n      // find signatures that matches (dt, dt)\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // both vectors 1-dimensional\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n      return c;\n    }\n\n    // a is 1-dim, b is column\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n      return _c;\n    }\n\n    // a is column, b is 1-dim\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n      return _c2;\n    }\n\n    // both vectors are column\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n      return _c3;\n    }\n  }\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values;\n\n    // TODO optimize add & mul using datatype\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n      if (I < J) {\n        i++;\n        continue;\n      }\n      if (I > J) {\n        j++;\n        continue;\n      }\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n    return c;\n  }\n\n  // TODO remove this once #1771 is fixed\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});","import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    add\n  } = _ref;\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0;\n            // loop diagonal\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            }\n            // return trace\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { isBigNumber, isMatrix } from '../../../utils/is.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});","import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { deepStrictEqual } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMap } from '../../utils/map.js';\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nexport var createNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    mathWithTransform\n  } = _ref;\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n  function _validateScope(scope) {\n    for (var symbol of [...keywords]) {\n      if (scope.has(symbol)) {\n        throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n      }\n    }\n  }\n  class Node {\n    get type() {\n      return 'Node';\n    }\n    get isNode() {\n      return true;\n    }\n\n    /**\n     * Evaluate the node\n     * @param {Object} [scope]  Scope to read/write variables\n     * @return {*}              Returns the result\n     */\n    evaluate(scope) {\n      return this.compile().evaluate(scope);\n    }\n\n    /**\n     * Compile the node into an optimized, evauatable JavaScript function\n     * @return {{evaluate: function([Object])}} object\n     *                Returns an object with a function 'evaluate',\n     *                which can be invoked as expr.evaluate([scope: Object]),\n     *                where scope is an optional object with\n     *                variables.\n     */\n    compile() {\n      var expr = this._compile(mathWithTransform, {});\n      var args = {};\n      var context = null;\n      function evaluate(scope) {\n        var s = createMap(scope);\n        _validateScope(s);\n        return expr(s, args, context);\n      }\n      return {\n        evaluate\n      };\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      throw new Error('Method _compile must be implemented by type ' + this.type);\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run forEach on a Node interface');\n    }\n\n    /**\n     * Create a new Node whose children are the results of calling the\n     * provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {OperatorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot run map on a Node interface');\n    }\n\n    /**\n     * Validate whether an object is a Node, for use with map\n     * @param {Node} node\n     * @returns {Node} Returns the input if it's a node, else throws an Error\n     * @protected\n     */\n    _ifNode(node) {\n      if (!isNode(node)) {\n        throw new TypeError('Callback function must return a Node');\n      }\n      return node;\n    }\n\n    /**\n     * Recursively traverse all nodes in a node tree. Executes given callback for\n     * this node and each of its child nodes.\n     * @param {function(node: Node, path: string, parent: Node)} callback\n     *          A callback called for every node in the node tree.\n     */\n    traverse(callback) {\n      // execute callback for itself\n      // eslint-disable-next-line\n      callback(this, null, null);\n\n      // recursively traverse over all children of a node\n      function _traverse(node, callback) {\n        node.forEach(function (child, path, parent) {\n          callback(child, path, parent);\n          _traverse(child, callback);\n        });\n      }\n      _traverse(this, callback);\n    }\n\n    /**\n     * Recursively transform a node tree via a transform function.\n     *\n     * For example, to replace all nodes of type SymbolNode having name 'x' with\n     * a ConstantNode with value 2:\n     *\n     *     const res = Node.transform(function (node, path, parent) {\n     *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n     *         return new ConstantNode(2)\n     *       }\n     *       else {\n     *         return node\n     *       }\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *          A mapping function accepting a node, and returning\n     *          a replacement for the node or the original node. The \"signature\"\n     *          of the callback must be:\n     *          callback(node: Node, index: string, parent: Node) : Node\n     * @return {Node} Returns the original node or its replacement\n     */\n    transform(callback) {\n      function _transform(child, path, parent) {\n        var replacement = callback(child, path, parent);\n        if (replacement !== child) {\n          // stop iterating when the node is replaced\n          return replacement;\n        }\n        return child.map(_transform);\n      }\n      return _transform(this, null, null);\n    }\n\n    /**\n     * Find any node in the node tree matching given filter function. For\n     * example, to find all nodes of type SymbolNode having name 'x':\n     *\n     *     const results = Node.filter(function (node) {\n     *       return (node && node.isSymbolNode) && (node.name === 'x')\n     *     })\n     *\n     * @param {function(node: Node, path: string, parent: Node) : Node} callback\n     *            A test function returning true when a node matches, and false\n     *            otherwise. Function signature:\n     *            callback(node: Node, index: string, parent: Node) : boolean\n     * @return {Node[]} nodes\n     *            An array with nodes matching given filter criteria\n     */\n    filter(callback) {\n      var nodes = [];\n      this.traverse(function (node, path, parent) {\n        if (callback(node, path, parent)) {\n          nodes.push(node);\n        }\n      });\n      return nodes;\n    }\n\n    /**\n     * Create a shallow clone of this node\n     * @return {Node}\n     */\n    clone() {\n      // must be implemented by each of the Node implementations\n      throw new Error('Cannot clone a Node interface');\n    }\n\n    /**\n     * Create a deep clone of this node\n     * @return {Node}\n     */\n    cloneDeep() {\n      return this.map(function (node) {\n        return node.cloneDeep();\n      });\n    }\n\n    /**\n     * Deep compare this node with another node.\n     * @param {Node} other\n     * @return {boolean} Returns true when both nodes are of the same type and\n     *                   contain the same values (as do their childs)\n     */\n    equals(other) {\n      return other ? this.type === other.type && deepStrictEqual(this, other) : false;\n    }\n\n    /**\n     * Get string representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toString(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toString(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n     * implementations of Node\n     * @returns {Object}\n     */\n    toJSON() {\n      throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n    }\n\n    /**\n     * Get HTML representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\" or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toHTML(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this.toHTML(options);\n    }\n\n    /**\n     * Internal function to generate the string output.\n     * This has to be implemented by every Node\n     *\n     * @throws {Error}\n     */\n    _toString() {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toString not implemented for ' + this.type);\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     *\n     * This function can get an object of the following form:\n     * {\n     *    handler: //This can be a callback function of the form\n     *             // \"function callback(node, options)\"or\n     *             // a map that maps function names (used in FunctionNodes)\n     *             // to callbacks\n     *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n     * }\n     *\n     * @param {Object} [options]\n     * @return {string}\n     */\n    toTex(options) {\n      var customString = this._getCustomString(options);\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n      return this._toTex(options);\n    }\n\n    /**\n     * Internal function to generate the LaTeX output.\n     * This has to be implemented by every Node\n     *\n     * @param {Object} [options]\n     * @throws {Error}\n     */\n    _toTex(options) {\n      // must be implemented by each of the Node implementations\n      throw new Error('_toTex not implemented for ' + this.type);\n    }\n\n    /**\n     * Helper used by `to...` functions.\n     */\n    _getCustomString(options) {\n      if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            return;\n          case 'function':\n            return options.handler(this, options);\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n      }\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type;\n    }\n\n    /**\n     * Get the content of the current Node.\n     * @return {Node} node\n     **/\n    getContent() {\n      return this;\n    }\n  }\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});","// Reserved keywords not allowed to use in the parser\nexport var keywords = new Set(['end']);","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  class AccessorNode extends Node {\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    constructor(object, index) {\n      super();\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n      this.object = object;\n      this.index = index;\n    }\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAccessorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index._compile(math, argNames);\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          // we pass just object here instead of context:\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n\n    /**\n     * Create a new AccessorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AccessorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AccessorNode}\n     */\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n      return object + this.index.toString(options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return object + this.index.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n      return object + this.index.toTex(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n\n    /**\n     * Instantiate an AccessorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n     *     where mathjs is optional\n     * @returns {AccessorNode}\n     */\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n  }\n  _defineProperty(AccessorNode, \"name\", name);\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { getSafeProperty } from '../../../utils/customs.js';\nexport function accessFactory(_ref) {\n  var {\n    subset\n  } = _ref;\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","import { IndexError } from '../../../error/IndexError.js';\n\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error | IndexError} Returns the transformed error\n */\nexport function errorTransform(err) {\n  if (err && err.isIndexError) {\n    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);\n  }\n  return err;\n}","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ArrayNode extends Node {\n    /**\n     * @constructor ArrayNode\n     * @extends {Node}\n     * Holds an 1-dimensional array with items\n     * @param {Node[]} [items]   1 dimensional array with items\n     */\n    constructor(items) {\n      super();\n      this.items = items || [];\n\n      // validate input\n      if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected');\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isArrayNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalItems = map(this.items, function (item) {\n        return item._compile(math, argNames);\n      });\n      var asMatrix = math.config.matrix !== 'Array';\n      if (asMatrix) {\n        var matrix = math.matrix;\n        return function evalArrayNode(scope, args, context) {\n          return matrix(map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          }));\n        };\n      } else {\n        return function evalArrayNode(scope, args, context) {\n          return map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          });\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.items.length; i++) {\n        var node = this.items[i];\n        callback(node, 'items[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new ArrayNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ArrayNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var items = [];\n      for (var i = 0; i < this.items.length; i++) {\n        items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n      }\n      return new ArrayNode(items);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ArrayNode}\n     */\n    clone() {\n      return new ArrayNode(this.items.slice(0));\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      var items = this.items.map(function (node) {\n        return node.toString(options);\n      });\n      return '[' + items.join(', ') + ']';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        items: this.items\n      };\n    }\n\n    /**\n     * Instantiate an ArrayNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n     *                       where mathjs is optional\n     * @returns {ArrayNode}\n     */\n    static fromJSON(json) {\n      return new ArrayNode(json.items);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      var items = this.items.map(function (node) {\n        return node.toHTML(options);\n      });\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      function itemsToTex(items, nested) {\n        var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n        var itemsFormRow = nested || mixedItems;\n        var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n        var itemsTex = items.map(function (node) {\n          if (node.items) {\n            return itemsToTex(node.items, !nested);\n          } else {\n            return node.toTex(options);\n          }\n        }).join(itemSep);\n        return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n      }\n      return itemsToTex(this.items, false);\n    }\n  }\n  _defineProperty(ArrayNode, \"name\", name);\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n      var evalValue = this.value._compile(math, argNames);\n      var name = this.object.name;\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          // Important:  we pass childObject instead of context:\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp);\n            // Important: we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            // Important: we pass parent instead of context:\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex);\n            // Important:  we pass childObject instead of context\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n      callback(this.value, 'value', this);\n    }\n\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n      var value = this._ifNode(callback(this.value, 'value', this));\n      return new AssignmentNode(object, index, value);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n      return object + index + ' = ' + value;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n      return object + index + ':=' + value;\n    }\n  }\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { setSafeProperty } from '../../../utils/customs.js';\nexport function assignFactory(_ref) {\n  var {\n    subset,\n    matrix\n  } = _ref;\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        // we use matrix.subset here instead of the function subset because we must not clone the contents\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","// list of identifiers of nodes in order of their precedence\n// also contains information about left/right associativity\n// and which other operator the operator is associative with\n// Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators\n// are right associative\n//\n// It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's!\n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\nimport { hasOwnProperty } from '../utils/object.js';\nimport { isConstantNode, isParenthesisNode, rule2Node } from '../utils/is.js';\nexport var properties = [{\n  // assignment\n  AssignmentNode: {},\n  FunctionAssignmentNode: {}\n}, {\n  // conditional expression\n  ConditionalNode: {\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false\n    // conditionals don't need parentheses in LaTeX because\n    // they are 2 dimensional\n  }\n}, {\n  // logical or\n  'OperatorNode:or': {\n    op: 'or',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical xor\n  'OperatorNode:xor': {\n    op: 'xor',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical and\n  'OperatorNode:and': {\n    op: 'and',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise or\n  'OperatorNode:bitOr': {\n    op: '|',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise xor\n  'OperatorNode:bitXor': {\n    op: '^|',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise and\n  'OperatorNode:bitAnd': {\n    op: '&',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // relational operators\n  'OperatorNode:equal': {\n    op: '==',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:unequal': {\n    op: '!=',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smaller': {\n    op: '<',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:larger': {\n    op: '>',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smallerEq': {\n    op: '<=',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:largerEq': {\n    op: '>=',\n    associativity: 'left',\n    associativeWith: []\n  },\n  RelationalNode: {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitshift operators\n  'OperatorNode:leftShift': {\n    op: '<<',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightArithShift': {\n    op: '>>',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightLogShift': {\n    op: '>>>',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unit conversion\n  'OperatorNode:to': {\n    op: 'to',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // range\n  RangeNode: {}\n}, {\n  // addition, subtraction\n  'OperatorNode:add': {\n    op: '+',\n    associativity: 'left',\n    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n  },\n  'OperatorNode:subtract': {\n    op: '-',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // multiply, divide, modulus\n  'OperatorNode:multiply': {\n    op: '*',\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']\n  },\n  'OperatorNode:divide': {\n    op: '/',\n    associativity: 'left',\n    associativeWith: [],\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false\n    // fractions don't require parentheses because\n    // they're 2 dimensional, so parens aren't needed\n    // in LaTeX\n  },\n\n  'OperatorNode:dotMultiply': {\n    op: '.*',\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']\n  },\n  'OperatorNode:dotDivide': {\n    op: './',\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:mod': {\n    op: 'mod',\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // Repeat multiplication for implicit multiplication\n  'OperatorNode:multiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']\n  }\n}, {\n  // unary prefix operators\n  'OperatorNode:unaryPlus': {\n    op: '+',\n    associativity: 'right'\n  },\n  'OperatorNode:unaryMinus': {\n    op: '-',\n    associativity: 'right'\n  },\n  'OperatorNode:bitNot': {\n    op: '~',\n    associativity: 'right'\n  },\n  'OperatorNode:not': {\n    op: 'not',\n    associativity: 'right'\n  }\n}, {\n  // exponentiation\n  'OperatorNode:pow': {\n    op: '^',\n    associativity: 'right',\n    associativeWith: [],\n    latexRightParens: false\n    // the exponent doesn't need parentheses in\n    // LaTeX because it's 2 dimensional\n    // (it's on top)\n  },\n\n  'OperatorNode:dotPow': {\n    op: '.^',\n    associativity: 'right',\n    associativeWith: []\n  }\n}, {\n  // factorial\n  'OperatorNode:factorial': {\n    op: '!',\n    associativity: 'left'\n  }\n}, {\n  // matrix transpose\n  'OperatorNode:ctranspose': {\n    op: \"'\",\n    associativity: 'left'\n  }\n}];\n\n/**\n * Returns the first non-parenthesis internal node, but only\n * when the 'parenthesis' option is unset or auto.\n * @param {Node} _node\n * @param {string} parenthesis\n * @return {Node}\n */\nfunction unwrapParen(_node, parenthesis) {\n  if (!parenthesis || parenthesis !== 'auto') return _node;\n  var node = _node;\n  while (isParenthesisNode(node)) {\n    node = node.content;\n  }\n  return node;\n}\n\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node} _node\n * @param {string} parenthesis\n * @param {string} implicit\n * @param {Node} parent (for determining context for implicit multiplication)\n * @return {number | null}\n */\nexport function getPrecedence(_node, parenthesis, implicit, parent) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  var precedence = null;\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      precedence = i;\n      break;\n    }\n  }\n  // Bump up precedence of implicit multiplication, except when preceded\n  // by a \"Rule 2\" fraction ( [unaryOp]constant / constant )\n  if (identifier === 'OperatorNode:multiply' && node.implicit && implicit !== 'show') {\n    var leftArg = unwrapParen(node.args[0], parenthesis);\n    if (!(isConstantNode(leftArg) && parent && parent.getIdentifier() === 'OperatorNode:divide' && rule2Node(unwrapParen(parent.args[0], parenthesis))) && !(leftArg.getIdentifier() === 'OperatorNode:divide' && rule2Node(unwrapParen(leftArg.args[0], parenthesis)) && isConstantNode(unwrapParen(leftArg.args[1])))) {\n      precedence += 1;\n    }\n  }\n  return precedence;\n}\n\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node} _node\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\nexport function getAssociativity(_node, parenthesis) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifier];\n  if (hasOwnProperty(property, 'associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n    if (property.associativity === 'right') {\n      return 'right';\n    }\n    // associativity is invalid\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\'' + property.associativity + '\\'.');\n  }\n\n  // associativity is undefined\n  return null;\n}\n\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {boolean | null}\n */\nexport function isAssociativeWith(nodeA, nodeB, parenthesis) {\n  // ParenthesisNodes are only ignored when not in 'keep' mode\n  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;\n  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifierA];\n  if (hasOwnProperty(property, 'associativeWith') && property.associativeWith instanceof Array) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // associativeWith is not defined\n  return null;\n}\n\n/**\n * Get the operator associated with a function name.\n * Returns a string with the operator symbol, or null if the\n * input is not the name of a function associated with an\n * operator.\n *\n * @param {string} Function name\n * @return {string | null} Associated operator symbol, if any\n */\nexport function getOperator(fn) {\n  var identifier = 'OperatorNode:' + fn;\n  for (var group of properties) {\n    if (identifier in group) {\n      return group[identifier].op;\n    }\n  }\n  return null;\n}","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n  class BlockNode extends Node {\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    constructor(blocks) {\n      super();\n      // validate input, copy blocks\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n        return {\n          node,\n          visible\n        };\n      });\n    }\n    get type() {\n      return name;\n    }\n    get isBlockNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalBlocks = map(this.blocks, function (block) {\n        return {\n          evaluate: block.node._compile(math, argNames),\n          visible: block.visible\n        };\n      });\n      return function evalBlockNodes(scope, args, context) {\n        var results = [];\n        forEach(evalBlocks, function evalBlockNode(block) {\n          var result = block.evaluate(scope, args, context);\n          if (block.visible) {\n            results.push(result);\n          }\n        });\n        return new ResultSet(results);\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child blocks of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.blocks.length; i++) {\n        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n      }\n    }\n\n    /**\n     * Create a new BlockNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {BlockNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var blocks = [];\n      for (var i = 0; i < this.blocks.length; i++) {\n        var block = this.blocks[i];\n        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n        blocks[i] = {\n          node,\n          visible: block.visible\n        };\n      }\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {BlockNode}\n     */\n    clone() {\n      var blocks = this.blocks.map(function (block) {\n        return {\n          node: block.node,\n          visible: block.visible\n        };\n      });\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toString(options) + (param.visible ? '' : ';');\n      }).join('\\n');\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        blocks: this.blocks\n      };\n    }\n\n    /**\n     * Instantiate an BlockNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n     *     where mathjs is optional\n     * @returns {BlockNode}\n     */\n    static fromJSON(json) {\n      return new BlockNode(json.blocks);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n      }).join('<span class=\"math-separator\"><br /></span>');\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toTex(options) + (param.visible ? '' : ';');\n      }).join('\\\\;\\\\;\\n');\n    }\n  }\n  _defineProperty(BlockNode, \"name\", name);\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isBigNumber, isComplex, isNode, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'ConditionalNode';\nvar dependencies = ['Node'];\nexport var createConditionalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  /**\n   * Test whether a condition is met\n   * @param {*} condition\n   * @returns {boolean} true if condition is true or non-zero, else false\n   */\n  function testCondition(condition) {\n    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {\n      return !!condition;\n    }\n    if (condition) {\n      if (isBigNumber(condition)) {\n        return !condition.isZero();\n      }\n      if (isComplex(condition)) {\n        return !!(condition.re || condition.im);\n      }\n      if (isUnit(condition)) {\n        return !!condition.value;\n      }\n    }\n    if (condition === null || condition === undefined) {\n      return false;\n    }\n    throw new TypeError('Unsupported type of condition \"' + typeOf(condition) + '\"');\n  }\n  class ConditionalNode extends Node {\n    /**\n     * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n     *\n     * @param {Node} condition   Condition, must result in a boolean\n     * @param {Node} trueExpr    Expression evaluated when condition is true\n     * @param {Node} falseExpr   Expression evaluated when condition is true\n     *\n     * @constructor ConditionalNode\n     * @extends {Node}\n     */\n    constructor(condition, trueExpr, falseExpr) {\n      super();\n      if (!isNode(condition)) {\n        throw new TypeError('Parameter condition must be a Node');\n      }\n      if (!isNode(trueExpr)) {\n        throw new TypeError('Parameter trueExpr must be a Node');\n      }\n      if (!isNode(falseExpr)) {\n        throw new TypeError('Parameter falseExpr must be a Node');\n      }\n      this.condition = condition;\n      this.trueExpr = trueExpr;\n      this.falseExpr = falseExpr;\n    }\n    get type() {\n      return name;\n    }\n    get isConditionalNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalCondition = this.condition._compile(math, argNames);\n      var evalTrueExpr = this.trueExpr._compile(math, argNames);\n      var evalFalseExpr = this.falseExpr._compile(math, argNames);\n      return function evalConditionalNode(scope, args, context) {\n        return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.condition, 'condition', this);\n      callback(this.trueExpr, 'trueExpr', this);\n      callback(this.falseExpr, 'falseExpr', this);\n    }\n\n    /**\n     * Create a new ConditionalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ConditionalNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ConditionalNode}\n     */\n    clone() {\n      return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n\n      // Enclose Arguments in parentheses if they are an OperatorNode\n      // or have lower or equal precedence\n      // NOTE: enclosing all OperatorNodes in parentheses is a decision\n      // purely based on aesthetics and readability\n      var condition = this.condition.toString(options);\n      var conditionPrecedence = getPrecedence(this.condition, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n        condition = '(' + condition + ')';\n      }\n      var trueExpr = this.trueExpr.toString(options);\n      var truePrecedence = getPrecedence(this.trueExpr, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n        trueExpr = '(' + trueExpr + ')';\n      }\n      var falseExpr = this.falseExpr.toString(options);\n      var falsePrecedence = getPrecedence(this.falseExpr, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n        falseExpr = '(' + falseExpr + ')';\n      }\n      return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        condition: this.condition,\n        trueExpr: this.trueExpr,\n        falseExpr: this.falseExpr\n      };\n    }\n\n    /**\n     * Instantiate an ConditionalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"ConditionalNode\",\n     *      \"condition\": ...,\n     *      \"trueExpr\": ...,\n     *      \"falseExpr\": ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {ConditionalNode}\n     */\n    static fromJSON(json) {\n      return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n\n      // Enclose Arguments in parentheses if they are an OperatorNode\n      // or have lower or equal precedence\n      // NOTE: enclosing all OperatorNodes in parentheses is a decision\n      // purely based on aesthetics and readability\n      var condition = this.condition.toHTML(options);\n      var conditionPrecedence = getPrecedence(this.condition, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n        condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      var trueExpr = this.trueExpr.toHTML(options);\n      var truePrecedence = getPrecedence(this.trueExpr, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n        trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      var falseExpr = this.falseExpr.toHTML(options);\n      var falsePrecedence = getPrecedence(this.falseExpr, parenthesis, options && options.implicit);\n      if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n        falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      return '\\\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;' + this.condition.toTex(options) + '}\\\\\\\\{' + this.falseExpr.toTex(options) + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n    }\n  }\n  _defineProperty(ConditionalNode, \"name\", name);\n  return ConditionalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ConstantNode extends Node {\n    /**\n     * A ConstantNode holds a constant value like a number or string.\n     *\n     * Usage:\n     *\n     *     new ConstantNode(2.3)\n     *     new ConstantNode('hello')\n     *\n     * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n     * @constructor ConstantNode\n     * @extends {Node}\n     */\n    constructor(value) {\n      super();\n      this.value = value;\n    }\n    get type() {\n      return name;\n    }\n    get isConstantNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var value = this.value;\n      return function evalConstantNode() {\n        return value;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // nothing to do, we don't have any children\n    }\n\n    /**\n     * Create a new ConstantNode with children produced by the given callback.\n     * Trivial because there are no children.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ConstantNode} Returns a clone of the node\n     */\n    map(callback) {\n      return this.clone();\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ConstantNode}\n     */\n    clone() {\n      return new ConstantNode(this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      return format(this.value, options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var value = this._toString(options);\n      switch (typeOf(this.value)) {\n        case 'number':\n        case 'BigNumber':\n        case 'Fraction':\n          return '<span class=\"math-number\">' + value + '</span>';\n        case 'string':\n          return '<span class=\"math-string\">' + value + '</span>';\n        case 'boolean':\n          return '<span class=\"math-boolean\">' + value + '</span>';\n        case 'null':\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\n        case 'undefined':\n          return '<span class=\"math-undefined\">' + value + '</span>';\n        default:\n          return '<span class=\"math-symbol\">' + value + '</span>';\n      }\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate a ConstantNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n     *                       where mathjs is optional\n     * @returns {ConstantNode}\n     */\n    static fromJSON(json) {\n      return new ConstantNode(json.value);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var value = this._toString(options);\n      switch (typeOf(this.value)) {\n        case 'string':\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\n        case 'number':\n        case 'BigNumber':\n          {\n            if (!isFinite(this.value)) {\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n            }\n            var index = value.toLowerCase().indexOf('e');\n            if (index !== -1) {\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n            }\n          }\n          return value;\n        case 'Fraction':\n          return this.value.toLatex();\n        default:\n          return value;\n      }\n    }\n  }\n  _defineProperty(ConstantNode, \"name\", name);\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","/* eslint no-template-curly-in-string: \"off\" */\n\nimport escapeLatexLib from 'escape-latex';\nimport { hasOwnProperty } from './object.js';\nexport var latexSymbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: '\\\\Upsilon',\n  upsilon: '\\\\upsilon',\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  true: '\\\\mathrm{True}',\n  false: '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  undefined: '\\\\mathbf{?}'\n};\nexport var latexOperators = {\n  transpose: '^\\\\top',\n  ctranspose: '^H',\n  factorial: '!',\n  pow: '^',\n  dotPow: '.^\\\\wedge',\n  // TODO find ideal solution\n  unaryPlus: '+',\n  unaryMinus: '-',\n  bitNot: '\\\\~',\n  // TODO find ideal solution\n  not: '\\\\neg',\n  multiply: '\\\\cdot',\n  divide: '\\\\frac',\n  // TODO how to handle that properly?\n  dotMultiply: '.\\\\cdot',\n  // TODO find ideal solution\n  dotDivide: '.:',\n  // TODO find ideal solution\n  mod: '\\\\mod',\n  add: '+',\n  subtract: '-',\n  to: '\\\\rightarrow',\n  leftShift: '<<',\n  rightArithShift: '>>',\n  rightLogShift: '>>>',\n  equal: '=',\n  unequal: '\\\\neq',\n  smaller: '<',\n  larger: '>',\n  smallerEq: '\\\\leq',\n  largerEq: '\\\\geq',\n  bitAnd: '\\\\&',\n  bitXor: '\\\\underline{|}',\n  bitOr: '|',\n  and: '\\\\wedge',\n  xor: '\\\\veebar',\n  or: '\\\\vee'\n};\nexport var latexFunctions = {\n  // arithmetic\n  abs: {\n    1: '\\\\left|${args[0]}\\\\right|'\n  },\n  add: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.add, \"${args[1]}\\\\right)\")\n  },\n  cbrt: {\n    1: '\\\\sqrt[3]{${args[0]}}'\n  },\n  ceil: {\n    1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'\n  },\n  cube: {\n    1: '\\\\left(${args[0]}\\\\right)^3'\n  },\n  divide: {\n    2: '\\\\frac{${args[0]}}{${args[1]}}'\n  },\n  dotDivide: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotDivide, \"${args[1]}\\\\right)\")\n  },\n  dotMultiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotMultiply, \"${args[1]}\\\\right)\")\n  },\n  dotPow: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotPow, \"${args[1]}\\\\right)\")\n  },\n  exp: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  expm1: \"\\\\left(e\".concat(latexOperators.pow, \"{${args[0]}}-1\\\\right)\"),\n  fix: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  floor: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'\n  },\n  gcd: '\\\\gcd\\\\left(${args}\\\\right)',\n  hypot: '\\\\hypot\\\\left(${args}\\\\right)',\n  log: {\n    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n  },\n  log10: {\n    1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'\n  },\n  log1p: {\n    1: '\\\\ln\\\\left(${args[0]}+1\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}+1\\\\right)'\n  },\n  log2: '\\\\log_{2}\\\\left(${args[0]}\\\\right)',\n  mod: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.mod, \"${args[1]}\\\\right)\")\n  },\n  multiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.multiply, \"${args[1]}\\\\right)\")\n  },\n  norm: {\n    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n    2: undefined // use default template\n  },\n\n  nthRoot: {\n    2: '\\\\sqrt[${args[1]}]{${args[0]}}'\n  },\n  nthRoots: {\n    2: '\\\\{y : $y^{args[1]} = {${args[0]}}\\\\}'\n  },\n  pow: {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.pow, \"{${args[1]}}\")\n  },\n  round: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n    2: undefined // use default template\n  },\n\n  sign: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  sqrt: {\n    1: '\\\\sqrt{${args[0]}}'\n  },\n  square: {\n    1: '\\\\left(${args[0]}\\\\right)^2'\n  },\n  subtract: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.subtract, \"${args[1]}\\\\right)\")\n  },\n  unaryMinus: {\n    1: \"\".concat(latexOperators.unaryMinus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  unaryPlus: {\n    1: \"\".concat(latexOperators.unaryPlus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  // bitwise\n  bitAnd: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitAnd, \"${args[1]}\\\\right)\")\n  },\n  bitNot: {\n    1: latexOperators.bitNot + '\\\\left(${args[0]}\\\\right)'\n  },\n  bitOr: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitOr, \"${args[1]}\\\\right)\")\n  },\n  bitXor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitXor, \"${args[1]}\\\\right)\")\n  },\n  leftShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.leftShift, \"${args[1]}\\\\right)\")\n  },\n  rightArithShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightArithShift, \"${args[1]}\\\\right)\")\n  },\n  rightLogShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightLogShift, \"${args[1]}\\\\right)\")\n  },\n  // combinatorics\n  bellNumbers: {\n    1: '\\\\mathrm{B}_{${args[0]}}'\n  },\n  catalan: {\n    1: '\\\\mathrm{C}_{${args[0]}}'\n  },\n  stirlingS2: {\n    2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'\n  },\n  // complex\n  arg: {\n    1: '\\\\arg\\\\left(${args[0]}\\\\right)'\n  },\n  conj: {\n    1: '\\\\left(${args[0]}\\\\right)^*'\n  },\n  im: {\n    1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  re: {\n    1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  // logical\n  and: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.and, \"${args[1]}\\\\right)\")\n  },\n  not: {\n    1: latexOperators.not + '\\\\left(${args[0]}\\\\right)'\n  },\n  or: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.or, \"${args[1]}\\\\right)\")\n  },\n  xor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.xor, \"${args[1]}\\\\right)\")\n  },\n  // matrix\n  cross: {\n    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n  },\n  ctranspose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.ctranspose)\n  },\n  det: {\n    1: '\\\\det\\\\left(${args[0]}\\\\right)'\n  },\n  dot: {\n    2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'\n  },\n  expm: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  inv: {\n    1: '\\\\left(${args[0]}\\\\right)^{-1}'\n  },\n  pinv: {\n    1: '\\\\left(${args[0]}\\\\right)^{+}'\n  },\n  sqrtm: {\n    1: \"{${args[0]}}\".concat(latexOperators.pow, \"{\\\\frac{1}{2}}\")\n  },\n  trace: {\n    1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'\n  },\n  transpose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.transpose)\n  },\n  // probability\n  combinations: {\n    2: '\\\\binom{${args[0]}}{${args[1]}}'\n  },\n  combinationsWithRep: {\n    2: '\\\\left(\\\\!\\\\!{\\\\binom{${args[0]}}{${args[1]}}}\\\\!\\\\!\\\\right)'\n  },\n  factorial: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.factorial)\n  },\n  gamma: {\n    1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'\n  },\n  lgamma: {\n    1: '\\\\ln\\\\Gamma\\\\left(${args[0]}\\\\right)'\n  },\n  // relational\n  equal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.equal, \"${args[1]}\\\\right)\")\n  },\n  larger: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.larger, \"${args[1]}\\\\right)\")\n  },\n  largerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.largerEq, \"${args[1]}\\\\right)\")\n  },\n  smaller: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smaller, \"${args[1]}\\\\right)\")\n  },\n  smallerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smallerEq, \"${args[1]}\\\\right)\")\n  },\n  unequal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.unequal, \"${args[1]}\\\\right)\")\n  },\n  // special\n  erf: {\n    1: 'erf\\\\left(${args[0]}\\\\right)'\n  },\n  // statistics\n  max: '\\\\max\\\\left(${args}\\\\right)',\n  min: '\\\\min\\\\left(${args}\\\\right)',\n  variance: '\\\\mathrm{Var}\\\\left(${args}\\\\right)',\n  // trigonometry\n  acos: {\n    1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acosh: {\n    1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acot: {\n    1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acoth: {\n    1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsc: {\n    1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsch: {\n    1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asec: {\n    1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asech: {\n    1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asin: {\n    1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asinh: {\n    1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan: {\n    1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan2: {\n    2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'\n  },\n  atanh: {\n    1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  cos: {\n    1: '\\\\cos\\\\left(${args[0]}\\\\right)'\n  },\n  cosh: {\n    1: '\\\\cosh\\\\left(${args[0]}\\\\right)'\n  },\n  cot: {\n    1: '\\\\cot\\\\left(${args[0]}\\\\right)'\n  },\n  coth: {\n    1: '\\\\coth\\\\left(${args[0]}\\\\right)'\n  },\n  csc: {\n    1: '\\\\csc\\\\left(${args[0]}\\\\right)'\n  },\n  csch: {\n    1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'\n  },\n  sec: {\n    1: '\\\\sec\\\\left(${args[0]}\\\\right)'\n  },\n  sech: {\n    1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'\n  },\n  sin: {\n    1: '\\\\sin\\\\left(${args[0]}\\\\right)'\n  },\n  sinh: {\n    1: '\\\\sinh\\\\left(${args[0]}\\\\right)'\n  },\n  tan: {\n    1: '\\\\tan\\\\left(${args[0]}\\\\right)'\n  },\n  tanh: {\n    1: '\\\\tanh\\\\left(${args[0]}\\\\right)'\n  },\n  // unit\n  to: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.to, \"${args[1]}\\\\right)\")\n  },\n  // utils\n  numeric: function numeric(node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  },\n  // type\n  number: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  },\n  string: {\n    0: '\\\\mathtt{\"\"}',\n    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n  },\n  bignumber: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  complex: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)+\".concat(latexSymbols.i, \"\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)\")\n  },\n  matrix: {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(${args[0]}\\\\right)'\n  },\n  sparse: {\n    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  unit: {\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  }\n};\nexport var defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar latexUnits = {\n  deg: '^\\\\circ'\n};\nexport function escapeLatex(string) {\n  return escapeLatexLib(string, {\n    preserveFormatting: true\n  });\n}\n\n// @param {string} name\n// @param {boolean} isUnit\nexport function toSymbol(name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n  if (isUnit) {\n    if (hasOwnProperty(latexUnits, name)) {\n      return latexUnits[name];\n    }\n    return '\\\\mathrm{' + escapeLatex(name) + '}';\n  }\n  if (hasOwnProperty(latexSymbols, name)) {\n    return latexSymbols[name];\n  }\n  return escapeLatex(name);\n}","\"use strict\";\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"\\u2013\": \"\\\\--\",\n  \"\\u2014\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n      var paramNames = new Set();\n      for (var param of params) {\n        var _name = typeof param === 'string' ? param : param.name;\n        if (paramNames.has(_name)) {\n          throw new Error(\"Duplicate parameter name \\\"\".concat(_name, \"\\\"\"));\n        } else {\n          paramNames.add(_name);\n        }\n      }\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      });\n\n      // compile the function expression with the child args\n      var evalExpr = this.expr._compile(math, childArgNames);\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n          return evalExpr(scope, childArgs, context);\n        };\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n      var expr = this.expr.toHTML(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n  }\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { map } from '../../utils/array.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { isArray, isConstantNode, isMatrix, isNode, isString, typeOf } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nvar name = 'IndexNode';\nvar dependencies = ['Node', 'size'];\nexport var createIndexNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node,\n    size\n  } = _ref;\n  class IndexNode extends Node {\n    /**\n     * @constructor IndexNode\n     * @extends Node\n     *\n     * Describes a subset of a matrix or an object property.\n     * Cannot be used on its own, needs to be used within an AccessorNode or\n     * AssignmentNode.\n     *\n     * @param {Node[]} dimensions\n     * @param {boolean} [dotNotation=false]\n     *     Optional property describing whether this index was written using dot\n     *     notation like `a.b`, or using bracket notation like `a[\"b\"]`\n     *     (which is the default). This property is used for string conversion.\n     */\n    constructor(dimensions, dotNotation) {\n      super();\n      this.dimensions = dimensions;\n      this.dotNotation = dotNotation || false;\n\n      // validate input\n      if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n      }\n      if (this.dotNotation && !this.isObjectProperty()) {\n        throw new Error('dotNotation only applicable for object properties');\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isIndexNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // TODO: implement support for bignumber (currently bignumbers are silently\n      //       reduced to numbers when changing the value to zero-based)\n\n      // TODO: Optimization: when the range values are ConstantNodes,\n      //       we can beforehand resolve the zero-based value\n\n      // optimization for a simple object property\n      var evalDimensions = map(this.dimensions, function (dimension, i) {\n        var needsEnd = dimension.filter(node => node.isSymbolNode && node.name === 'end').length > 0;\n        if (needsEnd) {\n          // SymbolNode 'end' is used inside the index,\n          // like in `A[end]` or `A[end - 2]`\n          var childArgNames = Object.create(argNames);\n          childArgNames.end = true;\n          var _evalDimension = dimension._compile(math, childArgNames);\n          return function evalDimension(scope, args, context) {\n            if (!isMatrix(context) && !isArray(context) && !isString(context)) {\n              throw new TypeError('Cannot resolve \"end\": ' + 'context must be a Matrix, Array, or string but is ' + typeOf(context));\n            }\n            var s = size(context).valueOf();\n            var childArgs = Object.create(args);\n            childArgs.end = s[i];\n            return _evalDimension(scope, childArgs, context);\n          };\n        } else {\n          // SymbolNode `end` not used\n          return dimension._compile(math, argNames);\n        }\n      });\n      var index = getSafeProperty(math, 'index');\n      return function evalIndexNode(scope, args, context) {\n        var dimensions = map(evalDimensions, function (evalDimension) {\n          return evalDimension(scope, args, context);\n        });\n        return index(...dimensions);\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.dimensions.length; i++) {\n        callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new IndexNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {IndexNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var dimensions = [];\n      for (var i = 0; i < this.dimensions.length; i++) {\n        dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n      }\n      return new IndexNode(dimensions, this.dotNotation);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {IndexNode}\n     */\n    clone() {\n      return new IndexNode(this.dimensions.slice(0), this.dotNotation);\n    }\n\n    /**\n     * Test whether this IndexNode contains a single property name\n     * @return {boolean}\n     */\n    isObjectProperty() {\n      return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n    }\n\n    /**\n     * Returns the property name if IndexNode contains a property.\n     * If not, returns null.\n     * @return {string | null}\n     */\n    getObjectProperty() {\n      return this.isObjectProperty() ? this.dimensions[0].value : null;\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      // format the parameters like \"[1, 0:5]\"\n      return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        dimensions: this.dimensions,\n        dotNotation: this.dotNotation\n      };\n    }\n\n    /**\n     * Instantiate an IndexNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n     *     where mathjs is optional\n     * @returns {IndexNode}\n     */\n    static fromJSON(json) {\n      return new IndexNode(json.dimensions, json.dotNotation);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      // format the parameters like \"[1, 0:5]\"\n      var dimensions = [];\n      for (var i = 0; i < this.dimensions.length; i++) {\n        dimensions[i] = this.dimensions[i].toHTML();\n      }\n      if (this.dotNotation) {\n        return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n      } else {\n        return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n      }\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var dimensions = this.dimensions.map(function (range) {\n        return range.toTex(options);\n      });\n      return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n    }\n  }\n  _defineProperty(IndexNode, \"name\", name);\n  return IndexNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { escape, stringify } from '../../utils/string.js';\nimport { isSafeProperty } from '../../utils/customs.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ObjectNode';\nvar dependencies = ['Node'];\nexport var createObjectNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ObjectNode extends Node {\n    /**\n     * @constructor ObjectNode\n     * @extends {Node}\n     * Holds an object with keys/values\n     * @param {Object.<string, Node>} [properties]   object with key/value pairs\n     */\n    constructor(properties) {\n      super();\n      this.properties = properties || {};\n\n      // validate input\n      if (properties) {\n        if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {\n          return isNode(properties[key]);\n        })) {\n          throw new TypeError('Object containing Nodes expected');\n        }\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isObjectNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalEntries = {};\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          // we stringify/parse the key here to resolve unicode characters,\n          // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n          var stringifiedKey = stringify(key);\n          var parsedKey = JSON.parse(stringifiedKey);\n          if (!isSafeProperty(this.properties, parsedKey)) {\n            throw new Error('No access to property \"' + parsedKey + '\"');\n          }\n          evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n        }\n      }\n      return function evalObjectNode(scope, args, context) {\n        var obj = {};\n        for (var _key in evalEntries) {\n          if (hasOwnProperty(evalEntries, _key)) {\n            obj[_key] = evalEntries[_key](scope, args, context);\n          }\n        }\n        return obj;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n        }\n      }\n    }\n\n    /**\n     * Create a new ObjectNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ObjectNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var properties = {};\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n        }\n      }\n      return new ObjectNode(properties);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ObjectNode}\n     */\n    clone() {\n      var properties = {};\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this.properties[key];\n        }\n      }\n      return new ObjectNode(properties);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      var entries = [];\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n        }\n      }\n      return '{' + entries.join(', ') + '}';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        properties: this.properties\n      };\n    }\n\n    /**\n     * Instantiate an OperatorNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n     *                       where mathjs is optional\n     * @returns {ObjectNode}\n     */\n    static fromJSON(json) {\n      return new ObjectNode(json.properties);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      var entries = [];\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-property-assignment-operator math-binary-operator\">' + ':</span>' + this.properties[key].toHTML(options));\n        }\n      }\n      return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var entries = [];\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n        }\n      }\n      var tex = '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n      return tex;\n    }\n  }\n  _defineProperty(ObjectNode, \"name\", name);\n  return ObjectNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode, isConstantNode, isOperatorNode, isParenthesisNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  /**\n   * Returns true if the expression starts with a constant, under\n   * the current parenthesization:\n   * @param {Node} expression\n   * @param {string} parenthesis\n   * @return {boolean}\n   */\n  function startsWithConstant(expr, parenthesis) {\n    var curNode = expr;\n    if (parenthesis === 'auto') {\n      while (isParenthesisNode(curNode)) {\n        curNode = curNode.content;\n      }\n    }\n    if (isConstantNode(curNode)) return true;\n    if (isOperatorNode(curNode)) {\n      return startsWithConstant(curNode.args[0], parenthesis);\n    }\n    return false;\n  }\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis, implicit);\n    var associativity = getAssociativity(root, parenthesis);\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n          default:\n            return true;\n        }\n      });\n    }\n    var result;\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          }\n\n          // otherwise, no parens needed\n          result = [false];\n        }\n        break;\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n          var lhsPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n          // is the root node associative with the left hand side\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n          var rhsPrecedence = getPrecedence(args[1], parenthesis, implicit, root);\n          // is the root node associative with the right hand side?\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          }\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex) {\n            var _rootIdentifier;\n            var lhsIdentifier;\n            var rhsIdentifier;\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n          result = [lhsParens, rhsParens];\n        }\n        break;\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis, implicit, root);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n            return false;\n          });\n        }\n        break;\n    }\n\n    // Handles an edge case of parentheses with implicit multiplication\n    // of ConstantNode.\n    // In that case, parenthesize ConstantNodes that follow an unparenthesized\n    // expression, even though they normally wouldn't be printed.\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis !== 'all' && implicit === 'hide') {\n      for (var i = 1; i < result.length; ++i) {\n        if (startsWithConstant(args[i], parenthesis) && !result[i - 1] && (parenthesis !== 'keep' || !isParenthesisNode(args[i - 1]))) {\n          result[i] = true;\n        }\n      }\n    }\n    return result;\n  }\n  class OperatorNode extends Node {\n    /**\n     * @constructor OperatorNode\n     * @extends {Node}\n     * An operator with two arguments, like 2+3\n     *\n     * @param {string} op           Operator name, for example '+'\n     * @param {string} fn           Function name, for example 'add'\n     * @param {Node[]} args         Operator arguments\n     * @param {boolean} [implicit]  Is this an implicit multiplication?\n     * @param {boolean} [isPercentage] Is this an percentage Operation?\n     */\n    constructor(op, fn, args, implicit, isPercentage) {\n      super();\n      // validate input\n      if (typeof op !== 'string') {\n        throw new TypeError('string expected for parameter \"op\"');\n      }\n      if (typeof fn !== 'string') {\n        throw new TypeError('string expected for parameter \"fn\"');\n      }\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.implicit = implicit === true;\n      this.isPercentage = isPercentage === true;\n      this.op = op;\n      this.fn = fn;\n      this.args = args || [];\n    }\n    get type() {\n      return name;\n    }\n    get isOperatorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // validate fn\n      if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n        if (!math[this.fn]) {\n          throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n        } else {\n          throw new Error('No access to function \"' + this.fn + '\"');\n        }\n      }\n      var fn = getSafeProperty(math, this.fn);\n      var evalArgs = map(this.args, function (arg) {\n        return arg._compile(math, argNames);\n      });\n      if (evalArgs.length === 1) {\n        var evalArg0 = evalArgs[0];\n        return function evalOperatorNode(scope, args, context) {\n          return fn(evalArg0(scope, args, context));\n        };\n      } else if (evalArgs.length === 2) {\n        var _evalArg = evalArgs[0];\n        var evalArg1 = evalArgs[1];\n        return function evalOperatorNode(scope, args, context) {\n          return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n        };\n      } else {\n        return function evalOperatorNode(scope, args, context) {\n          return fn.apply(null, map(evalArgs, function (evalArg) {\n            return evalArg(scope, args, context);\n          }));\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new OperatorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {OperatorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {OperatorNode}\n     */\n    clone() {\n      return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n    }\n\n    /**\n     * Check whether this is an unary OperatorNode:\n     * has exactly one argument, like `-a`.\n     * @return {boolean}\n     *     Returns true when an unary operator node, false otherwise.\n     */\n    isUnary() {\n      return this.args.length === 1;\n    }\n\n    /**\n     * Check whether this is a binary OperatorNode:\n     * has exactly two arguments, like `a + b`.\n     * @return {boolean}\n     *     Returns true when a binary operator node, false otherwise.\n     */\n    isBinary() {\n      return this.args.length === 2;\n    }\n\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toString(options);\n        if (parens[0]) {\n          operand = '(' + operand + ')';\n        }\n\n        // for example for \"not\", we want a space between operand and argument\n        var opIsNamed = /[a-zA-Z]+/.test(this.op);\n        if (assoc === 'right') {\n          // prefix operator\n          return this.op + (opIsNamed ? ' ' : '') + operand;\n        } else if (assoc === 'left') {\n          // postfix\n          return operand + (opIsNamed ? ' ' : '') + this.op;\n        }\n\n        // fall back to postfix\n        return operand + this.op;\n      } else if (args.length === 2) {\n        var lhs = args[0].toString(options); // left hand side\n        var rhs = args[1].toString(options); // right hand side\n        if (parens[0]) {\n          // left hand side in parenthesis?\n          lhs = '(' + lhs + ')';\n        }\n        if (parens[1]) {\n          // right hand side in parenthesis?\n          rhs = '(' + rhs + ')';\n        }\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return lhs + ' ' + rhs;\n        }\n        return lhs + ' ' + this.op + ' ' + rhs;\n      } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        var stringifiedArgs = args.map(function (arg, index) {\n          arg = arg.toString(options);\n          if (parens[index]) {\n            // put in parenthesis?\n            arg = '(' + arg + ')';\n          }\n          return arg;\n        });\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join(' ');\n        }\n        return stringifiedArgs.join(' ' + this.op + ' ');\n      } else {\n        // fallback to formatting as a function call\n        return this.fn + '(' + this.args.join(', ') + ')';\n      }\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        op: this.op,\n        fn: this.fn,\n        args: this.args,\n        implicit: this.implicit,\n        isPercentage: this.isPercentage\n      };\n    }\n\n    /**\n     * Instantiate an OperatorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"OperatorNode\",\n     *      \"op\": \"+\", \"fn\": \"add\", \"args\": [...],\n     *      \"implicit\": false,\n     *      \"isPercentage\":false}\n     *     ```\n     *     where mathjs is optional\n     * @returns {OperatorNode}\n     */\n    static fromJSON(json) {\n      return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n    }\n\n    /**\n     * Get HTML representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toHTML(options);\n        if (parens[0]) {\n          operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (assoc === 'right') {\n          // prefix operator\n          return '<span class=\"math-operator math-unary-operator ' + 'math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n        } else {\n          // postfix when assoc === 'left' or undefined\n          return operand + '<span class=\"math-operator math-unary-operator ' + 'math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n        }\n      } else if (args.length === 2) {\n        // binary operatoes\n        var lhs = args[0].toHTML(options); // left hand side\n        var rhs = args[1].toHTML(options); // right hand side\n        if (parens[0]) {\n          // left hand side in parenthesis?\n          lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (parens[1]) {\n          // right hand side in parenthesis?\n          rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>' + rhs;\n        }\n        return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n      } else {\n        var stringifiedArgs = args.map(function (arg, index) {\n          arg = arg.toHTML(options);\n          if (parens[index]) {\n            // put in parenthesis?\n            arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          return arg;\n        });\n        if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>');\n          }\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n        } else {\n          // fallback to formatting as a function call\n          return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">' + '(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n      }\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n      var op = latexOperators[this.fn];\n      op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toTex(options);\n        if (parens[0]) {\n          operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n        }\n        if (assoc === 'right') {\n          // prefix operator\n          return op + operand;\n        } else if (assoc === 'left') {\n          // postfix operator\n          return operand + op;\n        }\n\n        // fall back to postfix\n        return operand + op;\n      } else if (args.length === 2) {\n        // binary operators\n        var lhs = args[0]; // left hand side\n        var lhsTex = lhs.toTex(options);\n        if (parens[0]) {\n          lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n        }\n        var rhs = args[1]; // right hand side\n        var rhsTex = rhs.toTex(options);\n        if (parens[1]) {\n          rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n        }\n\n        // handle some exceptions (due to the way LaTeX works)\n        var lhsIdentifier;\n        if (parenthesis === 'keep') {\n          lhsIdentifier = lhs.getIdentifier();\n        } else {\n          // Ignore ParenthesisNodes if in 'keep' mode\n          lhsIdentifier = lhs.getContent().getIdentifier();\n        }\n        switch (this.getIdentifier()) {\n          case 'OperatorNode:divide':\n            // op contains '\\\\frac' at this point\n            return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n          case 'OperatorNode:pow':\n            lhsTex = '{' + lhsTex + '}';\n            rhsTex = '{' + rhsTex + '}';\n            switch (lhsIdentifier) {\n              case 'ConditionalNode': //\n              case 'OperatorNode:divide':\n                lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n            }\n            break;\n          case 'OperatorNode:multiply':\n            if (this.implicit && implicit === 'hide') {\n              return lhsTex + '~' + rhsTex;\n            }\n        }\n        return lhsTex + op + rhsTex;\n      } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        var texifiedArgs = args.map(function (arg, index) {\n          arg = arg.toTex(options);\n          if (parens[index]) {\n            arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n          }\n          return arg;\n        });\n        if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit && implicit === 'hide') {\n          return texifiedArgs.join('~');\n        }\n        return texifiedArgs.join(op);\n      } else {\n        // fall back to formatting as a function call\n        // as this is a fallback, it doesn't use\n        // fancy function names\n        return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n          return arg.toTex(options);\n        }).join(',') + '\\\\right)';\n      }\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.fn;\n    }\n  }\n  _defineProperty(OperatorNode, \"name\", name);\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ParenthesisNode extends Node {\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    constructor(content) {\n      super();\n      // validate input\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n      this.content = content;\n    }\n    get type() {\n      return name;\n    }\n    get isParenthesisNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n\n    /**\n     * Get the content of the current Node.\n     * @return {Node} content\n     * @override\n     **/\n    getContent() {\n      return this.content.getContent();\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n\n    /**\n     * Create a new ParenthesisNode whose child is the result of calling\n     * the provided callback function on the child of this node.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ParenthesisNode} Returns a clone of the node\n     */\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ParenthesisNode}\n     */\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n      return this.content.toString(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n\n    /**\n     * Instantiate an ParenthesisNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n     *                       where mathjs is optional\n     * @returns {ParenthesisNode}\n     */\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return this.content.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n      return this.content.toTex(options);\n    }\n  }\n  _defineProperty(ParenthesisNode, \"name\", name);\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'RangeNode';\nvar dependencies = ['Node'];\nexport var createRangeNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @param {string} implicit\n   * @return {Object} parentheses\n   * @private\n   */\n  function calculateNecessaryParentheses(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var parens = {};\n    var startPrecedence = getPrecedence(node.start, parenthesis, implicit);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n    if (node.step) {\n      var stepPrecedence = getPrecedence(node.step, parenthesis, implicit);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n    var endPrecedence = getPrecedence(node.end, parenthesis, implicit);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  class RangeNode extends Node {\n    /**\n     * @constructor RangeNode\n     * @extends {Node}\n     * create a range\n     * @param {Node} start  included lower-bound\n     * @param {Node} end    included upper-bound\n     * @param {Node} [step] optional step\n     */\n    constructor(start, end, step) {\n      super();\n      // validate inputs\n      if (!isNode(start)) throw new TypeError('Node expected');\n      if (!isNode(end)) throw new TypeError('Node expected');\n      if (step && !isNode(step)) throw new TypeError('Node expected');\n      if (arguments.length > 3) throw new Error('Too many arguments');\n      this.start = start; // included lower-bound\n      this.end = end; // included upper-bound\n      this.step = step || null; // optional step\n    }\n\n    get type() {\n      return name;\n    }\n    get isRangeNode() {\n      return true;\n    }\n\n    /**\n     * Check whether the RangeNode needs the `end` symbol to be defined.\n     * This end is the size of the Matrix in current dimension.\n     * @return {boolean}\n     */\n    needsEnd() {\n      // find all `end` symbols in this RangeNode\n      var endSymbols = this.filter(function (node) {\n        return isSymbolNode(node) && node.name === 'end';\n      });\n      return endSymbols.length > 0;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var range = math.range;\n      var evalStart = this.start._compile(math, argNames);\n      var evalEnd = this.end._compile(math, argNames);\n      if (this.step) {\n        var evalStep = this.step._compile(math, argNames);\n        return function evalRangeNode(scope, args, context) {\n          return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n        };\n      } else {\n        return function evalRangeNode(scope, args, context) {\n          return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.start, 'start', this);\n      callback(this.end, 'end', this);\n      if (this.step) {\n        callback(this.step, 'step', this);\n      }\n    }\n\n    /**\n     * Create a new RangeNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RangeNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RangeNode}\n     */\n    clone() {\n      return new RangeNode(this.start, this.end, this.step && this.step);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);\n\n      // format string as start:step:stop\n      var str;\n      var start = this.start.toString(options);\n      if (parens.start) {\n        start = '(' + start + ')';\n      }\n      str = start;\n      if (this.step) {\n        var step = this.step.toString(options);\n        if (parens.step) {\n          step = '(' + step + ')';\n        }\n        str += ':' + step;\n      }\n      var end = this.end.toString(options);\n      if (parens.end) {\n        end = '(' + end + ')';\n      }\n      str += ':' + end;\n      return str;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        start: this.start,\n        end: this.end,\n        step: this.step\n      };\n    }\n\n    /**\n     * Instantiate an RangeNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n     *     where mathjs is optional\n     * @returns {RangeNode}\n     */\n    static fromJSON(json) {\n      return new RangeNode(json.start, json.end, json.step);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);\n\n      // format string as start:step:stop\n      var str;\n      var start = this.start.toHTML(options);\n      if (parens.start) {\n        start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      str = start;\n      if (this.step) {\n        var step = this.step.toHTML(options);\n        if (parens.step) {\n          step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n      }\n      var end = this.end.toHTML(options);\n      if (parens.end) {\n        end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n      return str;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @params {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);\n      var str = this.start.toTex(options);\n      if (parens.start) {\n        str = \"\\\\left(\".concat(str, \"\\\\right)\");\n      }\n      if (this.step) {\n        var step = this.step.toTex(options);\n        if (parens.step) {\n          step = \"\\\\left(\".concat(step, \"\\\\right)\");\n        }\n        str += ':' + step;\n      }\n      var end = this.end.toTex(options);\n      if (parens.end) {\n        end = \"\\\\left(\".concat(end, \"\\\\right)\");\n      }\n      str += ':' + end;\n      return str;\n    }\n  }\n  _defineProperty(RangeNode, \"name\", name);\n  return RangeNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n    get type() {\n      return name;\n    }\n    get isRelationalNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n      return ret;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n      return ret;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n      return ret;\n    }\n  }\n  _defineProperty(RelationalNode, \"name\", name);\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { toSymbol } from '../../utils/latex.js';\nvar name = 'SymbolNode';\nvar dependencies = ['math', '?Unit', 'Node'];\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Unit,\n    Node\n  } = _ref;\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n  function isValuelessUnit(name) {\n    return Unit ? Unit.isValuelessUnit(name) : false;\n  }\n  class SymbolNode extends Node {\n    /**\n     * @constructor SymbolNode\n     * @extends {Node}\n     * A symbol node can hold and resolve a symbol\n     * @param {string} name\n     * @extends {Node}\n     */\n    constructor(name) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      this.name = name;\n    }\n    get type() {\n      return 'SymbolNode';\n    }\n    get isSymbolNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var name = this.name;\n      if (argNames[name] === true) {\n        // this is a FunctionAssignment argument\n        // (like an x when inside the expression of a function\n        // assignment `f(x) = ...`)\n        return function (scope, args, context) {\n          return args[name];\n        };\n      } else if (name in math) {\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\n        };\n      } else {\n        var isUnit = isValuelessUnit(name);\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // nothing to do, we don't have any children\n    }\n\n    /**\n     * Create a new SymbolNode with children produced by the given callback.\n     * Trivial since a SymbolNode has no children\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {SymbolNode} Returns a clone of the node\n     */\n    map(callback) {\n      return this.clone();\n    }\n\n    /**\n     * Throws an error 'Undefined symbol {name}'\n     * @param {string} name\n     */\n    static onUndefinedSymbol(name) {\n      throw new Error('Undefined symbol ' + name);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {SymbolNode}\n     */\n    clone() {\n      return new SymbolNode(this.name);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      return this.name;\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      var name = escape(this.name);\n      if (name === 'true' || name === 'false') {\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n      } else if (name === 'i') {\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n      } else if (name === 'Infinity') {\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n      } else if (name === 'NaN') {\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n      } else if (name === 'null') {\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n      } else if (name === 'undefined') {\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n      }\n      return '<span class=\"math-symbol\">' + name + '</span>';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: 'SymbolNode',\n        name: this.name\n      };\n    }\n\n    /**\n     * Instantiate a SymbolNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n     *                       where mathjs is optional\n     * @returns {SymbolNode}\n     */\n    static fromJSON(json) {\n      return new SymbolNode(json.name);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toTex(options) {\n      var isUnit = false;\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n        isUnit = true;\n      }\n      var symbol = toSymbol(this.name, isUnit);\n      if (symbol[0] === '\\\\') {\n        // no space needed if the symbol starts with '\\'\n        return symbol;\n      }\n      // the space prevents symbols from breaking stuff like '\\cdot'\n      // if it's written right before the symbol\n      return ' ' + symbol;\n    }\n  }\n  return SymbolNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.fn = fn;\n      this.args = args || [];\n    }\n\n    // readonly property name\n    get name() {\n      return this.fn.name || '';\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n          var resolveFn = scope => {\n            var value;\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n            if (typeof value === 'function') {\n              return value;\n            }\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = args[_name];\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n\n        var evalObject = this.fn.object._compile(math, argNames);\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          validateSafeMethod(object, prop);\n          var isRaw = object[prop] && object[prop].rawArgs;\n          if (isRaw) {\n            // \"Raw\" evaluation\n            return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return object[prop].apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n        var evalFn = this.fn._compile(math, argNames);\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new FunctionNode(fn, args);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n\n      // fall back to Node's toString\n      return super.toString(options);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n      // format the arguments like \"add(2, 4.2)\"\n      return fn + '(' + args.join(', ') + ')';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      });\n\n      // format the arguments like \"add(2, 4.2)\"\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n    toTex(options) {\n      var customTex;\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      }\n\n      // fall back to Node's toTex\n      return super.toTex(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      }\n\n      // toTex property on the function itself\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n      var customToTex;\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n      }\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n      return expandTemplate(defaultTemplate, this, options);\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n  }\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","import { createEmptyMap, assign } from './map.js';\n\n/**\n * Create a new scope which can access the parent scope,\n * but does not affect it when written. This is suitable for variable definitions\n * within a block node, or function definition.\n *\n * If parent scope has a createSubScope method, it delegates to that. Otherwise,\n * creates an empty map, and copies the parent scope to it, adding in\n * the remaining `args`.\n *\n * @param {Map} parentScope\n * @param  {...any} args\n * @returns {Map}\n */\nexport function createSubScope(parentScope) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (typeof parentScope.createSubScope === 'function') {\n    return assign(parentScope.createSubScope(), ...args);\n  }\n  return assign(createEmptyMap(), parentScope, ...args);\n}","import _extends from \"@babel/runtime/helpers/extends\";\nimport { factory } from '../utils/factory.js';\nimport { isAccessorNode, isConstantNode, isFunctionNode, isOperatorNode, isSymbolNode, rule2Node } from '../utils/is.js';\nimport { deepMap } from '../utils/collection.js';\nimport { hasOwnProperty } from '../utils/object.js';\nvar name = 'parse';\nvar dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];\nexport var createParse = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric,\n    config,\n    AccessorNode,\n    ArrayNode,\n    AssignmentNode,\n    BlockNode,\n    ConditionalNode,\n    ConstantNode,\n    FunctionAssignmentNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    RangeNode,\n    RelationalNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.evaluate().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().evaluate() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().evaluate() // 12\n   *\n   * See also:\n   *\n   *     evaluate, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  var parse = typed(name, {\n    string: function string(expression) {\n      return parseStart(expression, {});\n    },\n    'Array | Matrix': function ArrayMatrix(expressions) {\n      return parseMultiple(expressions, {});\n    },\n    'string, Object': function stringObject(expression, options) {\n      var extraNodes = options.nodes !== undefined ? options.nodes : {};\n      return parseStart(expression, extraNodes);\n    },\n    'Array | Matrix, Object': parseMultiple\n  });\n  function parseMultiple(expressions) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var extraNodes = options.nodes !== undefined ? options.nodes : {};\n\n    // parse an array or matrix with expressions\n    return deepMap(expressions, function (elem) {\n      if (typeof elem !== 'string') throw new TypeError('String expected');\n      return parseStart(elem, extraNodes);\n    });\n  }\n\n  // token types enumeration\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4\n  };\n\n  // map with all delimiters\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  };\n\n  // map with all named delimiters\n  var NAMED_DELIMITERS = {\n    mod: true,\n    to: true,\n    in: true,\n    and: true,\n    xor: true,\n    or: true,\n    not: true\n  };\n  var CONSTANTS = {\n    true: true,\n    false: false,\n    null: null,\n    undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n    };\n  }\n\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {Object} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {Object} state\n   * @returns {string}\n   * @private\n   */\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n  function next(state) {\n    state.index++;\n  }\n\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = '';\n\n    // skip over ignored characters:\n    while (true) {\n      // comments:\n      if (currentCharacter(state) === '#') {\n        while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n          state.comment += currentCharacter(state);\n          next(state);\n        }\n      }\n      // whitespace: space, tab, and newline when inside parameters\n      if (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n        next(state);\n      } else {\n        break;\n      }\n    }\n\n    // check for end of expression\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    }\n\n    // check for new line character\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    }\n\n    // check for delimiters consisting of 2 characters\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    }\n\n    // check for delimiters consisting of 1 character\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    }\n\n    // check for a number\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER;\n\n      // check for binary, octal, or hex\n      var _c = currentString(state, 2);\n      if (_c === '0b' || _c === '0o' || _c === '0x') {\n        state.token += currentCharacter(state);\n        next(state);\n        state.token += currentCharacter(state);\n        next(state);\n        while (parse.isHexDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n        if (currentCharacter(state) === '.') {\n          // this number has a radix point\n          state.token += '.';\n          next(state);\n          // get the digits after the radix\n          while (parse.isHexDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        } else if (currentCharacter(state) === 'i') {\n          // this number has a word size suffix\n          state.token += 'i';\n          next(state);\n          // get the word size\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n        }\n        return;\n      }\n\n      // get number, can have a single dot\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n          return;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n      // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n          // Scientific notation MUST be followed by an exponent\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n      return;\n    }\n\n    // check for variables, functions, named operators\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n      if (hasOwnProperty(NAMED_DELIMITERS, state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n      return;\n    }\n\n    // something unknown is found, wrong characters -> a syntax error\n    state.tokenType = TOKENTYPE.UNKNOWN;\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n\n  /**\n   * Get next token and skip newline tokens\n   */\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n  }\n\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * https://unicode-table.com/en/\n   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n\n  /**\n   * checks if the given char c is a hex digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isHexDigit = function isHexDigit(c) {\n    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';\n  };\n\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n    _extends(state, {\n      expression,\n      extraNodes\n    });\n    getToken(state);\n    var node = parseBlock(state);\n\n    // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n    return node;\n  }\n\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      if (state.comment) {\n        node.comment = state.comment;\n      }\n    }\n\n    // TODO: simplify this loop\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node,\n          visible\n        });\n      }\n      getToken(state);\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        if (state.comment) {\n          node.comment = state.comment;\n        }\n        visible = state.token !== ';';\n        blocks.push({\n          node,\n          visible\n        });\n      }\n    }\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        if (state.comment) {\n          node.comment = state.comment;\n        }\n      }\n      return node;\n    }\n  }\n\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n    if (state.token === '=') {\n      if (isSymbolNode(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if (isAccessorNode(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if (isFunctionNode(node) && isSymbolNode(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (isSymbolNode(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n    return node;\n  }\n\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr);\n\n      // restore the previous conditional level\n      state.conditionalLevel = prev;\n    }\n    return node;\n  }\n\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n    return node;\n  }\n\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n    while (hasOwnProperty(operators, state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(c => c.fn), params);\n    }\n  }\n\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n  function parseShift(state) {\n    var node, name, fn, params;\n    node = parseConversion(state);\n    var operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n    while (hasOwnProperty(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n  function parseConversion(state) {\n    var node, name, fn, params;\n    node = parseRange(state);\n    var operators = {\n      to: 'to',\n      in: 'to' // alias of 'to'\n    };\n\n    while (hasOwnProperty(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n    return node;\n  }\n\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n  function parseRange(state) {\n    var node;\n    var params = [];\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node);\n\n      // parse step and end\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n  function parseAddSubtract(state) {\n    var node, name, fn, params;\n    node = parseMultiplyDivide(state);\n    var operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n    while (hasOwnProperty(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      var rightNode = parseMultiplyDivide(state);\n      if (rightNode.isPercentage) {\n        params = [node, new OperatorNode('*', 'multiply', [node, rightNode])];\n      } else {\n        params = [node, rightNode];\n      }\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n  function parseMultiplyDivide(state) {\n    var node, last, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    var operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide'\n    };\n    while (true) {\n      if (hasOwnProperty(operators, state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !isConstantNode(last) && (!isOperatorNode(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true /* implicit */);\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * And as amended in https://github.com/josdejong/mathjs/issues/2370#issuecomment-1054052164\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern:\n   *   [unaryPrefixOp]?[number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n  function parseRule2(state) {\n    var node = parsePercentage(state);\n    var last = node;\n    var tokenStates = [];\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && rule2Node(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push(_extends({}, state));\n        getTokenSkipNewline(state);\n\n        // Match the \"number / number\" part of the pattern\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push(_extends({}, state));\n          getTokenSkipNewline(state);\n\n          // Match the \"symbol\" part of the pattern, or a left parenthesis\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            _extends(state, tokenStates.pop());\n            tokenStates.pop();\n            last = parsePercentage(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n            _extends(state, tokenStates.pop());\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          _extends(state, tokenStates.pop());\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n\n  /**\n   * percentage or mod\n   * @return {Node} node\n   * @private\n   */\n  function parsePercentage(state) {\n    var node, name, fn, params;\n    node = parseUnary(state);\n    var operators = {\n      '%': 'mod',\n      mod: 'mod'\n    };\n    while (hasOwnProperty(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      if (name === '%' && state.tokenType === TOKENTYPE.DELIMITER && state.token !== '(') {\n        // If the expression contains only %, then treat that as /100\n        node = new OperatorNode('/', 'divide', [node, new ConstantNode(100)], false, true);\n      } else {\n        params = [node, parseUnary(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n    return node;\n  }\n\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      not: 'not'\n    };\n    if (hasOwnProperty(operators, state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n    return parsePow(state);\n  }\n\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n      node = new OperatorNode(name, fn, params);\n    }\n    return node;\n  }\n\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n  function parseLeftHandOperators(state) {\n    var node, name, fn, params;\n    node = parseCustomNodes(state);\n    var operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n    while (hasOwnProperty(operators, state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n    return node;\n  }\n\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseCustomNodes(state) {\n    var params = [];\n    if (state.tokenType === TOKENTYPE.SYMBOL && hasOwnProperty(state.extraNodes, state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state);\n\n      // parse parameters\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n        if (state.token !== ')') {\n          params.push(parseAssignment(state));\n\n          // parse a list with parameters\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n        closeParams(state);\n        getToken(state);\n      }\n\n      // create a new custom node\n      // noinspection JSValidateTypes\n      return new CustomNode(params);\n    }\n    return parseSymbol(state);\n  }\n\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n  function parseSymbol(state) {\n    var node, name;\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n      if (hasOwnProperty(CONSTANTS, name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      }\n\n      // parse function parameters and matrix index\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseDoubleQuotesString(state);\n  }\n\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Object} state\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n  function parseAccessors(state, node, types) {\n    var params;\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n      if (state.token === '(') {\n        if (isSymbolNode(node) || isAccessorNode(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n          if (state.token !== ')') {\n            params.push(parseAssignment(state));\n\n            // parse a list with parameters\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n        if (state.token !== ']') {\n          params.push(parseAssignment(state));\n\n          // parse a list with parameters\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n    return node;\n  }\n\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n  function parseDoubleQuotesString(state) {\n    var node, str;\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state);\n\n      // create constant\n      node = new ConstantNode(str);\n\n      // parse index parameters\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseSingleQuotesString(state);\n  }\n\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n      str += currentCharacter(state);\n      next(state);\n    }\n    getToken(state);\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n  function parseSingleQuotesString(state) {\n    var node, str;\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state);\n\n      // create constant\n      node = new ConstantNode(str);\n\n      // parse index parameters\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseMatrix(state);\n  }\n\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n      str += currentCharacter(state);\n      next(state);\n    }\n    getToken(state);\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row];\n\n          // the rows of the matrix are separated by dot-comma's\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n          closeParams(state);\n          getToken(state);\n\n          // check if the number of columns matches in all rows\n          cols = params[0].items.length;\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n      return parseAccessors(state, array);\n    }\n    return parseObject(state);\n  }\n\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state);\n\n      // parse expression\n      params[len] = parseAssignment(state);\n      len++;\n    }\n    return new ArrayNode(params);\n  }\n\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n  function parseObject(state) {\n    if (state.token === '{') {\n      openParams(state);\n      var key;\n      var properties = {};\n      do {\n        getToken(state);\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          }\n\n          // parse key/value separator\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n          getToken(state);\n\n          // parse key\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n      closeParams(state);\n      getToken(state);\n      var node = new ObjectNode(properties);\n\n      // parse index parameters\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseNumber(state);\n  }\n\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n  function parseNumber(state) {\n    var numberStr;\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n    return parseParentheses(state);\n  }\n\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n  function parseParentheses(state) {\n    var node;\n\n    // check if it is a parenthesized expression\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n    return parseEnd(state);\n  }\n\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error.char = c;\n    return error;\n  }\n\n  /**\n   * Create an error\n   * @param {Object} state\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error.char = c;\n    return error;\n  }\n\n  // Now that we can parse, automatically convert strings to Nodes by parsing\n  typed.addConversion({\n    from: 'string',\n    to: 'Node',\n    convert: parse\n  });\n  return parse;\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compile';\nvar dependencies = ['typed', 'parse'];\nexport var createCompile = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\n   *     code1.evaluate() // 5\n   *\n   *     let scope = {a: 3, b: 4}\n   *     const code2 = math.compile('a * b') // 12\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].evaluate() // 12\n   *\n   * See also:\n   *\n   *    parse, evaluate\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      return parse(expr).compile();\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { createEmptyMap } from '../../utils/map.js';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = createEmptyMap();\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = createEmptyMap();\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});","import { factory } from '../utils/factory.js';\nimport { createEmptyMap, toObject } from '../utils/map.js';\nvar name = 'Parser';\nvar dependencies = ['evaluate'];\nexport var createParserClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    evaluate\n  } = _ref;\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('f(x, y) = x^y')          // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    Object.defineProperty(this, 'scope', {\n      value: createEmptyMap(),\n      writable: false\n    });\n  }\n\n  /**\n   * Attach type information\n   */\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n\n  /**\n   * Parse and evaluate the given expression\n   * @param {string | string[]} expr   A string containing an expression,\n   *                                   for example \"2+3\", or a list with expressions\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return evaluate(expr, this.scope);\n  };\n\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    if (this.scope.has(name)) {\n      return this.scope.get(name);\n    }\n  };\n\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n  Parser.prototype.getAll = function () {\n    return toObject(this.scope);\n  };\n\n  /**\n   * Get a map with all defined variables\n   * @return {Map} values\n   */\n  Parser.prototype.getAllAsMap = function () {\n    return this.scope;\n  };\n\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n  Parser.prototype.set = function (name, value) {\n    this.scope.set(name, value);\n    return value;\n  };\n\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n  Parser.prototype.remove = function (name) {\n    this.scope.delete(name);\n  };\n\n  /**\n   * Clear the scope with variables and functions\n   */\n  Parser.prototype.clear = function () {\n    this.scope.clear();\n  };\n  return Parser;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'parser';\nvar dependencies = ['typed', 'Parser'];\nexport var createParser = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Parser\n  } = _ref;\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')             // 3.5\n   *     parser.evaluate('x + 3')                 // 6.5\n   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)\n   *     parser.evaluate('f(2, 3)')               // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed(name, {\n    '': function _() {\n      return new Parser();\n    }\n  });\n});","import { clone } from '../../../utils/object.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'lup';\nvar dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];\nexport var createLup = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    abs,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    larger,\n    equalScalar,\n    unaryMinus,\n    DenseMatrix,\n    SparseMatrix,\n    Spa\n  } = _ref;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  return typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseLUP(m);\n      // result\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix array, clone original data\n    var data = clone(m._data);\n    // l matrix arrays\n    var ldata = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var udata = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vector\n    var p = [];\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j);\n          // v[i, j]\n          var s = 0;\n          // loop up to min\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n          data[i][j] = subtract(data[i][j], s);\n        }\n      }\n      // row with larger value in cvector, row >= j\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0;\n      // loop rows\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j];\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      }\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0];\n        // swap j <-> pi in data\n        DenseMatrix._swapRows(j, pi, data);\n      }\n      // check column is in lower triangular matrix\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          }\n          // L\n          ldata[i] = [];\n        }\n        // check we are in the upper triangular matrix\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n          continue;\n        }\n        // diagonal value\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n          continue;\n        }\n        // check row exists in upper triangular matrix\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        }\n        // check column exists in lower triangular matrix\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    }\n    // l matrix\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    });\n    // u matrix\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    });\n    // p vector\n    var pv = [];\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    }\n    // return matrices\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix arrays (will not be modified, thanks to permutation vector)\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // l matrix arrays\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vectors, (current index -> original index) and (original index -> current index)\n    var pvCo = [];\n    var pvOc = [];\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    }\n    // swap indices in permutation vectors (condition x < y)!\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y];\n      // update permutation vector current -> original\n      pvCo[kx] = y;\n      pvCo[ky] = x;\n      // update permutation vector original -> current\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    };\n    // loop columns\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa();\n      // check lower triangular matrix has a value @ column j\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length);\n        // first value in j column for lower triangular matrix\n        lvalues.push(1);\n        lindex.push(j);\n      }\n      // update ptr\n      uptr.push(uvalues.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // copy column j into sparse accumulator\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k];\n        // copy column values into sparse accumulator (use permutation vector)\n        spa.set(pvCo[i], values[k]);\n      }\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      }\n      // row with larger value in spa, row >= j\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj);\n      // loop values in spa (order by row, below diagonal)\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      });\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n        // swap values j <-> pi in U\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n        // swap values in spa\n        spa.swap(j, pi);\n        // update permutation vector (swap values @ j, pi)\n        swapIndeces(j, pi);\n      }\n      // loop values in spa (order by row)\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj);\n          // check value is non zero\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n    for (j = 0; j < columns; j++) {\n      _loop();\n    }\n    // update ptrs\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length);\n\n    // return matrices\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport { factory } from '../../../utils/factory.js';\nvar name = 'qr';\nvar dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];\nexport var createQr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    zeros,\n    identity,\n    isZero,\n    equal,\n    sign,\n    sqrt,\n    conj,\n    unaryMinus,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    complex\n  } = _ref;\n  /**\n   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in\n   * two matrices (`Q`, `R`) where `Q` is an\n   * orthogonal matrix and `R` is an upper triangular matrix.\n   *\n   * Syntax:\n   *\n   *    math.qr(A)\n   *\n   * Example:\n   *\n   *    const m = [\n   *      [1, -1,  4],\n   *      [1,  4, -2],\n   *      [1,  4,  2],\n   *      [1,  -1, 0]\n   *    ]\n   *    const result = math.qr(m)\n   *    // r = {\n   *    //   Q: [\n   *    //     [0.5, -0.5,   0.5],\n   *    //     [0.5,  0.5,  -0.5],\n   *    //     [0.5,  0.5,   0.5],\n   *    //     [0.5, -0.5,  -0.5],\n   *    //   ],\n   *    //   R: [\n   *    //     [2, 3,  2],\n   *    //     [0, 5, -2],\n   *    //     [0, 0,  4],\n   *    //     [0, 0,  0]\n   *    //   ]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lusolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array\n   * for which to get the QR decomposition.\n   *\n   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal\n   * matrix and R: the upper triangular matrix\n   */\n  return _extends(typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseQR(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseQR(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseQR(m);\n      // result\n      return {\n        Q: r.Q.valueOf(),\n        R: r.R.valueOf()\n      };\n    }\n  }), {\n    _denseQRimpl\n  });\n  function _denseQRimpl(m) {\n    // rows & columns (m x n)\n    var rows = m._size[0]; // m\n    var cols = m._size[1]; // n\n\n    var Q = identity([rows], 'dense');\n    var Qdata = Q._data;\n    var R = m.clone();\n    var Rdata = R._data;\n\n    // vars\n    var i, j, k;\n    var w = zeros([rows], '');\n    for (k = 0; k < Math.min(cols, rows); ++k) {\n      /*\n       * **k-th Household matrix**\n       *\n       * The matrix I - 2*v*transpose(v)\n       * x     = first column of A\n       * x1    = first element of x\n       * alpha = x1 / |x1| * |x|\n       * e1    = tranpose([1, 0, 0, ...])\n       * u     = x - alpha * e1\n       * v     = u / |u|\n       *\n       * Household matrix = I - 2 * v * tranpose(v)\n       *\n       *  * Initially Q = I and R = A.\n       *  * Household matrix is a reflection in a plane normal to v which\n       *    will zero out all but the top right element in R.\n       *  * Appplying reflection to both Q and R will not change product.\n       *  * Repeat this process on the (1,1) minor to get R as an upper\n       *    triangular matrix.\n       *  * Reflections leave the magnitude of the columns of Q unchanged\n       *    so Q remains othoganal.\n       *\n       */\n\n      var pivot = Rdata[k][k];\n      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));\n      var conjSgn = conj(sgn);\n      var alphaSquared = 0;\n      for (i = k; i < rows; i++) {\n        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));\n      }\n      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));\n      if (!isZero(alpha)) {\n        // first element in vector u\n        var u1 = subtract(pivot, alpha);\n\n        // w = v * u1 / |u|    (only elements k to (rows-1) are used)\n        w[k] = 1;\n        for (i = k + 1; i < rows; i++) {\n          w[i] = divideScalar(Rdata[i][k], u1);\n        }\n\n        // tau = - conj(u1 / alpha)\n        var tau = unaryMinus(conj(divideScalar(u1, alpha)));\n        var s = void 0;\n\n        /*\n         * tau and w have been choosen so that\n         *\n         * 2 * v * tranpose(v) = tau * w * tranpose(w)\n         */\n\n        /*\n         * -- calculate R = R - tau * w * tranpose(w) * R --\n         * Only do calculation with rows k to (rows-1)\n         * Additionally columns 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (j = k; j < cols; j++) {\n          s = 0.0;\n\n          // calculate jth element of [tranpose(w) * R]\n          for (i = k; i < rows; i++) {\n            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));\n          }\n\n          // calculate the jth element of [tau * transpose(w) * R]\n          s = multiplyScalar(s, tau);\n          for (i = k; i < rows; i++) {\n            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);\n          }\n        }\n        /*\n         * -- calculate Q = Q - tau * Q * w * transpose(w) --\n         * Q is a square matrix (rows x rows)\n         * Only do calculation with columns k to (rows-1)\n         * Additionally rows 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (i = 0; i < rows; i++) {\n          s = 0.0;\n\n          // calculate ith element of [Q * w]\n          for (j = k; j < rows; j++) {\n            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));\n          }\n\n          // calculate the ith element of [tau * Q * w]\n          s = multiplyScalar(s, tau);\n          for (j = k; j < rows; ++j) {\n            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);\n          }\n        }\n      }\n    }\n\n    // return matrices\n    return {\n      Q,\n      R,\n      toString: function toString() {\n        return 'Q: ' + this.Q.toString() + '\\nR: ' + this.R.toString();\n      }\n    };\n  }\n  function _denseQR(m) {\n    var ret = _denseQRimpl(m);\n    var Rdata = ret.R._data;\n    if (m._data.length > 0) {\n      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;\n      for (var i = 0; i < Rdata.length; ++i) {\n        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {\n          Rdata[i][j] = zero;\n        }\n      }\n    }\n    return ret;\n  }\n  function _sparseQR(m) {\n    throw new Error('qr not implemented for sparse matrices yet');\n  }\n});","import { isInteger } from '../../../utils/number.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createCsSqr } from '../sparse/csSqr.js';\nimport { createCsLu } from '../sparse/csLu.js';\nvar name = 'slu';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createSlu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    transpose,\n    divideScalar,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSqr = createCsSqr({\n    add,\n    multiply,\n    transpose\n  });\n  var csLu = createCsLu({\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  });\n\n  /**\n   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n   *\n   * `P * A * Q = L * U`\n   *\n   * Syntax:\n   *\n   *    math.slu(A, order, threshold)\n   *\n   * Examples:\n   *\n   *    const A = math.sparse([[4,3], [6, 3]])\n   *    math.slu(A, 1, 0.001)\n   *    // returns:\n   *    // {\n   *    //   L: [[1, 0], [1.5, 1]]\n   *    //   U: [[4, 3], [0, -1.5]]\n   *    //   p: [0, 1]\n   *    //   q: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lsolve, usolve, lusolve\n   *\n   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n   *                                       0 - Natural ordering, no permutation vector q is returned\n   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.\n   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n   */\n  return typed(name, {\n    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {\n      // verify order\n      if (!isInteger(order) || order < 0 || order > 3) {\n        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n      }\n      // verify threshold\n      if (threshold < 0 || threshold > 1) {\n        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n      }\n\n      // perform symbolic ordering and analysis\n      var s = csSqr(order, a, false);\n\n      // perform lu decomposition\n      var f = csLu(a, s, threshold);\n\n      // return decomposition\n      return {\n        L: f.L,\n        U: f.U,\n        p: f.pinv,\n        q: s.q,\n        toString: function toString() {\n          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n        }\n      };\n    }\n  });\n});","import { csPermute } from './csPermute.js';\nimport { csPost } from './csPost.js';\nimport { csEtree } from './csEtree.js';\nimport { createCsAmd } from './csAmd.js';\nimport { createCsCounts } from './csCounts.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSqr';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsSqr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  var csAmd = createCsAmd({\n    add,\n    multiply,\n    transpose\n  });\n  var csCounts = createCsCounts({\n    transpose\n  });\n\n  /**\n   * Symbolic ordering and analysis for QR and LU decompositions.\n   *\n   * @param {Number}  order           The ordering strategy (see csAmd for more details)\n   * @param {Matrix}  a               The A matrix\n   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n   *                                  symbolic ordering and analysis for LU decomposition (false)\n   *\n   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSqr(order, a, qr) {\n    // a arrays\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // vars\n    var k;\n    // symbolic analysis result\n    var s = {};\n    // fill-reducing ordering\n    s.q = csAmd(order, a);\n    // validate results\n    if (order && !s.q) {\n      return null;\n    }\n    // QR symbolic analysis\n    if (qr) {\n      // apply permutations if needed\n      var c = order ? csPermute(a, null, s.q, 0) : a;\n      // etree of C'*C, where C=A(:,q)\n      s.parent = csEtree(c, 1);\n      // post order elimination tree\n      var post = csPost(s.parent, n);\n      // col counts chol(C'*C)\n      s.cp = csCounts(c, s.parent, post, 1);\n      // check we have everything needed to calculate number of nonzero elements\n      if (c && s.parent && s.cp && _vcount(c, s)) {\n        // calculate number of nonzero elements\n        for (s.unz = 0, k = 0; k < n; k++) {\n          s.unz += s.cp[k];\n        }\n      }\n    } else {\n      // for LU factorization only, guess nnz(L) and nnz(U)\n      s.unz = 4 * aptr[n] + n;\n      s.lnz = s.unz;\n    }\n    // return result S\n    return s;\n  };\n\n  /**\n   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n   */\n  function _vcount(a, s) {\n    // a arrays\n    var aptr = a._ptr;\n    var aindex = a._index;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize s arrays\n    s.pinv = []; // (m + n)\n    s.leftmost = []; // (m)\n    // vars\n    var parent = s.parent;\n    var pinv = s.pinv;\n    var leftmost = s.leftmost;\n    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n    var w = []; // (m + 3 * n)\n    var next = 0;\n    var head = m;\n    var tail = m + n;\n    var nque = m + 2 * n;\n    // vars\n    var i, k, p, p0, p1;\n    // initialize w\n    for (k = 0; k < n; k++) {\n      // queue k is empty\n      w[head + k] = -1;\n      w[tail + k] = -1;\n      w[nque + k] = 0;\n    }\n    // initialize row arrays\n    for (i = 0; i < m; i++) {\n      leftmost[i] = -1;\n    }\n    // loop columns backwards\n    for (k = n - 1; k >= 0; k--) {\n      // values & index for column k\n      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // leftmost[i] = min(find(A(i,:)))\n        leftmost[aindex[p]] = k;\n      }\n    }\n    // scan rows in reverse order\n    for (i = m - 1; i >= 0; i--) {\n      // row i is not yet ordered\n      pinv[i] = -1;\n      k = leftmost[i];\n      // check row i is empty\n      if (k === -1) {\n        continue;\n      }\n      // first row in queue k\n      if (w[nque + k]++ === 0) {\n        w[tail + k] = i;\n      }\n      // put i at head of queue k\n      w[next + i] = w[head + k];\n      w[head + k] = i;\n    }\n    s.lnz = 0;\n    s.m2 = m;\n    // find row permutation and nnz(V)\n    for (k = 0; k < n; k++) {\n      // remove row i from queue k\n      i = w[head + k];\n      // count V(k,k) as nonzero\n      s.lnz++;\n      // add a fictitious row\n      if (i < 0) {\n        i = s.m2++;\n      }\n      // associate row i with V(:,k)\n      pinv[i] = k;\n      // skip if V(k+1:m,k) is empty\n      if (--nque[k] <= 0) {\n        continue;\n      }\n      // nque[k] is nnz (V(k+1:m,k))\n      s.lnz += w[nque + k];\n      // move all rows to parent of k\n      var pa = parent[k];\n      if (pa !== -1) {\n        if (w[nque + pa] === 0) {\n          w[tail + pa] = w[tail + k];\n        }\n        w[next + w[tail + k]] = w[head + pa];\n        w[head + pa] = w[next + i];\n        w[nque + pa] += w[nque + k];\n      }\n    }\n    for (i = 0; i < m; i++) {\n      if (pinv[i] < 0) {\n        pinv[i] = k++;\n      }\n    }\n    return true;\n  }\n});","/**\n * Permutes a sparse matrix C = P * A * Q\n *\n * @param {SparseMatrix}  a         The Matrix A\n * @param {Array}   pinv            The row permutation vector\n * @param {Array}   q               The column permutation vector\n * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n *\n * @return {Matrix}                 C = P * A * Q, null on error\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPermute(a, pinv, q, values) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  var adt = a._datatype;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n  // c arrays\n  var cvalues = values && a._values ? [] : null;\n  var cindex = []; // (aptr[n])\n  var cptr = []; // (n + 1)\n  // initialize vars\n  var nz = 0;\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // column k of C is column q[k] of A\n    cptr[k] = nz;\n    // apply column permutation\n    var j = q ? q[k] : k;\n    // loop values in column j of A\n    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n      // row i of A is row pinv[i] of C\n      var r = pinv ? pinv[aindex[t]] : aindex[t];\n      // index\n      cindex[nz] = r;\n      // check we need to populate values\n      if (cvalues) {\n        cvalues[nz] = avalues[t];\n      }\n      // increment number of nonzero elements\n      nz++;\n    }\n  }\n  // finalize the last column of C\n  cptr[n] = nz;\n  // return C matrix\n  return a.createSparseMatrix({\n    values: cvalues,\n    index: cindex,\n    ptr: cptr,\n    size: [m, n],\n    datatype: adt\n  });\n}","import { csTdfs } from './csTdfs.js';\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  }\n  // vars\n  var k = 0;\n  var j;\n  // allocate result\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n  var w = []; // (3 * n)\n  var head = 0;\n  var next = n;\n  var stack = 2 * n;\n  // initialize workspace\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  }\n  // traverse nodes in reverse order\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    }\n    // add j to list of its parent\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  }\n  // loop nodes\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    }\n    // depth-first search\n    k = csTdfs(j, k, w, head, next, post, stack);\n  }\n  return post;\n}","/**\n * Depth-first search and postorder of a tree rooted at node j\n *\n * @param {Number}  j               The tree node\n * @param {Number}  k\n * @param {Array}   w               The workspace array\n * @param {Number}  head            The index offset within the workspace for the head array\n * @param {Number}  next            The index offset within the workspace for the next array\n * @param {Array}   post            The post ordering array\n * @param {Number}  stack           The index offset within the workspace for the stack array\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csTdfs(j, k, w, head, next, post, stack) {\n  // variables\n  var top = 0;\n  // place j on the stack\n  w[stack] = j;\n  // while (stack is not empty)\n  while (top >= 0) {\n    // p = top of stack\n    var p = w[stack + top];\n    // i = youngest child of p\n    var i = w[head + p];\n    if (i === -1) {\n      // p has no unordered children left\n      top--;\n      // node p is the kth postordered node\n      post[k++] = p;\n    } else {\n      // remove i from children of p\n      w[head + p] = w[next + i];\n      // increment top\n      ++top;\n      // start dfs on child node i\n      w[stack + top] = i;\n    }\n  }\n  return k;\n}","/**\n * Computes the elimination tree of Matrix A (using triu(A)) or the\n * elimination tree of A'A without forming A'A.\n *\n * @param {Matrix}  a               The A Matrix\n * @param {boolean} ata             A value of true the function computes the etree of A'A\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csEtree(a, ata) {\n  // check inputs\n  if (!a) {\n    return null;\n  }\n  // a arrays\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n\n  // allocate result\n  var parent = []; // (n)\n\n  // allocate workspace\n  var w = []; // (n + (ata ? m : 0))\n  var ancestor = 0; // first n entries in w\n  var prev = n; // last m entries (ata = true)\n\n  var i, inext;\n\n  // check we are calculating A'A\n  if (ata) {\n    // initialize workspace\n    for (i = 0; i < m; i++) {\n      w[prev + i] = -1;\n    }\n  }\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // node k has no parent yet\n    parent[k] = -1;\n    // nor does k have an ancestor\n    w[ancestor + k] = -1;\n    // values in column k\n    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n      // row\n      var r = aindex[p];\n      // node\n      i = ata ? w[prev + r] : r;\n      // traverse from i to k\n      for (; i !== -1 && i < k; i = inext) {\n        // inext = ancestor of i\n        inext = w[ancestor + i];\n        // path compression\n        w[ancestor + i] = k;\n        // check no anc., parent is k\n        if (inext === -1) {\n          parent[i] = k;\n        }\n      }\n      if (ata) {\n        w[prev + r] = k;\n      }\n    }\n  }\n  return parent;\n}","import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    csFkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n\n    // allocate result (n+1)\n    var P = [];\n\n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1); // next n + 1 entries\n    var elen = 4 * (n + 1); // next n + 1 entries\n    var degree = 5 * (n + 1); // next n + 1 entries\n    var w = 6 * (n + 1); // next n + 1 entries\n    var hhead = 7 * (n + 1); // last n + 1 entries\n\n    // use P as workspace for last\n    var last = P;\n\n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n\n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n\n    // minimum degree node\n    var mindeg = 0;\n\n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n\n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      }\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] === 0\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          }\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          }\n          // check we need to remove i from degree list\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) {\n        cnz = pk2;\n      }\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n\n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n\n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        }\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n\n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n\n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) {\n            continue;\n          }\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n\n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) {\n          continue;\n        }\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n\n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        }\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        }\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n\n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n\n    // fix assembly tree\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    }\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      }\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n\n    // check order = 2, drop dense columns from M'\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        }\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n\n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  }\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  }\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n        if (h !== -1) {\n          last[h] = i;\n        }\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  }\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n      mark = 2;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  }\n  function _diag(i, j) {\n    return i !== j;\n  }\n});","/**\n * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n *\n * @param {Matrix}   a              The sparse matrix\n * @param {function} callback       The callback function, function will be invoked with the following args:\n *                                    - The entry row\n *                                    - The entry column\n *                                    - The entry value\n *                                    - The state parameter\n * @param {any}      other          The state\n *\n * @return                          The number of nonzero elements in the matrix\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFkeep(a, callback, other) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // columns\n  var n = asize[1];\n  // nonzero items\n  var nz = 0;\n  // loop columns\n  for (var j = 0; j < n; j++) {\n    // get current location of col j\n    var p = aptr[j];\n    // record new location of col j\n    aptr[j] = nz;\n    for (; p < aptr[j + 1]; p++) {\n      // check we need to keep this item\n      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n        // keep A(i,j)\n        aindex[nz] = aindex[p];\n        // check we need to process values (pattern only)\n        if (avalues) {\n          avalues[nz] = avalues[p];\n        }\n        // increment nonzero items\n        nz++;\n      }\n    }\n  }\n  // finalize A\n  aptr[n] = nz;\n  // trim arrays\n  aindex.splice(nz, aindex.length - nz);\n  // check we need to process values (pattern only)\n  if (avalues) {\n    avalues.splice(nz, avalues.length - nz);\n  }\n  // return number of nonzero items\n  return nz;\n}","/**\n * This function \"flips\" its input about the integer -1.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFlip(i) {\n  // flip the value\n  return -i - 2;\n}","import { factory } from '../../../utils/factory.js';\nimport { csLeaf } from './csLeaf.js';\nvar name = 'csCounts';\nvar dependencies = ['transpose'];\nexport var createCsCounts = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    transpose\n  } = _ref;\n  /**\n   * Computes the column counts using the upper triangular part of A.\n   * It transposes A internally, none of the input parameters are modified.\n   *\n   * @param {Matrix} a           The sparse matrix A\n   *\n   * @param {Matrix} ata         Count the columns of A'A instead\n   *\n   * @return                     An array of size n of the column counts or null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function (a, parent, post, ata) {\n    // check inputs\n    if (!a || !parent || !post) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // variables\n    var i, j, k, J, p, p0, p1;\n\n    // workspace size\n    var s = 4 * n + (ata ? n + m + 1 : 0);\n    // allocate workspace\n    var w = []; // (s)\n    var ancestor = 0; // first n entries\n    var maxfirst = n; // next n entries\n    var prevleaf = 2 * n; // next n entries\n    var first = 3 * n; // next n entries\n    var head = 4 * n; // next n + 1 entries (used when ata is true)\n    var next = 5 * n + 1; // last entries in workspace\n    // clear workspace w[0..s-1]\n    for (k = 0; k < s; k++) {\n      w[k] = -1;\n    }\n\n    // allocate result\n    var colcount = []; // (n)\n\n    // AT = A'\n    var at = transpose(a);\n    // at arrays\n    var tindex = at._index;\n    var tptr = at._ptr;\n\n    // find w[first + j]\n    for (k = 0; k < n; k++) {\n      j = post[k];\n      // colcount[j]=1 if j is a leaf\n      colcount[j] = w[first + j] === -1 ? 1 : 0;\n      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {\n        w[first + j] = k;\n      }\n    }\n\n    // initialize ata if needed\n    if (ata) {\n      // invert post\n      for (k = 0; k < n; k++) {\n        w[post[k]] = k;\n      }\n      // loop rows (columns in AT)\n      for (i = 0; i < m; i++) {\n        // values in column i of AT\n        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {\n          k = Math.min(k, w[tindex[p]]);\n        }\n        // place row i in linked list k\n        w[next + i] = w[head + k];\n        w[head + k] = i;\n      }\n    }\n\n    // each node in its own set\n    for (i = 0; i < n; i++) {\n      w[ancestor + i] = i;\n    }\n    for (k = 0; k < n; k++) {\n      // j is the kth node in postordered etree\n      j = post[k];\n      // check j is not a root\n      if (parent[j] !== -1) {\n        colcount[parent[j]]--;\n      }\n\n      // J=j for LL'=A case\n      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {\n        for (p = tptr[J]; p < tptr[J + 1]; p++) {\n          i = tindex[p];\n          var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n          // check A(i,j) is in skeleton\n          if (r.jleaf >= 1) {\n            colcount[j]++;\n          }\n          // check account for overlap in q\n          if (r.jleaf === 2) {\n            colcount[r.q]--;\n          }\n        }\n      }\n      if (parent[j] !== -1) {\n        w[ancestor + j] = parent[j];\n      }\n    }\n    // sum up colcount's of each child\n    for (j = 0; j < n; j++) {\n      if (parent[j] !== -1) {\n        colcount[parent[j]] += colcount[j];\n      }\n    }\n    return colcount;\n  };\n});","/**\n * This function determines if j is a leaf of the ith row subtree.\n * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n *\n * @param {Number}  i               The ith row subtree\n * @param {Number}  j               The node to test\n * @param {Array}   w               The workspace array\n * @param {Number}  first           The index offset within the workspace for the first array\n * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n *\n * @return {Object}\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {\n  var s, sparent;\n\n  // our result\n  var jleaf = 0;\n  var q;\n\n  // check j is a leaf\n  if (i <= j || w[first + j] <= w[maxfirst + i]) {\n    return -1;\n  }\n  // update max first[j] seen so far\n  w[maxfirst + i] = w[first + j];\n  // jprev = previous leaf of ith subtree\n  var jprev = w[prevleaf + i];\n  w[prevleaf + i] = j;\n\n  // check j is first or subsequent leaf\n  if (jprev === -1) {\n    // 1st leaf, q = root of ith subtree\n    jleaf = 1;\n    q = i;\n  } else {\n    // update jleaf\n    jleaf = 2;\n    // q = least common ancester (jprev,j)\n    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {\n      ;\n    }\n    for (s = jprev; s !== q; s = sparent) {\n      // path compression\n      sparent = w[ancestor + s];\n      w[ancestor + s] = q;\n    }\n  }\n  return {\n    jleaf,\n    q\n  };\n}","import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    }\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz)\n    var lptr = []; // (n + 1)\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz)\n    var uindex = []; // (unz)\n    var uptr = []; // (n + 1)\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n)\n    // vars\n    var i, p;\n    // allocate arrays\n    var x = []; // (n)\n    var xi = []; // (2 * n)\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      }\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      }\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    }\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);\n    // return LU factor\n    return {\n      L,\n      U,\n      pinv\n    };\n  };\n});","import { csReach } from './csReach.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSpsolve';\nvar dependencies = ['divideScalar', 'multiply', 'subtract'];\nexport var createCsSpsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    divideScalar,\n    multiply,\n    subtract\n  } = _ref;\n  /**\n   * The function csSpsolve() computes the solution to G * x = bk, where bk is the\n   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U\n   * is upper triangular with the diagonal entry as the last entry in each column.\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   x               The soluton to the linear system G * x = b\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSpsolve(g, b, k, xi, x, pinv, lo) {\n    // g arrays\n    var gvalues = g._values;\n    var gindex = g._index;\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // columns\n    var n = gsize[1];\n    // b arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // vars\n    var p, p0, p1, q;\n    // xi[top..n-1] = csReach(B(:,k))\n    var top = csReach(g, b, k, xi, pinv);\n    // clear x\n    for (p = top; p < n; p++) {\n      x[xi[p]] = 0;\n    }\n    // scatter b\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n      x[bindex[p]] = bvalues[p];\n    }\n    // loop columns\n    for (var px = top; px < n; px++) {\n      // x array index for px\n      var j = xi[px];\n      // apply permutation vector (U x = b), j maps to column J of G\n      var J = pinv ? pinv[j] : j;\n      // check column J is empty\n      if (J < 0) {\n        continue;\n      }\n      // column value indeces in G, p0 <= p < p1\n      p0 = gptr[J];\n      p1 = gptr[J + 1];\n      // x(j) /= G(j,j)\n      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]);\n      // first entry L(j,j)\n      p = lo ? p0 + 1 : p0;\n      q = lo ? p1 : p1 - 1;\n      // loop\n      for (; p < q; p++) {\n        // row\n        var i = gindex[p];\n        // x(i) -= G(i,j) * x(j)\n        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n      }\n    }\n    // return top of stack\n    return top;\n  };\n});","import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csDfs } from './csDfs.js';\n\n/**\n * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1\n * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n *\n * @param {Matrix}  g               The G matrix\n * @param {Matrix}  b               The B matrix\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector\n *\n * @return {Number}                 The index for the nonzero pattern\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csReach(g, b, k, xi, pinv) {\n  // g arrays\n  var gptr = g._ptr;\n  var gsize = g._size;\n  // b arrays\n  var bindex = b._index;\n  var bptr = b._ptr;\n  // columns\n  var n = gsize[1];\n  // vars\n  var p, p0, p1;\n  // initialize top\n  var top = n;\n  // loop column indeces in B\n  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n    // node i\n    var i = bindex[p];\n    // check node i is marked\n    if (!csMarked(gptr, i)) {\n      // start a dfs at unmarked node i\n      top = csDfs(i, g, top, xi, pinv);\n    }\n  }\n  // loop columns from top -> n - 1\n  for (p = top; p < n; p++) {\n    // restore G\n    csMark(gptr, xi[p]);\n  }\n  return top;\n}","/**\n * Checks if the node at w[j] is marked\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMarked(w, j) {\n  // check node is marked\n  return w[j] < 0;\n}","import { csFlip } from './csFlip.js';\n\n/**\n * Marks the node at w[j]\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMark(w, j) {\n  // mark w[j]\n  w[j] = csFlip(w[j]);\n}","import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csUnflip } from './csUnflip.js';\n\n/**\n * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n * at nodes in B (see csReach()).\n *\n * @param {Number}  j               The starting node for the DFS algorithm\n * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n * @param {Number}  top             Start index in stack xi[top..n-1]\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n *\n * @return {Number}                 New value of top\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csDfs(j, g, top, xi, pinv) {\n  // g arrays\n  var index = g._index;\n  var ptr = g._ptr;\n  var size = g._size;\n  // columns\n  var n = size[1];\n  // vars\n  var i, p, p2;\n  // initialize head\n  var head = 0;\n  // initialize the recursion stack\n  xi[0] = j;\n  // loop\n  while (head >= 0) {\n    // get j from the top of the recursion stack\n    j = xi[head];\n    // apply permutation vector\n    var jnew = pinv ? pinv[j] : j;\n    // check node j is marked\n    if (!csMarked(ptr, j)) {\n      // mark node j as visited\n      csMark(ptr, j);\n      // update stack (last n entries in xi)\n      xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);\n    }\n    // node j done if no unvisited neighbors\n    var done = 1;\n    // examine all neighbors of j, stack (last n entries in xi)\n    for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {\n      // consider neighbor node i\n      i = index[p];\n      // check we have visited node i, skip it\n      if (csMarked(ptr, i)) {\n        continue;\n      }\n      // pause depth-first search of node j, update stack (last n entries in xi)\n      xi[n + head] = p;\n      // start dfs at node i\n      xi[++head] = i;\n      // node j is not done\n      done = 0;\n      // break, to start dfs(i)\n      break;\n    }\n    // check depth-first search at node j is done\n    if (done) {\n      // remove j from the recursion stack\n      head--;\n      // and place in the output stack\n      xi[--top] = j;\n    }\n  }\n  return top;\n}","import { csFlip } from './csFlip.js';\n\n/**\n * Flips the value if it is negative of returns the same value otherwise.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csUnflip(i) {\n  // flip the value if it is negative\n  return i < 0 ? csFlip(i) : i;\n}","import { isArray, isMatrix } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nimport { csIpvec } from '../sparse/csIpvec.js';\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nexport var createLusolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    lup,\n    slu,\n    usolve,\n    lsolve,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  function _toMatrix(a) {\n    if (isMatrix(a)) {\n      return a;\n    }\n    if (isArray(a)) {\n      return matrix(a);\n    }\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u);\n\n    // apply row permutations if needed (b is a DenseMatrix)\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = csIpvec(p, b._data);\n    }\n\n    // use forward substitution to resolve L * y = b\n    var y = lsolve(l, b);\n    // use backward substitution to resolve U * x = y\n    var x = usolve(u, y);\n\n    // apply column permutations if needed (x is a DenseMatrix)\n    if (q) {\n      x._data = csIpvec(q, x._data);\n    }\n    return x;\n  }\n});","/**\n * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n *\n * @param {Array} p           The permutation vector of length n. null value denotes identity\n * @param {Array} b           The input vector\n *\n * @return {Array}            The output vector x = P'b\n */\nexport function csIpvec(p, b) {\n  // vars\n  var k;\n  var n = b.length;\n  var x = [];\n  // check permutation vector was provided, p = null denotes identity\n  if (p) {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // apply permutation\n      x[p[k]] = b[k];\n    }\n  } else {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // x[i] = b[i]\n      x[k] = b[k];\n    }\n  }\n  return x;\n}","import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n            var _denom = unaryMinus(multiply(3, _a));\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)),\n              // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            }\n            // OK, we have three distinct roots\n            var Ccubed;\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n              return r;\n            });\n          }\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});","import { isHelp } from '../utils/is.js';\nimport { clone } from '../utils/object.js';\nimport { format } from '../utils/string.js';\nimport { factory } from '../utils/factory.js';\nvar name = 'Help';\nvar dependencies = ['parse'];\nexport var createHelpClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse\n  } = _ref;\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!doc) throw new Error('Argument \"doc\" missing');\n    this.doc = doc;\n  }\n\n  /**\n   * Attach type information\n   */\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n      var scope = {};\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n        var res = void 0;\n        try {\n          // note: res can be undefined when `expr` is an empty string\n          res = parse(expr).compile().evaluate(scope);\n        } catch (e) {\n          res = e;\n        }\n        if (res !== undefined && !isHelp(res)) {\n          desc += '        ' + format(res, {\n            precision: 14\n          }) + '\\n';\n        }\n      }\n      desc += '\\n';\n    }\n    if (doc.mayThrow && doc.mayThrow.length) {\n      desc += 'Throws: ' + doc.mayThrow.join(', ') + '\\n\\n';\n    }\n    if (doc.seealso && doc.seealso.length) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n    return desc;\n  };\n\n  /**\n   * Export the help object to JSON\n   */\n  Help.prototype.toJSON = function () {\n    var obj = clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n  Help.fromJSON = function (json) {\n    var doc = {};\n    Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {\n      doc[prop] = json[prop];\n    });\n    return new Help(doc);\n  };\n\n  /**\n   * Returns a string representation of the Help object\n   */\n  Help.prototype.valueOf = Help.prototype.toString;\n  return Help;\n}, {\n  isClass: true\n});","import { isChain } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    math,\n    typed\n  } = _ref;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, () => arg0[_name]);\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { embeddedDocs } from '../embeddedDocs/embeddedDocs.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nvar name = 'help';\nvar dependencies = ['typed', 'mathWithTransform', 'Help'];\nexport var createHelp = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    mathWithTransform,\n    Help\n  } = _ref;\n  /**\n   * Retrieve help on a function or data type.\n   * Help files are retrieved from the embedded documentation in math.docs.\n   *\n   * Syntax:\n   *\n   *    math.help(search)\n   *\n   * Examples:\n   *\n   *    console.log(math.help('sin').toString())\n   *    console.log(math.help(math.add).toString())\n   *    console.log(math.help(math.add).toJSON())\n   *\n   * @param {Function | string | Object} search   A function or function name\n   *                                              for which to get help\n   * @return {Help} A help object\n   */\n  return typed(name, {\n    any: function any(search) {\n      var prop;\n      var searchName = search;\n      if (typeof search !== 'string') {\n        for (prop in mathWithTransform) {\n          // search in functions and constants\n          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {\n            searchName = prop;\n            break;\n          }\n        }\n\n        /* TODO: implement help for data types\n         if (!text) {\n         // search data type\n         for (prop in math.type) {\n         if (hasOwnProperty(math, prop)) {\n         if (search === math.type[prop]) {\n         text = prop\n         break\n         }\n         }\n         }\n         }\n         */\n      }\n\n      var doc = getSafeProperty(embeddedDocs, searchName);\n      if (!doc) {\n        var searchText = typeof searchName === 'function' ? searchName.name : searchName;\n        throw new Error('No documentation found on \"' + searchText + '\"');\n      }\n      return new Help(doc);\n    }\n  });\n});","import { eDocs } from './constants/e.js';\nimport { falseDocs } from './constants/false.js';\nimport { iDocs } from './constants/i.js';\nimport { InfinityDocs } from './constants/Infinity.js';\nimport { LN10Docs } from './constants/LN10.js';\nimport { LN2Docs } from './constants/LN2.js';\nimport { LOG10EDocs } from './constants/LOG10E.js';\nimport { LOG2EDocs } from './constants/LOG2E.js';\nimport { NaNDocs } from './constants/NaN.js';\nimport { nullDocs } from './constants/null.js';\nimport { phiDocs } from './constants/phi.js';\nimport { piDocs } from './constants/pi.js';\nimport { SQRT12Docs } from './constants/SQRT1_2.js';\nimport { SQRT2Docs } from './constants/SQRT2.js';\nimport { tauDocs } from './constants/tau.js';\nimport { trueDocs } from './constants/true.js';\nimport { versionDocs } from './constants/version.js';\nimport { bignumberDocs } from './construction/bignumber.js';\nimport { booleanDocs } from './construction/boolean.js';\nimport { complexDocs } from './construction/complex.js';\nimport { createUnitDocs } from './construction/createUnit.js';\nimport { fractionDocs } from './construction/fraction.js';\nimport { indexDocs } from './construction/index.js';\nimport { matrixDocs } from './construction/matrix.js';\nimport { numberDocs } from './construction/number.js';\nimport { sparseDocs } from './construction/sparse.js';\nimport { splitUnitDocs } from './construction/splitUnit.js';\nimport { stringDocs } from './construction/string.js';\nimport { unitDocs } from './construction/unit.js';\nimport { configDocs } from './core/config.js';\nimport { importDocs } from './core/import.js';\nimport { typedDocs } from './core/typed.js';\nimport { derivativeDocs } from './function/algebra/derivative.js';\nimport { leafCountDocs } from './function/algebra/leafCount.js';\nimport { lsolveDocs } from './function/algebra/lsolve.js';\nimport { lsolveAllDocs } from './function/algebra/lsolveAll.js';\nimport { lupDocs } from './function/algebra/lup.js';\nimport { lusolveDocs } from './function/algebra/lusolve.js';\nimport { polynomialRootDocs } from './function/algebra/polynomialRoot.js';\nimport { qrDocs } from './function/algebra/qr.js';\nimport { rationalizeDocs } from './function/algebra/rationalize.js';\nimport { resolveDocs } from './function/algebra/resolve.js';\nimport { simplifyDocs } from './function/algebra/simplify.js';\nimport { simplifyConstantDocs } from './function/algebra/simplifyConstant.js';\nimport { simplifyCoreDocs } from './function/algebra/simplifyCore.js';\nimport { sluDocs } from './function/algebra/slu.js';\nimport { symbolicEqualDocs } from './function/algebra/symbolicEqual.js';\nimport { usolveDocs } from './function/algebra/usolve.js';\nimport { usolveAllDocs } from './function/algebra/usolveAll.js';\nimport { absDocs } from './function/arithmetic/abs.js';\nimport { addDocs } from './function/arithmetic/add.js';\nimport { cbrtDocs } from './function/arithmetic/cbrt.js';\nimport { ceilDocs } from './function/arithmetic/ceil.js';\nimport { cubeDocs } from './function/arithmetic/cube.js';\nimport { divideDocs } from './function/arithmetic/divide.js';\nimport { dotDivideDocs } from './function/arithmetic/dotDivide.js';\nimport { dotMultiplyDocs } from './function/arithmetic/dotMultiply.js';\nimport { dotPowDocs } from './function/arithmetic/dotPow.js';\nimport { expDocs } from './function/arithmetic/exp.js';\nimport { expmDocs } from './function/arithmetic/expm.js';\nimport { expm1Docs } from './function/arithmetic/expm1.js';\nimport { fixDocs } from './function/arithmetic/fix.js';\nimport { floorDocs } from './function/arithmetic/floor.js';\nimport { gcdDocs } from './function/arithmetic/gcd.js';\nimport { hypotDocs } from './function/arithmetic/hypot.js';\nimport { invmodDocs } from './function/arithmetic/invmod.js';\nimport { lcmDocs } from './function/arithmetic/lcm.js';\nimport { logDocs } from './function/arithmetic/log.js';\nimport { log10Docs } from './function/arithmetic/log10.js';\nimport { log1pDocs } from './function/arithmetic/log1p.js';\nimport { log2Docs } from './function/arithmetic/log2.js';\nimport { modDocs } from './function/arithmetic/mod.js';\nimport { multiplyDocs } from './function/arithmetic/multiply.js';\nimport { normDocs } from './function/arithmetic/norm.js';\nimport { nthRootDocs } from './function/arithmetic/nthRoot.js';\nimport { nthRootsDocs } from './function/arithmetic/nthRoots.js';\nimport { powDocs } from './function/arithmetic/pow.js';\nimport { roundDocs } from './function/arithmetic/round.js';\nimport { signDocs } from './function/arithmetic/sign.js';\nimport { sqrtDocs } from './function/arithmetic/sqrt.js';\nimport { sqrtmDocs } from './function/arithmetic/sqrtm.js';\nimport { sylvesterDocs } from './function/matrix/sylvester.js';\nimport { schurDocs } from './function/matrix/schur.js';\nimport { lyapDocs } from './function/matrix/lyap.js';\nimport { squareDocs } from './function/arithmetic/square.js';\nimport { subtractDocs } from './function/arithmetic/subtract.js';\nimport { unaryMinusDocs } from './function/arithmetic/unaryMinus.js';\nimport { unaryPlusDocs } from './function/arithmetic/unaryPlus.js';\nimport { xgcdDocs } from './function/arithmetic/xgcd.js';\nimport { bitAndDocs } from './function/bitwise/bitAnd.js';\nimport { bitNotDocs } from './function/bitwise/bitNot.js';\nimport { bitOrDocs } from './function/bitwise/bitOr.js';\nimport { bitXorDocs } from './function/bitwise/bitXor.js';\nimport { leftShiftDocs } from './function/bitwise/leftShift.js';\nimport { rightArithShiftDocs } from './function/bitwise/rightArithShift.js';\nimport { rightLogShiftDocs } from './function/bitwise/rightLogShift.js';\nimport { bellNumbersDocs } from './function/combinatorics/bellNumbers.js';\nimport { catalanDocs } from './function/combinatorics/catalan.js';\nimport { compositionDocs } from './function/combinatorics/composition.js';\nimport { stirlingS2Docs } from './function/combinatorics/stirlingS2.js';\nimport { argDocs } from './function/complex/arg.js';\nimport { conjDocs } from './function/complex/conj.js';\nimport { imDocs } from './function/complex/im.js';\nimport { reDocs } from './function/complex/re.js';\nimport { evaluateDocs } from './function/expression/evaluate.js';\nimport { helpDocs } from './function/expression/help.js';\nimport { distanceDocs } from './function/geometry/distance.js';\nimport { intersectDocs } from './function/geometry/intersect.js';\nimport { andDocs } from './function/logical/and.js';\nimport { notDocs } from './function/logical/not.js';\nimport { orDocs } from './function/logical/or.js';\nimport { xorDocs } from './function/logical/xor.js';\nimport { columnDocs } from './function/matrix/column.js';\nimport { concatDocs } from './function/matrix/concat.js';\nimport { countDocs } from './function/matrix/count.js';\nimport { crossDocs } from './function/matrix/cross.js';\nimport { ctransposeDocs } from './function/matrix/ctranspose.js';\nimport { detDocs } from './function/matrix/det.js';\nimport { diagDocs } from './function/matrix/diag.js';\nimport { diffDocs } from './function/matrix/diff.js';\nimport { dotDocs } from './function/matrix/dot.js';\nimport { eigsDocs } from './function/matrix/eigs.js';\nimport { filterDocs } from './function/matrix/filter.js';\nimport { flattenDocs } from './function/matrix/flatten.js';\nimport { forEachDocs } from './function/matrix/forEach.js';\nimport { getMatrixDataTypeDocs } from './function/matrix/getMatrixDataType.js';\nimport { identityDocs } from './function/matrix/identity.js';\nimport { invDocs } from './function/matrix/inv.js';\nimport { pinvDocs } from './function/matrix/pinv.js';\nimport { kronDocs } from './function/matrix/kron.js';\nimport { mapDocs } from './function/matrix/map.js';\nimport { matrixFromColumnsDocs } from './function/matrix/matrixFromColumns.js';\nimport { matrixFromFunctionDocs } from './function/matrix/matrixFromFunction.js';\nimport { matrixFromRowsDocs } from './function/matrix/matrixFromRows.js';\nimport { onesDocs } from './function/matrix/ones.js';\nimport { partitionSelectDocs } from './function/matrix/partitionSelect.js';\nimport { rangeDocs } from './function/matrix/range.js';\nimport { reshapeDocs } from './function/matrix/reshape.js';\nimport { resizeDocs } from './function/matrix/resize.js';\nimport { rotateDocs } from './function/matrix/rotate.js';\nimport { rotationMatrixDocs } from './function/matrix/rotationMatrix.js';\nimport { rowDocs } from './function/matrix/row.js';\nimport { sizeDocs } from './function/matrix/size.js';\nimport { sortDocs } from './function/matrix/sort.js';\nimport { squeezeDocs } from './function/matrix/squeeze.js';\nimport { subsetDocs } from './function/matrix/subset.js';\nimport { traceDocs } from './function/matrix/trace.js';\nimport { transposeDocs } from './function/matrix/transpose.js';\nimport { zerosDocs } from './function/matrix/zeros.js';\nimport { fftDocs } from './function/matrix/fft.js';\nimport { ifftDocs } from './function/matrix/ifft.js';\nimport { combinationsDocs } from './function/probability/combinations.js';\nimport { combinationsWithRepDocs } from './function/probability/combinationsWithRep.js';\nimport { factorialDocs } from './function/probability/factorial.js';\nimport { gammaDocs } from './function/probability/gamma.js';\nimport { lgammaDocs } from './function/probability/lgamma.js';\nimport { kldivergenceDocs } from './function/probability/kldivergence.js';\nimport { multinomialDocs } from './function/probability/multinomial.js';\nimport { permutationsDocs } from './function/probability/permutations.js';\nimport { pickRandomDocs } from './function/probability/pickRandom.js';\nimport { randomDocs } from './function/probability/random.js';\nimport { randomIntDocs } from './function/probability/randomInt.js';\nimport { compareDocs } from './function/relational/compare.js';\nimport { compareNaturalDocs } from './function/relational/compareNatural.js';\nimport { compareTextDocs } from './function/relational/compareText.js';\nimport { deepEqualDocs } from './function/relational/deepEqual.js';\nimport { equalDocs } from './function/relational/equal.js';\nimport { equalTextDocs } from './function/relational/equalText.js';\nimport { largerDocs } from './function/relational/larger.js';\nimport { largerEqDocs } from './function/relational/largerEq.js';\nimport { smallerDocs } from './function/relational/smaller.js';\nimport { smallerEqDocs } from './function/relational/smallerEq.js';\nimport { unequalDocs } from './function/relational/unequal.js';\nimport { setCartesianDocs } from './function/set/setCartesian.js';\nimport { setDifferenceDocs } from './function/set/setDifference.js';\nimport { setDistinctDocs } from './function/set/setDistinct.js';\nimport { setIntersectDocs } from './function/set/setIntersect.js';\nimport { setIsSubsetDocs } from './function/set/setIsSubset.js';\nimport { setMultiplicityDocs } from './function/set/setMultiplicity.js';\nimport { setPowersetDocs } from './function/set/setPowerset.js';\nimport { setSizeDocs } from './function/set/setSize.js';\nimport { setSymDifferenceDocs } from './function/set/setSymDifference.js';\nimport { setUnionDocs } from './function/set/setUnion.js';\nimport { erfDocs } from './function/special/erf.js';\nimport { madDocs } from './function/statistics/mad.js';\nimport { maxDocs } from './function/statistics/max.js';\nimport { meanDocs } from './function/statistics/mean.js';\nimport { medianDocs } from './function/statistics/median.js';\nimport { minDocs } from './function/statistics/min.js';\nimport { modeDocs } from './function/statistics/mode.js';\nimport { prodDocs } from './function/statistics/prod.js';\nimport { quantileSeqDocs } from './function/statistics/quantileSeq.js';\nimport { stdDocs } from './function/statistics/std.js';\nimport { cumSumDocs } from './function/statistics/cumsum.js';\nimport { sumDocs } from './function/statistics/sum.js';\nimport { varianceDocs } from './function/statistics/variance.js';\nimport { acosDocs } from './function/trigonometry/acos.js';\nimport { acoshDocs } from './function/trigonometry/acosh.js';\nimport { acotDocs } from './function/trigonometry/acot.js';\nimport { acothDocs } from './function/trigonometry/acoth.js';\nimport { acscDocs } from './function/trigonometry/acsc.js';\nimport { acschDocs } from './function/trigonometry/acsch.js';\nimport { asecDocs } from './function/trigonometry/asec.js';\nimport { asechDocs } from './function/trigonometry/asech.js';\nimport { asinDocs } from './function/trigonometry/asin.js';\nimport { asinhDocs } from './function/trigonometry/asinh.js';\nimport { atanDocs } from './function/trigonometry/atan.js';\nimport { atan2Docs } from './function/trigonometry/atan2.js';\nimport { atanhDocs } from './function/trigonometry/atanh.js';\nimport { cosDocs } from './function/trigonometry/cos.js';\nimport { coshDocs } from './function/trigonometry/cosh.js';\nimport { cotDocs } from './function/trigonometry/cot.js';\nimport { cothDocs } from './function/trigonometry/coth.js';\nimport { cscDocs } from './function/trigonometry/csc.js';\nimport { cschDocs } from './function/trigonometry/csch.js';\nimport { secDocs } from './function/trigonometry/sec.js';\nimport { sechDocs } from './function/trigonometry/sech.js';\nimport { sinDocs } from './function/trigonometry/sin.js';\nimport { sinhDocs } from './function/trigonometry/sinh.js';\nimport { tanDocs } from './function/trigonometry/tan.js';\nimport { tanhDocs } from './function/trigonometry/tanh.js';\nimport { toDocs } from './function/units/to.js';\nimport { binDocs } from './function/utils/bin.js';\nimport { cloneDocs } from './function/utils/clone.js';\nimport { formatDocs } from './function/utils/format.js';\nimport { hasNumericValueDocs } from './function/utils/hasNumericValue.js';\nimport { hexDocs } from './function/utils/hex.js';\nimport { isIntegerDocs } from './function/utils/isInteger.js';\nimport { isNaNDocs } from './function/utils/isNaN.js';\nimport { isNegativeDocs } from './function/utils/isNegative.js';\nimport { isNumericDocs } from './function/utils/isNumeric.js';\nimport { isPositiveDocs } from './function/utils/isPositive.js';\nimport { isPrimeDocs } from './function/utils/isPrime.js';\nimport { isZeroDocs } from './function/utils/isZero.js';\nimport { numericDocs } from './function/utils/numeric.js';\nimport { octDocs } from './function/utils/oct.js';\nimport { printDocs } from './function/utils/print.js';\nimport { typeOfDocs } from './function/utils/typeOf.js';\nexport var embeddedDocs = {\n  // construction functions\n  bignumber: bignumberDocs,\n  boolean: booleanDocs,\n  complex: complexDocs,\n  createUnit: createUnitDocs,\n  fraction: fractionDocs,\n  index: indexDocs,\n  matrix: matrixDocs,\n  number: numberDocs,\n  sparse: sparseDocs,\n  splitUnit: splitUnitDocs,\n  string: stringDocs,\n  unit: unitDocs,\n  // constants\n  e: eDocs,\n  E: eDocs,\n  false: falseDocs,\n  i: iDocs,\n  Infinity: InfinityDocs,\n  LN2: LN2Docs,\n  LN10: LN10Docs,\n  LOG2E: LOG2EDocs,\n  LOG10E: LOG10EDocs,\n  NaN: NaNDocs,\n  null: nullDocs,\n  pi: piDocs,\n  PI: piDocs,\n  phi: phiDocs,\n  SQRT1_2: SQRT12Docs,\n  SQRT2: SQRT2Docs,\n  tau: tauDocs,\n  true: trueDocs,\n  version: versionDocs,\n  // physical constants\n  // TODO: more detailed docs for physical constants\n  speedOfLight: {\n    description: 'Speed of light in vacuum',\n    examples: ['speedOfLight']\n  },\n  gravitationConstant: {\n    description: 'Newtonian constant of gravitation',\n    examples: ['gravitationConstant']\n  },\n  planckConstant: {\n    description: 'Planck constant',\n    examples: ['planckConstant']\n  },\n  reducedPlanckConstant: {\n    description: 'Reduced Planck constant',\n    examples: ['reducedPlanckConstant']\n  },\n  magneticConstant: {\n    description: 'Magnetic constant (vacuum permeability)',\n    examples: ['magneticConstant']\n  },\n  electricConstant: {\n    description: 'Electric constant (vacuum permeability)',\n    examples: ['electricConstant']\n  },\n  vacuumImpedance: {\n    description: 'Characteristic impedance of vacuum',\n    examples: ['vacuumImpedance']\n  },\n  coulomb: {\n    description: 'Coulomb\\'s constant',\n    examples: ['coulomb']\n  },\n  elementaryCharge: {\n    description: 'Elementary charge',\n    examples: ['elementaryCharge']\n  },\n  bohrMagneton: {\n    description: 'Borh magneton',\n    examples: ['bohrMagneton']\n  },\n  conductanceQuantum: {\n    description: 'Conductance quantum',\n    examples: ['conductanceQuantum']\n  },\n  inverseConductanceQuantum: {\n    description: 'Inverse conductance quantum',\n    examples: ['inverseConductanceQuantum']\n  },\n  // josephson: {description: 'Josephson constant', examples: ['josephson']},\n  magneticFluxQuantum: {\n    description: 'Magnetic flux quantum',\n    examples: ['magneticFluxQuantum']\n  },\n  nuclearMagneton: {\n    description: 'Nuclear magneton',\n    examples: ['nuclearMagneton']\n  },\n  klitzing: {\n    description: 'Von Klitzing constant',\n    examples: ['klitzing']\n  },\n  bohrRadius: {\n    description: 'Borh radius',\n    examples: ['bohrRadius']\n  },\n  classicalElectronRadius: {\n    description: 'Classical electron radius',\n    examples: ['classicalElectronRadius']\n  },\n  electronMass: {\n    description: 'Electron mass',\n    examples: ['electronMass']\n  },\n  fermiCoupling: {\n    description: 'Fermi coupling constant',\n    examples: ['fermiCoupling']\n  },\n  fineStructure: {\n    description: 'Fine-structure constant',\n    examples: ['fineStructure']\n  },\n  hartreeEnergy: {\n    description: 'Hartree energy',\n    examples: ['hartreeEnergy']\n  },\n  protonMass: {\n    description: 'Proton mass',\n    examples: ['protonMass']\n  },\n  deuteronMass: {\n    description: 'Deuteron Mass',\n    examples: ['deuteronMass']\n  },\n  neutronMass: {\n    description: 'Neutron mass',\n    examples: ['neutronMass']\n  },\n  quantumOfCirculation: {\n    description: 'Quantum of circulation',\n    examples: ['quantumOfCirculation']\n  },\n  rydberg: {\n    description: 'Rydberg constant',\n    examples: ['rydberg']\n  },\n  thomsonCrossSection: {\n    description: 'Thomson cross section',\n    examples: ['thomsonCrossSection']\n  },\n  weakMixingAngle: {\n    description: 'Weak mixing angle',\n    examples: ['weakMixingAngle']\n  },\n  efimovFactor: {\n    description: 'Efimov factor',\n    examples: ['efimovFactor']\n  },\n  atomicMass: {\n    description: 'Atomic mass constant',\n    examples: ['atomicMass']\n  },\n  avogadro: {\n    description: 'Avogadro\\'s number',\n    examples: ['avogadro']\n  },\n  boltzmann: {\n    description: 'Boltzmann constant',\n    examples: ['boltzmann']\n  },\n  faraday: {\n    description: 'Faraday constant',\n    examples: ['faraday']\n  },\n  firstRadiation: {\n    description: 'First radiation constant',\n    examples: ['firstRadiation']\n  },\n  loschmidt: {\n    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',\n    examples: ['loschmidt']\n  },\n  gasConstant: {\n    description: 'Gas constant',\n    examples: ['gasConstant']\n  },\n  molarPlanckConstant: {\n    description: 'Molar Planck constant',\n    examples: ['molarPlanckConstant']\n  },\n  molarVolume: {\n    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',\n    examples: ['molarVolume']\n  },\n  sackurTetrode: {\n    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',\n    examples: ['sackurTetrode']\n  },\n  secondRadiation: {\n    description: 'Second radiation constant',\n    examples: ['secondRadiation']\n  },\n  stefanBoltzmann: {\n    description: 'Stefan-Boltzmann constant',\n    examples: ['stefanBoltzmann']\n  },\n  wienDisplacement: {\n    description: 'Wien displacement law constant',\n    examples: ['wienDisplacement']\n  },\n  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},\n\n  molarMass: {\n    description: 'Molar mass constant',\n    examples: ['molarMass']\n  },\n  molarMassC12: {\n    description: 'Molar mass constant of carbon-12',\n    examples: ['molarMassC12']\n  },\n  gravity: {\n    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',\n    examples: ['gravity']\n  },\n  planckLength: {\n    description: 'Planck length',\n    examples: ['planckLength']\n  },\n  planckMass: {\n    description: 'Planck mass',\n    examples: ['planckMass']\n  },\n  planckTime: {\n    description: 'Planck time',\n    examples: ['planckTime']\n  },\n  planckCharge: {\n    description: 'Planck charge',\n    examples: ['planckCharge']\n  },\n  planckTemperature: {\n    description: 'Planck temperature',\n    examples: ['planckTemperature']\n  },\n  // functions - algebra\n  derivative: derivativeDocs,\n  lsolve: lsolveDocs,\n  lsolveAll: lsolveAllDocs,\n  lup: lupDocs,\n  lusolve: lusolveDocs,\n  leafCount: leafCountDocs,\n  polynomialRoot: polynomialRootDocs,\n  resolve: resolveDocs,\n  simplify: simplifyDocs,\n  simplifyConstant: simplifyConstantDocs,\n  simplifyCore: simplifyCoreDocs,\n  symbolicEqual: symbolicEqualDocs,\n  rationalize: rationalizeDocs,\n  slu: sluDocs,\n  usolve: usolveDocs,\n  usolveAll: usolveAllDocs,\n  qr: qrDocs,\n  // functions - arithmetic\n  abs: absDocs,\n  add: addDocs,\n  cbrt: cbrtDocs,\n  ceil: ceilDocs,\n  cube: cubeDocs,\n  divide: divideDocs,\n  dotDivide: dotDivideDocs,\n  dotMultiply: dotMultiplyDocs,\n  dotPow: dotPowDocs,\n  exp: expDocs,\n  expm: expmDocs,\n  expm1: expm1Docs,\n  fix: fixDocs,\n  floor: floorDocs,\n  gcd: gcdDocs,\n  hypot: hypotDocs,\n  lcm: lcmDocs,\n  log: logDocs,\n  log2: log2Docs,\n  log1p: log1pDocs,\n  log10: log10Docs,\n  mod: modDocs,\n  multiply: multiplyDocs,\n  norm: normDocs,\n  nthRoot: nthRootDocs,\n  nthRoots: nthRootsDocs,\n  pow: powDocs,\n  round: roundDocs,\n  sign: signDocs,\n  sqrt: sqrtDocs,\n  sqrtm: sqrtmDocs,\n  square: squareDocs,\n  subtract: subtractDocs,\n  unaryMinus: unaryMinusDocs,\n  unaryPlus: unaryPlusDocs,\n  xgcd: xgcdDocs,\n  invmod: invmodDocs,\n  // functions - bitwise\n  bitAnd: bitAndDocs,\n  bitNot: bitNotDocs,\n  bitOr: bitOrDocs,\n  bitXor: bitXorDocs,\n  leftShift: leftShiftDocs,\n  rightArithShift: rightArithShiftDocs,\n  rightLogShift: rightLogShiftDocs,\n  // functions - combinatorics\n  bellNumbers: bellNumbersDocs,\n  catalan: catalanDocs,\n  composition: compositionDocs,\n  stirlingS2: stirlingS2Docs,\n  // functions - core\n  config: configDocs,\n  import: importDocs,\n  typed: typedDocs,\n  // functions - complex\n  arg: argDocs,\n  conj: conjDocs,\n  re: reDocs,\n  im: imDocs,\n  // functions - expression\n  evaluate: evaluateDocs,\n  help: helpDocs,\n  // functions - geometry\n  distance: distanceDocs,\n  intersect: intersectDocs,\n  // functions - logical\n  and: andDocs,\n  not: notDocs,\n  or: orDocs,\n  xor: xorDocs,\n  // functions - matrix\n  concat: concatDocs,\n  count: countDocs,\n  cross: crossDocs,\n  column: columnDocs,\n  ctranspose: ctransposeDocs,\n  det: detDocs,\n  diag: diagDocs,\n  diff: diffDocs,\n  dot: dotDocs,\n  getMatrixDataType: getMatrixDataTypeDocs,\n  identity: identityDocs,\n  filter: filterDocs,\n  flatten: flattenDocs,\n  forEach: forEachDocs,\n  inv: invDocs,\n  pinv: pinvDocs,\n  eigs: eigsDocs,\n  kron: kronDocs,\n  matrixFromFunction: matrixFromFunctionDocs,\n  matrixFromRows: matrixFromRowsDocs,\n  matrixFromColumns: matrixFromColumnsDocs,\n  map: mapDocs,\n  ones: onesDocs,\n  partitionSelect: partitionSelectDocs,\n  range: rangeDocs,\n  resize: resizeDocs,\n  reshape: reshapeDocs,\n  rotate: rotateDocs,\n  rotationMatrix: rotationMatrixDocs,\n  row: rowDocs,\n  size: sizeDocs,\n  sort: sortDocs,\n  squeeze: squeezeDocs,\n  subset: subsetDocs,\n  trace: traceDocs,\n  transpose: transposeDocs,\n  zeros: zerosDocs,\n  fft: fftDocs,\n  ifft: ifftDocs,\n  sylvester: sylvesterDocs,\n  schur: schurDocs,\n  lyap: lyapDocs,\n  // functions - probability\n  combinations: combinationsDocs,\n  combinationsWithRep: combinationsWithRepDocs,\n  // distribution: distributionDocs,\n  factorial: factorialDocs,\n  gamma: gammaDocs,\n  kldivergence: kldivergenceDocs,\n  lgamma: lgammaDocs,\n  multinomial: multinomialDocs,\n  permutations: permutationsDocs,\n  pickRandom: pickRandomDocs,\n  random: randomDocs,\n  randomInt: randomIntDocs,\n  // functions - relational\n  compare: compareDocs,\n  compareNatural: compareNaturalDocs,\n  compareText: compareTextDocs,\n  deepEqual: deepEqualDocs,\n  equal: equalDocs,\n  equalText: equalTextDocs,\n  larger: largerDocs,\n  largerEq: largerEqDocs,\n  smaller: smallerDocs,\n  smallerEq: smallerEqDocs,\n  unequal: unequalDocs,\n  // functions - set\n  setCartesian: setCartesianDocs,\n  setDifference: setDifferenceDocs,\n  setDistinct: setDistinctDocs,\n  setIntersect: setIntersectDocs,\n  setIsSubset: setIsSubsetDocs,\n  setMultiplicity: setMultiplicityDocs,\n  setPowerset: setPowersetDocs,\n  setSize: setSizeDocs,\n  setSymDifference: setSymDifferenceDocs,\n  setUnion: setUnionDocs,\n  // functions - special\n  erf: erfDocs,\n  // functions - statistics\n  cumsum: cumSumDocs,\n  mad: madDocs,\n  max: maxDocs,\n  mean: meanDocs,\n  median: medianDocs,\n  min: minDocs,\n  mode: modeDocs,\n  prod: prodDocs,\n  quantileSeq: quantileSeqDocs,\n  std: stdDocs,\n  sum: sumDocs,\n  variance: varianceDocs,\n  // functions - trigonometry\n  acos: acosDocs,\n  acosh: acoshDocs,\n  acot: acotDocs,\n  acoth: acothDocs,\n  acsc: acscDocs,\n  acsch: acschDocs,\n  asec: asecDocs,\n  asech: asechDocs,\n  asin: asinDocs,\n  asinh: asinhDocs,\n  atan: atanDocs,\n  atanh: atanhDocs,\n  atan2: atan2Docs,\n  cos: cosDocs,\n  cosh: coshDocs,\n  cot: cotDocs,\n  coth: cothDocs,\n  csc: cscDocs,\n  csch: cschDocs,\n  sec: secDocs,\n  sech: sechDocs,\n  sin: sinDocs,\n  sinh: sinhDocs,\n  tan: tanDocs,\n  tanh: tanhDocs,\n  // functions - units\n  to: toDocs,\n  // functions - utils\n  clone: cloneDocs,\n  format: formatDocs,\n  bin: binDocs,\n  oct: octDocs,\n  hex: hexDocs,\n  isNaN: isNaNDocs,\n  isInteger: isIntegerDocs,\n  isNegative: isNegativeDocs,\n  isNumeric: isNumericDocs,\n  hasNumericValue: hasNumericValueDocs,\n  isPositive: isPositiveDocs,\n  isPrime: isPrimeDocs,\n  isZero: isZeroDocs,\n  print: printDocs,\n  typeOf: typeOfDocs,\n  numeric: numericDocs\n};","export var eDocs = {\n  name: 'e',\n  category: 'Constants',\n  syntax: ['e'],\n  description: 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n  examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],\n  seealso: ['exp']\n};","export var falseDocs = {\n  name: 'false',\n  category: 'Constants',\n  syntax: ['false'],\n  description: 'Boolean value false',\n  examples: ['false'],\n  seealso: ['true']\n};","export var iDocs = {\n  name: 'i',\n  category: 'Constants',\n  syntax: ['i'],\n  description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n  examples: ['i', 'i * i', 'sqrt(-1)'],\n  seealso: []\n};","export var InfinityDocs = {\n  name: 'Infinity',\n  category: 'Constants',\n  syntax: ['Infinity'],\n  description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n  examples: ['Infinity', '1 / 0'],\n  seealso: []\n};","export var LN10Docs = {\n  name: 'LN10',\n  category: 'Constants',\n  syntax: ['LN10'],\n  description: 'Returns the natural logarithm of 10, approximately equal to 2.302',\n  examples: ['LN10', 'log(10)'],\n  seealso: []\n};","export var LN2Docs = {\n  name: 'LN2',\n  category: 'Constants',\n  syntax: ['LN2'],\n  description: 'Returns the natural logarithm of 2, approximately equal to 0.693',\n  examples: ['LN2', 'log(2)'],\n  seealso: []\n};","export var LOG10EDocs = {\n  name: 'LOG10E',\n  category: 'Constants',\n  syntax: ['LOG10E'],\n  description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n  examples: ['LOG10E', 'log(e, 10)'],\n  seealso: []\n};","export var LOG2EDocs = {\n  name: 'LOG2E',\n  category: 'Constants',\n  syntax: ['LOG2E'],\n  description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n  examples: ['LOG2E', 'log(e, 2)'],\n  seealso: []\n};","export var NaNDocs = {\n  name: 'NaN',\n  category: 'Constants',\n  syntax: ['NaN'],\n  description: 'Not a number',\n  examples: ['NaN', '0 / 0'],\n  seealso: []\n};","export var nullDocs = {\n  name: 'null',\n  category: 'Constants',\n  syntax: ['null'],\n  description: 'Value null',\n  examples: ['null'],\n  seealso: ['true', 'false']\n};","export var phiDocs = {\n  name: 'phi',\n  category: 'Constants',\n  syntax: ['phi'],\n  description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n  examples: ['phi'],\n  seealso: []\n};","export var piDocs = {\n  name: 'pi',\n  category: 'Constants',\n  syntax: ['pi'],\n  description: 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n  examples: ['pi', 'sin(pi/2)'],\n  seealso: ['tau']\n};","export var SQRT12Docs = {\n  name: 'SQRT1_2',\n  category: 'Constants',\n  syntax: ['SQRT1_2'],\n  description: 'Returns the square root of 1/2, approximately equal to 0.707',\n  examples: ['SQRT1_2', 'sqrt(1/2)'],\n  seealso: []\n};","export var SQRT2Docs = {\n  name: 'SQRT2',\n  category: 'Constants',\n  syntax: ['SQRT2'],\n  description: 'Returns the square root of 2, approximately equal to 1.414',\n  examples: ['SQRT2', 'sqrt(2)'],\n  seealso: []\n};","export var tauDocs = {\n  name: 'tau',\n  category: 'Constants',\n  syntax: ['tau'],\n  description: 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n  examples: ['tau', '2 * pi'],\n  seealso: ['pi']\n};","export var trueDocs = {\n  name: 'true',\n  category: 'Constants',\n  syntax: ['true'],\n  description: 'Boolean value true',\n  examples: ['true'],\n  seealso: ['false']\n};","export var versionDocs = {\n  name: 'version',\n  category: 'Constants',\n  syntax: ['version'],\n  description: 'A string with the version number of math.js',\n  examples: ['version'],\n  seealso: []\n};","export var bignumberDocs = {\n  name: 'bignumber',\n  category: 'Construction',\n  syntax: ['bignumber(x)'],\n  description: 'Create a big number from a number or string.',\n  examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber(\"7.2\")', 'bignumber(\"7.2e500\")', 'bignumber([0.1, 0.2, 0.3])'],\n  seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']\n};","export var booleanDocs = {\n  name: 'boolean',\n  category: 'Construction',\n  syntax: ['x', 'boolean(x)'],\n  description: 'Convert a string or number into a boolean.',\n  examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean(\"true\")', 'boolean(\"false\")', 'boolean([1, 0, 1, 1])'],\n  seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']\n};","export var complexDocs = {\n  name: 'complex',\n  category: 'Construction',\n  syntax: ['complex()', 'complex(re, im)', 'complex(string)'],\n  description: 'Create a complex number.',\n  examples: ['complex()', 'complex(2, 3)', 'complex(\"7 - 2i\")'],\n  seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']\n};","export var createUnitDocs = {\n  name: 'createUnit',\n  category: 'Construction',\n  syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],\n  description: 'Create a user-defined unit and register it with the Unit type.',\n  examples: ['createUnit(\"foo\")', 'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})', 'createUnit(\"mph\", \"1 mile/hour\")'],\n  seealso: ['unit', 'splitUnit']\n};","export var fractionDocs = {\n  name: 'fraction',\n  category: 'Construction',\n  syntax: ['fraction(num)', 'fraction(matrix)', 'fraction(num,den)', 'fraction({n: num, d: den})'],\n  description: 'Create a fraction from a number or from integer numerator and denominator.',\n  examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)', 'fraction({n: 333, d: 53})', 'fraction([sqrt(9), sqrt(10), sqrt(11)])'],\n  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']\n};","export var indexDocs = {\n  name: 'index',\n  category: 'Construction',\n  syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],\n  description: 'Create an index to get or replace a subset of a matrix',\n  examples: ['[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[1:2, 1:2] = ones(2, 2)'],\n  seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']\n};","export var matrixDocs = {\n  name: 'matrix',\n  category: 'Construction',\n  syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix(\"dense\")', 'matrix([...])'],\n  description: 'Create a matrix.',\n  examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], \"sparse\")', 'matrix([3, 4; 5, 6], \"sparse\", \"number\")'],\n  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']\n};","export var numberDocs = {\n  name: 'number',\n  category: 'Construction',\n  syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],\n  description: 'Create a number or convert a string or boolean into a number.',\n  examples: ['2', '2e3', '4.05', 'number(2)', 'number(\"7.2\")', 'number(true)', 'number([true, false, true, true])', 'number(unit(\"52cm\"), \"m\")'],\n  seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']\n};","export var sparseDocs = {\n  name: 'sparse',\n  category: 'Construction',\n  syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], \"number\")'],\n  description: 'Create a sparse matrix.',\n  examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], \"number\")'],\n  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']\n};","export var splitUnitDocs = {\n  name: 'splitUnit',\n  category: 'Construction',\n  syntax: ['splitUnit(unit: Unit, parts: Unit[])'],\n  description: 'Split a unit in an array of units whose sum is equal to the original unit.',\n  examples: ['splitUnit(1 m, [\"feet\", \"inch\"])'],\n  seealso: ['unit', 'createUnit']\n};","export var stringDocs = {\n  name: 'string',\n  category: 'Construction',\n  syntax: ['\"text\"', 'string(x)'],\n  description: 'Create a string or convert a value to a string',\n  examples: ['\"Hello World!\"', 'string(4.2)', 'string(3 + 2i)'],\n  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']\n};","export var unitDocs = {\n  name: 'unit',\n  category: 'Construction',\n  syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],\n  description: 'Create a unit.',\n  examples: ['5.5 mm', '3 inch', 'unit(7.1, \"kilogram\")', 'unit(\"23 deg\")'],\n  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']\n};","export var configDocs = {\n  name: 'config',\n  category: 'Core',\n  syntax: ['config()', 'config(options)'],\n  description: 'Get configuration or change configuration.',\n  examples: ['config()', '1/3 + 1/4', 'config({number: \"Fraction\"})', '1/3 + 1/4'],\n  seealso: []\n};","export var importDocs = {\n  name: 'import',\n  category: 'Core',\n  syntax: ['import(functions)', 'import(functions, options)'],\n  description: 'Import functions or constants from an object.',\n  examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],\n  seealso: []\n};","export var typedDocs = {\n  name: 'typed',\n  category: 'Core',\n  syntax: ['typed(signatures)', 'typed(name, signatures)'],\n  description: 'Create a typed function.',\n  examples: ['double = typed({ \"number\": f(x)=x+x })', 'double(2)', 'double(\"hello\")'],\n  seealso: []\n};","export var derivativeDocs = {\n  name: 'derivative',\n  category: 'Algebra',\n  syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],\n  description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',\n  examples: ['derivative(\"2x^3\", \"x\")', 'derivative(\"2x^3\", \"x\", {simplify: false})', 'derivative(\"2x^2 + 3x + 4\", \"x\")', 'derivative(\"sin(2x)\", \"x\")', 'f = parse(\"x^2 + x\")', 'x = parse(\"x\")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],\n  seealso: ['simplify', 'parse', 'evaluate']\n};","export var leafCountDocs = {\n  name: 'leafCount',\n  category: 'Algebra',\n  syntax: ['leafCount(expr)'],\n  description: 'Computes the number of leaves in the parse tree of the given expression',\n  examples: ['leafCount(\"e^(i*pi)-1\")', 'leafCount(parse(\"{a: 22/7, b: 10^(1/2)}\"))'],\n  seealso: ['simplify']\n};","export var lsolveDocs = {\n  name: 'lsolve',\n  category: 'Algebra',\n  syntax: ['x=lsolve(L, b)'],\n  description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],\n  seealso: ['lsolveAll', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']\n};","export var lsolveAllDocs = {\n  name: 'lsolveAll',\n  category: 'Algebra',\n  syntax: ['x=lsolveAll(L, b)'],\n  description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],\n  seealso: ['lsolve', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']\n};","export var lupDocs = {\n  name: 'lup',\n  category: 'Algebra',\n  syntax: ['lup(m)'],\n  description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n  examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],\n  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']\n};","export var lusolveDocs = {\n  name: 'lusolve',\n  category: 'Algebra',\n  syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],\n  description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],\n  seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']\n};","export var polynomialRootDocs = {\n  name: 'polynomialRoot',\n  category: 'Algebra',\n  syntax: ['x=polynomialRoot(-6, 3)', 'x=polynomialRoot(4, -4, 1)', 'x=polynomialRoot(-8, 12, -6, 1)'],\n  description: 'Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.',\n  examples: ['a = polynomialRoot(-6, 11, -6 1)'],\n  seealso: ['cbrt', 'sqrt']\n};","export var qrDocs = {\n  name: 'qr',\n  category: 'Algebra',\n  syntax: ['qr(A)'],\n  description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',\n  examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],\n  seealso: ['lup', 'slu', 'matrix']\n};","export var rationalizeDocs = {\n  name: 'rationalize',\n  category: 'Algebra',\n  syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],\n  description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',\n  examples: ['rationalize(\"2x/y - y/(x+1)\")', 'rationalize(\"2x/y - y/(x+1)\", true)'],\n  seealso: ['simplify']\n};","export var resolveDocs = {\n  name: 'resolve',\n  category: 'Algebra',\n  syntax: ['resolve(node, scope)'],\n  description: 'Recursively substitute variables in an expression tree.',\n  examples: ['resolve(parse(\"1 + x\"), { x: 7 })', 'resolve(parse(\"size(text)\"), { text: \"Hello World\" })', 'resolve(parse(\"x + y\"), { x: parse(\"3z\") })', 'resolve(parse(\"3x\"), { x: parse(\"y+z\"), z: parse(\"w^y\") })'],\n  seealso: ['simplify', 'evaluate'],\n  mayThrow: ['ReferenceError']\n};","export var simplifyDocs = {\n  name: 'simplify',\n  category: 'Algebra',\n  syntax: ['simplify(expr)', 'simplify(expr, rules)'],\n  description: 'Simplify an expression tree.',\n  examples: ['simplify(\"3 + 2 / 4\")', 'simplify(\"2x + x\")', 'f = parse(\"x * (x + 2 + x)\")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],\n  seealso: ['simplifyCore', 'derivative', 'evaluate', 'parse', 'rationalize', 'resolve']\n};","export var simplifyConstantDocs = {\n  name: 'simplifyConstant',\n  category: 'Algebra',\n  syntax: ['simplifyConstant(expr)', 'simplifyConstant(expr, options)'],\n  description: 'Replace constant subexpressions of node with their values.',\n  examples: ['simplifyConatant(\"(3-3)*x\")', 'simplifyConstant(parse(\"z-cos(tau/8)\"))'],\n  seealso: ['simplify', 'simplifyCore', 'evaluate']\n};","export var simplifyCoreDocs = {\n  name: 'simplifyCore',\n  category: 'Algebra',\n  syntax: ['simplifyCore(node)'],\n  description: 'Perform simple one-pass simplifications on an expression tree.',\n  examples: ['simplifyCore(parse(\"0*x\"))', 'simplifyCore(parse(\"(x+0)*2\"))'],\n  seealso: ['simplify', 'simplifyConstant', 'evaluate']\n};","export var sluDocs = {\n  name: 'slu',\n  category: 'Algebra',\n  syntax: ['slu(A, order, threshold)'],\n  description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n  examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],\n  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']\n};","export var symbolicEqualDocs = {\n  name: 'symbolicEqual',\n  category: 'Algebra',\n  syntax: ['symbolicEqual(expr1, expr2)', 'symbolicEqual(expr1, expr2, options)'],\n  description: 'Returns true if the difference of the expressions simplifies to 0',\n  examples: ['symbolicEqual(\"x*y\",\"y*x\")', 'symbolicEqual(\"abs(x^2)\", \"x^2\")', 'symbolicEqual(\"abs(x)\", \"x\", {context: {abs: {trivial: true}}})'],\n  seealso: ['simplify', 'evaluate']\n};","export var usolveDocs = {\n  name: 'usolve',\n  category: 'Algebra',\n  syntax: ['x=usolve(U, b)'],\n  description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],\n  seealso: ['usolveAll', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']\n};","export var usolveAllDocs = {\n  name: 'usolveAll',\n  category: 'Algebra',\n  syntax: ['x=usolve(U, b)'],\n  description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],\n  seealso: ['usolve', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']\n};","export var absDocs = {\n  name: 'abs',\n  category: 'Arithmetic',\n  syntax: ['abs(x)'],\n  description: 'Compute the absolute value.',\n  examples: ['abs(3.5)', 'abs(-4.2)'],\n  seealso: ['sign']\n};","export var addDocs = {\n  name: 'add',\n  category: 'Operators',\n  syntax: ['x + y', 'add(x, y)'],\n  description: 'Add two values.',\n  examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '\"2.3\" + \"4\"'],\n  seealso: ['subtract']\n};","export var cbrtDocs = {\n  name: 'cbrt',\n  category: 'Arithmetic',\n  syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],\n  description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],\n  seealso: ['square', 'sqrt', 'cube', 'multiply']\n};","export var ceilDocs = {\n  name: 'ceil',\n  category: 'Arithmetic',\n  syntax: ['ceil(x)'],\n  description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n  examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],\n  seealso: ['floor', 'fix', 'round']\n};","export var cubeDocs = {\n  name: 'cube',\n  category: 'Arithmetic',\n  syntax: ['cube(x)'],\n  description: 'Compute the cube of a value. The cube of x is x * x * x.',\n  examples: ['cube(2)', '2^3', '2 * 2 * 2'],\n  seealso: ['multiply', 'square', 'pow']\n};","export var divideDocs = {\n  name: 'divide',\n  category: 'Operators',\n  syntax: ['x / y', 'divide(x, y)'],\n  description: 'Divide two values.',\n  examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],\n  seealso: ['multiply']\n};","export var dotDivideDocs = {\n  name: 'dotDivide',\n  category: 'Operators',\n  syntax: ['x ./ y', 'dotDivide(x, y)'],\n  description: 'Divide two values element wise.',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],\n  seealso: ['multiply', 'dotMultiply', 'divide']\n};","export var dotMultiplyDocs = {\n  name: 'dotMultiply',\n  category: 'Operators',\n  syntax: ['x .* y', 'dotMultiply(x, y)'],\n  description: 'Multiply two values element wise.',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],\n  seealso: ['multiply', 'divide', 'dotDivide']\n};","export var dotPowDocs = {\n  name: 'dotPow',\n  category: 'Operators',\n  syntax: ['x .^ y', 'dotPow(x, y)'],\n  description: 'Calculates the power of x to y element wise.',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],\n  seealso: ['pow']\n};","export var expDocs = {\n  name: 'exp',\n  category: 'Arithmetic',\n  syntax: ['exp(x)'],\n  description: 'Calculate the exponent of a value.',\n  examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'],\n  seealso: ['expm', 'expm1', 'pow', 'log']\n};","export var expmDocs = {\n  name: 'expm',\n  category: 'Arithmetic',\n  syntax: ['exp(x)'],\n  description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',\n  examples: ['expm([[0,2],[0,0]])'],\n  seealso: ['exp']\n};","export var expm1Docs = {\n  name: 'expm1',\n  category: 'Arithmetic',\n  syntax: ['expm1(x)'],\n  description: 'Calculate the value of subtracting 1 from the exponential value.',\n  examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],\n  seealso: ['exp', 'pow', 'log']\n};","export var fixDocs = {\n  name: 'fix',\n  category: 'Arithmetic',\n  syntax: ['fix(x)'],\n  description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n  examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],\n  seealso: ['ceil', 'floor', 'round']\n};","export var floorDocs = {\n  name: 'floor',\n  category: 'Arithmetic',\n  syntax: ['floor(x)'],\n  description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n  examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],\n  seealso: ['ceil', 'fix', 'round']\n};","export var gcdDocs = {\n  name: 'gcd',\n  category: 'Arithmetic',\n  syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],\n  description: 'Compute the greatest common divisor.',\n  examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],\n  seealso: ['lcm', 'xgcd']\n};","export var hypotDocs = {\n  name: 'hypot',\n  category: 'Arithmetic',\n  syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],\n  description: 'Calculate the hypotenusa of a list with values. ',\n  examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],\n  seealso: ['abs', 'norm']\n};","export var invmodDocs = {\n  name: 'invmod',\n  category: 'Arithmetic',\n  syntax: ['invmod(a, b)'],\n  description: 'Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)',\n  examples: ['invmod(8, 12)=NaN', 'invmod(7, 13)=2', 'invmod(15151, 15122)=10429'],\n  seealso: ['gcd', 'xgcd']\n};","export var lcmDocs = {\n  name: 'lcm',\n  category: 'Arithmetic',\n  syntax: ['lcm(x, y)'],\n  description: 'Compute the least common multiple.',\n  examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],\n  seealso: ['gcd']\n};","export var logDocs = {\n  name: 'log',\n  category: 'Arithmetic',\n  syntax: ['log(x)', 'log(x, base)'],\n  description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n  examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],\n  seealso: ['exp', 'log1p', 'log2', 'log10']\n};","export var log10Docs = {\n  name: 'log10',\n  category: 'Arithmetic',\n  syntax: ['log10(x)'],\n  description: 'Compute the 10-base logarithm of a value.',\n  examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],\n  seealso: ['exp', 'log']\n};","export var log1pDocs = {\n  name: 'log1p',\n  category: 'Arithmetic',\n  syntax: ['log1p(x)', 'log1p(x, base)'],\n  description: 'Calculate the logarithm of a `value+1`',\n  examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],\n  seealso: ['exp', 'log', 'log2', 'log10']\n};","export var log2Docs = {\n  name: 'log2',\n  category: 'Arithmetic',\n  syntax: ['log2(x)'],\n  description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',\n  examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],\n  seealso: ['exp', 'log1p', 'log', 'log10']\n};","export var modDocs = {\n  name: 'mod',\n  category: 'Operators',\n  syntax: ['x % y', 'x mod y', 'mod(x, y)'],\n  description: 'Calculates the modulus, the remainder of an integer division.',\n  examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],\n  seealso: ['divide']\n};","export var multiplyDocs = {\n  name: 'multiply',\n  category: 'Operators',\n  syntax: ['x * y', 'multiply(x, y)'],\n  description: 'multiply two values.',\n  examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],\n  seealso: ['divide']\n};","export var normDocs = {\n  name: 'norm',\n  category: 'Arithmetic',\n  syntax: ['norm(x)', 'norm(x, p)'],\n  description: 'Calculate the norm of a number, vector or matrix.',\n  examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], \"inf\")', 'norm([[1, 2], [3, 4]], \"fro\")']\n};","export var nthRootDocs = {\n  name: 'nthRoot',\n  category: 'Arithmetic',\n  syntax: ['nthRoot(a)', 'nthRoot(a, root)'],\n  description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation \"x^root = A\".',\n  examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],\n  seealso: ['nthRoots', 'pow', 'sqrt']\n};","export var nthRootsDocs = {\n  name: 'nthRoots',\n  category: 'Arithmetic',\n  syntax: ['nthRoots(A)', 'nthRoots(A, root)'],\n  description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation \"x^root = A\". ' + 'This function returns an array of complex values.',\n  examples: ['nthRoots(1)', 'nthRoots(1, 3)'],\n  seealso: ['sqrt', 'pow', 'nthRoot']\n};","export var powDocs = {\n  name: 'pow',\n  category: 'Operators',\n  syntax: ['x ^ y', 'pow(x, y)'],\n  description: 'Calculates the power of x to y, x^y.',\n  examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)', 'pow([[1, 2], [4, 3]], 2)', 'pow([[1, 2], [4, 3]], -1)'],\n  seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']\n};","export var roundDocs = {\n  name: 'round',\n  category: 'Arithmetic',\n  syntax: ['round(x)', 'round(x, n)'],\n  description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n  examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],\n  seealso: ['ceil', 'floor', 'fix']\n};","export var signDocs = {\n  name: 'sign',\n  category: 'Arithmetic',\n  syntax: ['sign(x)'],\n  description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n  examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],\n  seealso: ['abs']\n};","export var sqrtDocs = {\n  name: 'sqrt',\n  category: 'Arithmetic',\n  syntax: ['sqrt(x)'],\n  description: 'Compute the square root value. If x = y * y, then y is the square root of x.',\n  examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],\n  seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']\n};","export var sqrtmDocs = {\n  name: 'sqrtm',\n  category: 'Arithmetic',\n  syntax: ['sqrtm(x)'],\n  description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',\n  examples: ['sqrtm([[33, 24], [48, 57]])'],\n  seealso: ['sqrt', 'abs', 'square', 'multiply']\n};","export var sylvesterDocs = {\n  name: 'sylvester',\n  category: 'Matrix',\n  syntax: ['sylvester(A,B,C)'],\n  description: 'Solves the real-valued Sylvester equation AX+XB=C for X',\n  examples: ['sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])', 'sylvester(A,B,C)'],\n  seealso: ['schur', 'lyap']\n};","export var schurDocs = {\n  name: 'schur',\n  category: 'Matrix',\n  syntax: ['schur(A)'],\n  description: 'Performs a real Schur decomposition of the real matrix A = UTU\\'',\n  examples: ['schur([[1, 0], [-4, 3]])', 'schur(A)'],\n  seealso: ['lyap', 'sylvester']\n};","export var lyapDocs = {\n  name: 'lyap',\n  category: 'Matrix',\n  syntax: ['lyap(A,Q)'],\n  description: 'Solves the Continuous-time Lyapunov equation AP+PA\\'+Q=0 for P',\n  examples: ['lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])', 'lyap(A,Q)'],\n  seealso: ['schur', 'sylvester']\n};","export var squareDocs = {\n  name: 'square',\n  category: 'Arithmetic',\n  syntax: ['square(x)'],\n  description: 'Compute the square of a value. The square of x is x * x.',\n  examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],\n  seealso: ['multiply', 'pow', 'sqrt', 'cube']\n};","export var subtractDocs = {\n  name: 'subtract',\n  category: 'Operators',\n  syntax: ['x - y', 'subtract(x, y)'],\n  description: 'subtract two values.',\n  examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],\n  seealso: ['add']\n};","export var unaryMinusDocs = {\n  name: 'unaryMinus',\n  category: 'Operators',\n  syntax: ['-x', 'unaryMinus(x)'],\n  description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',\n  examples: ['-4.5', '-(-5.6)', '-\"22\"'],\n  seealso: ['add', 'subtract', 'unaryPlus']\n};","export var unaryPlusDocs = {\n  name: 'unaryPlus',\n  category: 'Operators',\n  syntax: ['+x', 'unaryPlus(x)'],\n  description: 'Converts booleans and strings to numbers.',\n  examples: ['+true', '+\"2\"'],\n  seealso: ['add', 'subtract', 'unaryMinus']\n};","export var xgcdDocs = {\n  name: 'xgcd',\n  category: 'Arithmetic',\n  syntax: ['xgcd(a, b)'],\n  description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',\n  examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],\n  seealso: ['gcd', 'lcm']\n};","export var bitAndDocs = {\n  name: 'bitAnd',\n  category: 'Bitwise',\n  syntax: ['x & y', 'bitAnd(x, y)'],\n  description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n  examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],\n  seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","export var bitNotDocs = {\n  name: 'bitNot',\n  category: 'Bitwise',\n  syntax: ['~x', 'bitNot(x)'],\n  description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n  examples: ['~1', '~2', 'bitNot([2, -3, 4])'],\n  seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","export var bitOrDocs = {\n  name: 'bitOr',\n  category: 'Bitwise',\n  syntax: ['x | y', 'bitOr(x, y)'],\n  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],\n  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","export var bitXorDocs = {\n  name: 'bitXor',\n  category: 'Bitwise',\n  syntax: ['bitXor(x, y)'],\n  description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n  examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],\n  seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","export var leftShiftDocs = {\n  name: 'leftShift',\n  category: 'Bitwise',\n  syntax: ['x << y', 'leftShift(x, y)'],\n  description: 'Bitwise left logical shift of a value x by y number of bits.',\n  examples: ['4 << 1', '8 >> 1'],\n  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']\n};","export var rightArithShiftDocs = {\n  name: 'rightArithShift',\n  category: 'Bitwise',\n  syntax: ['x >> y', 'rightArithShift(x, y)'],\n  description: 'Bitwise right arithmetic shift of a value x by y number of bits.',\n  examples: ['8 >> 1', '4 << 1', '-12 >> 2'],\n  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']\n};","export var rightLogShiftDocs = {\n  name: 'rightLogShift',\n  category: 'Bitwise',\n  syntax: ['x >>> y', 'rightLogShift(x, y)'],\n  description: 'Bitwise right logical shift of a value x by y number of bits.',\n  examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],\n  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']\n};","export var bellNumbersDocs = {\n  name: 'bellNumbers',\n  category: 'Combinatorics',\n  syntax: ['bellNumbers(n)'],\n  description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n  examples: ['bellNumbers(3)', 'bellNumbers(8)'],\n  seealso: ['stirlingS2']\n};","export var catalanDocs = {\n  name: 'catalan',\n  category: 'Combinatorics',\n  syntax: ['catalan(n)'],\n  description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n  examples: ['catalan(3)', 'catalan(8)'],\n  seealso: ['bellNumbers']\n};","export var compositionDocs = {\n  name: 'composition',\n  category: 'Combinatorics',\n  syntax: ['composition(n, k)'],\n  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n  examples: ['composition(5, 3)'],\n  seealso: ['combinations']\n};","export var stirlingS2Docs = {\n  name: 'stirlingS2',\n  category: 'Combinatorics',\n  syntax: ['stirlingS2(n, k)'],\n  description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n  examples: ['stirlingS2(5, 3)'],\n  seealso: ['bellNumbers']\n};","export var argDocs = {\n  name: 'arg',\n  category: 'Complex',\n  syntax: ['arg(x)'],\n  description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n  examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],\n  seealso: ['re', 'im', 'conj', 'abs']\n};","export var conjDocs = {\n  name: 'conj',\n  category: 'Complex',\n  syntax: ['conj(x)'],\n  description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n  examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],\n  seealso: ['re', 'im', 'abs', 'arg']\n};","export var imDocs = {\n  name: 'im',\n  category: 'Complex',\n  syntax: ['im(x)'],\n  description: 'Get the imaginary part of a complex number.',\n  examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],\n  seealso: ['re', 'conj', 'abs', 'arg']\n};","export var reDocs = {\n  name: 're',\n  category: 'Complex',\n  syntax: ['re(x)'],\n  description: 'Get the real part of a complex number.',\n  examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],\n  seealso: ['im', 'conj', 'abs', 'arg']\n};","export var evaluateDocs = {\n  name: 'evaluate',\n  category: 'Expression',\n  syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],\n  description: 'Evaluate an expression or an array with expressions.',\n  examples: ['evaluate(\"2 + 3\")', 'evaluate(\"sqrt(\" + 4 + \")\")'],\n  seealso: []\n};","export var helpDocs = {\n  name: 'help',\n  category: 'Expression',\n  syntax: ['help(object)', 'help(string)'],\n  description: 'Display documentation on a function or data type.',\n  examples: ['help(sqrt)', 'help(\"complex\")'],\n  seealso: []\n};","export var distanceDocs = {\n  name: 'distance',\n  category: 'Geometry',\n  syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],\n  description: 'Calculates the Euclidean distance between two points.',\n  examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],\n  seealso: []\n};","export var intersectDocs = {\n  name: 'intersect',\n  category: 'Geometry',\n  syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],\n  description: 'Computes the intersection point of lines and/or planes.',\n  examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],\n  seealso: []\n};","export var andDocs = {\n  name: 'and',\n  category: 'Logical',\n  syntax: ['x and y', 'and(x, y)'],\n  description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n  examples: ['true and false', 'true and true', '2 and 4'],\n  seealso: ['not', 'or', 'xor']\n};","export var notDocs = {\n  name: 'not',\n  category: 'Logical',\n  syntax: ['not x', 'not(x)'],\n  description: 'Logical not. Flips the boolean value of given argument.',\n  examples: ['not true', 'not false', 'not 2', 'not 0'],\n  seealso: ['and', 'or', 'xor']\n};","export var orDocs = {\n  name: 'or',\n  category: 'Logical',\n  syntax: ['x or y', 'or(x, y)'],\n  description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n  examples: ['true or false', 'false or false', '0 or 4'],\n  seealso: ['not', 'and', 'xor']\n};","export var xorDocs = {\n  name: 'xor',\n  category: 'Logical',\n  syntax: ['x xor y', 'xor(x, y)'],\n  description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n  examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],\n  seealso: ['not', 'and', 'or']\n};","export var columnDocs = {\n  name: 'column',\n  category: 'Matrix',\n  syntax: ['column(x, index)'],\n  description: 'Return a column from a matrix or array.',\n  examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],\n  seealso: ['row', 'matrixFromColumns']\n};","export var concatDocs = {\n  name: 'concat',\n  category: 'Matrix',\n  syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],\n  description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n  examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],\n  seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var countDocs = {\n  name: 'count',\n  category: 'Matrix',\n  syntax: ['count(x)'],\n  description: 'Count the number of elements of a matrix, array or string.',\n  examples: ['a = [1, 2; 3, 4; 5, 6]', 'count(a)', 'size(a)', 'count(\"hello world\")'],\n  seealso: ['size']\n};","export var crossDocs = {\n  name: 'cross',\n  category: 'Matrix',\n  syntax: ['cross(A, B)'],\n  description: 'Calculate the cross product for two vectors in three dimensional space.',\n  examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],\n  seealso: ['multiply', 'dot']\n};","export var ctransposeDocs = {\n  name: 'ctranspose',\n  category: 'Matrix',\n  syntax: ['x\\'', 'ctranspose(x)'],\n  description: 'Complex Conjugate and Transpose a matrix',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\\'', 'ctranspose(a)'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']\n};","export var detDocs = {\n  name: 'det',\n  category: 'Matrix',\n  syntax: ['det(x)'],\n  description: 'Calculate the determinant of a matrix',\n  examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],\n  seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var diagDocs = {\n  name: 'diag',\n  category: 'Matrix',\n  syntax: ['diag(x)', 'diag(x, k)'],\n  description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n  examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],\n  seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var diffDocs = {\n  name: 'diff',\n  category: 'Matrix',\n  syntax: ['diff(arr)', 'diff(arr, dim)'],\n  description: ['Create a new matrix or array with the difference of the passed matrix or array.', 'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference', 'If no dimension parameter is passed it is assumed as dimension 0', 'Dimension is zero-based in javascript and one-based in the parser', 'Arrays must be \\'rectangular\\' meaning arrays like [1, 2]', 'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'],\n  examples: ['diff([1, 2, 4, 7, 0])', 'diff([1, 2, 4, 7, 0], 0)', 'diff(matrix([1, 2, 4, 7, 0]))', 'diff([[1, 2], [3, 4]])', 'diff([[1, 2], [3, 4]], 0)', 'diff([[1, 2], [3, 4]], 1)', 'diff([[1, 2], [3, 4]], bignumber(1))', 'diff(matrix([[1, 2], [3, 4]]), 1)', 'diff([[1, 2], matrix([3, 4])], 1)'],\n  seealso: ['subtract', 'partitionSelect']\n};","export var dotDocs = {\n  name: 'dot',\n  category: 'Matrix',\n  syntax: ['dot(A, B)', 'A * B'],\n  description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n  examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],\n  seealso: ['multiply', 'cross']\n};","export var eigsDocs = {\n  name: 'eigs',\n  category: 'Matrix',\n  syntax: ['eigs(x)'],\n  description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',\n  examples: ['eigs([[5, 2.3], [2.3, 1]])'],\n  seealso: ['inv']\n};","export var filterDocs = {\n  name: 'filter',\n  category: 'Matrix',\n  syntax: ['filter(x, test)'],\n  description: 'Filter items in a matrix.',\n  examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],\n  seealso: ['sort', 'map', 'forEach']\n};","export var flattenDocs = {\n  name: 'flatten',\n  category: 'Matrix',\n  syntax: ['flatten(x)'],\n  description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],\n  seealso: ['concat', 'resize', 'size', 'squeeze']\n};","export var forEachDocs = {\n  name: 'forEach',\n  category: 'Matrix',\n  syntax: ['forEach(x, callback)'],\n  description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n  examples: ['numberOfPets = {}', 'addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;', 'forEach([\"Dog\",\"Cat\",\"Cat\"], addPet)', 'numberOfPets'],\n  seealso: ['map', 'sort', 'filter']\n};","export var getMatrixDataTypeDocs = {\n  name: 'getMatrixDataType',\n  category: 'Matrix',\n  syntax: ['getMatrixDataType(x)'],\n  description: 'Find the data type of all elements in a matrix or array, ' + 'for example \"number\" if all items are a number ' + 'and \"Complex\" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return \"mixed\".',\n  examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, \"text\"])', 'getMatrixDataType([1, bignumber(4)])'],\n  seealso: ['matrix', 'sparse', 'typeOf']\n};","export var identityDocs = {\n  name: 'identity',\n  category: 'Matrix',\n  syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],\n  description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n  examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],\n  seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var invDocs = {\n  name: 'inv',\n  category: 'Matrix',\n  syntax: ['inv(x)'],\n  description: 'Calculate the inverse of a matrix',\n  examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var pinvDocs = {\n  name: 'pinv',\n  category: 'Matrix',\n  syntax: ['pinv(x)'],\n  description: 'Calculate the Moore–Penrose inverse of a matrix',\n  examples: ['pinv([1, 2; 3, 4])', 'pinv([[1, 0], [0, 1], [0, 1]])', 'pinv(4)'],\n  seealso: ['inv']\n};","export var kronDocs = {\n  name: 'kron',\n  category: 'Matrix',\n  syntax: ['kron(x, y)'],\n  description: 'Calculates the kronecker product of 2 matrices or vectors.',\n  examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],\n  seealso: ['multiply', 'dot', 'cross']\n};","export var mapDocs = {\n  name: 'map',\n  category: 'Matrix',\n  syntax: ['map(x, callback)'],\n  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  examples: ['map([1, 2, 3], square)'],\n  seealso: ['filter', 'forEach']\n};","export var matrixFromColumnsDocs = {\n  name: 'matrixFromColumns',\n  category: 'Matrix',\n  syntax: ['matrixFromColumns(...arr)', 'matrixFromColumns(row1, row2)', 'matrixFromColumns(row1, row2, row3)'],\n  description: 'Create a dense matrix from vectors as individual columns.',\n  examples: ['matrixFromColumns([1, 2, 3], [[4],[5],[6]])'],\n  seealso: ['matrix', 'matrixFromRows', 'matrixFromFunction', 'zeros']\n};","export var matrixFromFunctionDocs = {\n  name: 'matrixFromFunction',\n  category: 'Matrix',\n  syntax: ['matrixFromFunction(size, fn)', 'matrixFromFunction(size, fn, format)', 'matrixFromFunction(size, fn, format, datatype)', 'matrixFromFunction(size, format, fn)', 'matrixFromFunction(size, format, datatype, fn)'],\n  description: 'Create a matrix by evaluating a generating function at each index.',\n  examples: ['f(I) = I[1] - I[2]', 'matrixFromFunction([3,3], f)', 'g(I) = I[1] - I[2] == 1 ? 4 : 0', 'matrixFromFunction([100, 100], \"sparse\", g)', 'matrixFromFunction([5], random)'],\n  seealso: ['matrix', 'matrixFromRows', 'matrixFromColumns', 'zeros']\n};","export var matrixFromRowsDocs = {\n  name: 'matrixFromRows',\n  category: 'Matrix',\n  syntax: ['matrixFromRows(...arr)', 'matrixFromRows(row1, row2)', 'matrixFromRows(row1, row2, row3)'],\n  description: 'Create a dense matrix from vectors as individual rows.',\n  examples: ['matrixFromRows([1, 2, 3], [[4],[5],[6]])'],\n  seealso: ['matrix', 'matrixFromColumns', 'matrixFromFunction', 'zeros']\n};","export var onesDocs = {\n  name: 'ones',\n  category: 'Matrix',\n  syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],\n  description: 'Create a matrix containing ones.',\n  examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var partitionSelectDocs = {\n  name: 'partitionSelect',\n  category: 'Matrix',\n  syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],\n  description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n  examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'],\n  seealso: ['sort']\n};","export var rangeDocs = {\n  name: 'range',\n  category: 'Type',\n  syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],\n  description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',\n  examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range(\"4:10\")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var reshapeDocs = {\n  name: 'reshape',\n  category: 'Matrix',\n  syntax: ['reshape(x, sizes)'],\n  description: 'Reshape a multi dimensional array to fit the specified dimensions.',\n  examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])', 'reshape([1, 2, 3, 4], [-1, 2])'],\n  seealso: ['size', 'squeeze', 'resize']\n};","export var resizeDocs = {\n  name: 'resize',\n  category: 'Matrix',\n  syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],\n  description: 'Resize a matrix.',\n  examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize(\"hello\", [8], \"!\")'],\n  seealso: ['size', 'subset', 'squeeze', 'reshape']\n};","export var rotateDocs = {\n  name: 'rotate',\n  category: 'Matrix',\n  syntax: ['rotate(w, theta)', 'rotate(w, theta, v)'],\n  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',\n  examples: ['rotate([1, 0], pi / 2)', 'rotate(matrix([1, 0]), unit(\"35deg\"))', 'rotate([1, 0, 0], unit(\"90deg\"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit(\"90deg\"), matrix([0, 0, 1]))'],\n  seealso: ['matrix', 'rotationMatrix']\n};","export var rotationMatrixDocs = {\n  name: 'rotationMatrix',\n  category: 'Matrix',\n  syntax: ['rotationMatrix(theta)', 'rotationMatrix(theta, v)', 'rotationMatrix(theta, v, format)'],\n  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',\n  examples: ['rotationMatrix(pi / 2)', 'rotationMatrix(unit(\"45deg\"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), \"sparse\")'],\n  seealso: ['cos', 'sin']\n};","export var rowDocs = {\n  name: 'row',\n  category: 'Matrix',\n  syntax: ['row(x, index)'],\n  description: 'Return a row from a matrix or array.',\n  examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],\n  seealso: ['column', 'matrixFromRows']\n};","export var sizeDocs = {\n  name: 'size',\n  category: 'Matrix',\n  syntax: ['size(x)'],\n  description: 'Calculate the size of a matrix.',\n  examples: ['size(2.3)', 'size(\"hello world\")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],\n  seealso: ['concat', 'count', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']\n};","export var sortDocs = {\n  name: 'sort',\n  category: 'Matrix',\n  syntax: ['sort(x)', 'sort(x, compare)'],\n  description: 'Sort the items in a matrix. Compare can be a string \"asc\", \"desc\", \"natural\", or a custom sort function.',\n  examples: ['sort([5, 10, 1])', 'sort([\"C\", \"B\", \"A\", \"D\"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)', 'sort([\"10\", \"1\", \"2\"], \"natural\")'],\n  seealso: ['map', 'filter', 'forEach']\n};","export var squeezeDocs = {\n  name: 'squeeze',\n  category: 'Matrix',\n  syntax: ['squeeze(x)'],\n  description: 'Remove inner and outer singleton dimensions from a matrix.',\n  examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']\n};","export var subsetDocs = {\n  name: 'subset',\n  category: 'Matrix',\n  syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],\n  description: 'Get or set a subset of the entries of a matrix or ' + 'characters of a string. ' + 'Indexes are one-based. There should be one index specification for ' + 'each dimension of the target. Each specification can be a single ' + 'index, a list of indices, or a range in colon notation `l:u`. ' + 'In a range, both the lower bound l and upper bound u are included; ' + 'and if a bound is omitted it defaults to the most extreme valid value. ' + 'The cartesian product of the indices specified in each dimension ' + 'determines the target of the operation.',\n  examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]', 'f[[1,2], [1,3]] = [9, 10; 11, 12]', 'f'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']\n};","export var traceDocs = {\n  name: 'trace',\n  category: 'Matrix',\n  syntax: ['trace(A)'],\n  description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n  examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']\n};","export var transposeDocs = {\n  name: 'transpose',\n  category: 'Matrix',\n  syntax: ['x\\'', 'transpose(x)'],\n  description: 'Transpose a matrix',\n  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\\'', 'transpose(a)'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']\n};","export var zerosDocs = {\n  name: 'zeros',\n  category: 'Matrix',\n  syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],\n  description: 'Create a matrix containing zeros.',\n  examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],\n  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']\n};","export var fftDocs = {\n  name: 'fft',\n  category: 'Matrix',\n  syntax: ['fft(x)'],\n  description: 'Calculate N-dimensional fourier transform',\n  examples: ['fft([[1, 0], [1, 0]])'],\n  seealso: ['ifft']\n};","export var ifftDocs = {\n  name: 'ifft',\n  category: 'Matrix',\n  syntax: ['ifft(x)'],\n  description: 'Calculate N-dimensional inverse fourier transform',\n  examples: ['ifft([[2, 2], [0, 0]])'],\n  seealso: ['fft']\n};","export var combinationsDocs = {\n  name: 'combinations',\n  category: 'Probability',\n  syntax: ['combinations(n, k)'],\n  description: 'Compute the number of combinations of n items taken k at a time',\n  examples: ['combinations(7, 5)'],\n  seealso: ['combinationsWithRep', 'permutations', 'factorial']\n};","export var combinationsWithRepDocs = {\n  name: 'combinationsWithRep',\n  category: 'Probability',\n  syntax: ['combinationsWithRep(n, k)'],\n  description: 'Compute the number of combinations of n items taken k at a time with replacements.',\n  examples: ['combinationsWithRep(7, 5)'],\n  seealso: ['combinations', 'permutations', 'factorial']\n};","export var factorialDocs = {\n  name: 'factorial',\n  category: 'Probability',\n  syntax: ['n!', 'factorial(n)'],\n  description: 'Compute the factorial of a value',\n  examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],\n  seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']\n};","export var gammaDocs = {\n  name: 'gamma',\n  category: 'Probability',\n  syntax: ['gamma(n)'],\n  description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n  examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],\n  seealso: ['factorial']\n};","export var lgammaDocs = {\n  name: 'lgamma',\n  category: 'Probability',\n  syntax: ['lgamma(n)'],\n  description: 'Logarithm of the gamma function for real, positive numbers and complex numbers, ' + 'using Lanczos approximation for numbers and Stirling series for complex numbers.',\n  examples: ['lgamma(4)', 'lgamma(1/2)', 'lgamma(i)', 'lgamma(complex(1.1, 2))'],\n  seealso: ['gamma']\n};","export var kldivergenceDocs = {\n  name: 'kldivergence',\n  category: 'Probability',\n  syntax: ['kldivergence(x, y)'],\n  description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n  examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],\n  seealso: []\n};","export var multinomialDocs = {\n  name: 'multinomial',\n  category: 'Probability',\n  syntax: ['multinomial(A)'],\n  description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',\n  examples: ['multinomial([1, 2, 1])'],\n  seealso: ['combinations', 'factorial']\n};","export var permutationsDocs = {\n  name: 'permutations',\n  category: 'Probability',\n  syntax: ['permutations(n)', 'permutations(n, k)'],\n  description: 'Compute the number of permutations of n items taken k at a time',\n  examples: ['permutations(5)', 'permutations(5, 3)'],\n  seealso: ['combinations', 'combinationsWithRep', 'factorial']\n};","export var pickRandomDocs = {\n  name: 'pickRandom',\n  category: 'Probability',\n  syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],\n  description: 'Pick a random entry from a given array.',\n  examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],\n  seealso: ['random', 'randomInt']\n};","export var randomDocs = {\n  name: 'random',\n  category: 'Probability',\n  syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],\n  description: 'Return a random number.',\n  examples: ['random()', 'random(10, 20)', 'random([2, 3])'],\n  seealso: ['pickRandom', 'randomInt']\n};","export var randomIntDocs = {\n  name: 'randomInt',\n  category: 'Probability',\n  syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],\n  description: 'Return a random integer number',\n  examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],\n  seealso: ['pickRandom', 'random']\n};","export var compareDocs = {\n  name: 'compare',\n  category: 'Relational',\n  syntax: ['compare(x, y)'],\n  description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',\n  examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],\n  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']\n};","export var compareNaturalDocs = {\n  name: 'compareNatural',\n  category: 'Relational',\n  syntax: ['compareNatural(x, y)'],\n  description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',\n  examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural(\"2\", \"10\")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],\n  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']\n};","export var compareTextDocs = {\n  name: 'compareText',\n  category: 'Relational',\n  syntax: ['compareText(x, y)'],\n  description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',\n  examples: ['compareText(\"B\", \"A\")', 'compareText(\"A\", \"B\")', 'compareText(\"A\", \"A\")', 'compareText(\"2\", \"10\")', 'compare(\"2\", \"10\")', 'compare(2, 10)', 'compareNatural(\"2\", \"10\")', 'compareText(\"B\", [\"A\", \"B\", \"C\"])'],\n  seealso: ['compare', 'compareNatural']\n};","export var deepEqualDocs = {\n  name: 'deepEqual',\n  category: 'Relational',\n  syntax: ['deepEqual(x, y)'],\n  description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n  examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],\n  seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']\n};","export var equalDocs = {\n  name: 'equal',\n  category: 'Relational',\n  syntax: ['x == y', 'equal(x, y)'],\n  description: 'Check equality of two values. Returns true if the values are equal, and false if not.',\n  examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],\n  seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']\n};","export var equalTextDocs = {\n  name: 'equalText',\n  category: 'Relational',\n  syntax: ['equalText(x, y)'],\n  description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',\n  examples: ['equalText(\"Hello\", \"Hello\")', 'equalText(\"a\", \"A\")', 'equal(\"2e3\", \"2000\")', 'equalText(\"2e3\", \"2000\")', 'equalText(\"B\", [\"A\", \"B\", \"C\"])'],\n  seealso: ['compare', 'compareNatural', 'compareText', 'equal']\n};","export var largerDocs = {\n  name: 'larger',\n  category: 'Relational',\n  syntax: ['x > y', 'larger(x, y)'],\n  description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n  examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],\n  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']\n};","export var largerEqDocs = {\n  name: 'largerEq',\n  category: 'Relational',\n  syntax: ['x >= y', 'largerEq(x, y)'],\n  description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n  examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],\n  seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']\n};","export var smallerDocs = {\n  name: 'smaller',\n  category: 'Relational',\n  syntax: ['x < y', 'smaller(x, y)'],\n  description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n  examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],\n  seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']\n};","export var smallerEqDocs = {\n  name: 'smallerEq',\n  category: 'Relational',\n  syntax: ['x <= y', 'smallerEq(x, y)'],\n  description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n  examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],\n  seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']\n};","export var unequalDocs = {\n  name: 'unequal',\n  category: 'Relational',\n  syntax: ['x != y', 'unequal(x, y)'],\n  description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n  examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],\n  seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']\n};","export var setCartesianDocs = {\n  name: 'setCartesian',\n  category: 'Set',\n  syntax: ['setCartesian(set1, set2)'],\n  description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.',\n  examples: ['setCartesian([1, 2], [3, 4])'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']\n};","export var setDifferenceDocs = {\n  name: 'setDifference',\n  category: 'Set',\n  syntax: ['setDifference(set1, set2)'],\n  description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],\n  seealso: ['setUnion', 'setIntersect', 'setSymDifference']\n};","export var setDistinctDocs = {\n  name: 'setDistinct',\n  category: 'Set',\n  syntax: ['setDistinct(set)'],\n  description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],\n  seealso: ['setMultiplicity']\n};","export var setIntersectDocs = {\n  name: 'setIntersect',\n  category: 'Set',\n  syntax: ['setIntersect(set1, set2)'],\n  description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],\n  seealso: ['setUnion', 'setDifference']\n};","export var setIsSubsetDocs = {\n  name: 'setIsSubset',\n  category: 'Set',\n  syntax: ['setIsSubset(set1, set2)'],\n  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\n};","export var setMultiplicityDocs = {\n  name: 'setMultiplicity',\n  category: 'Set',\n  syntax: ['setMultiplicity(element, set)'],\n  description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],\n  seealso: ['setDistinct', 'setSize']\n};","export var setPowersetDocs = {\n  name: 'setPowerset',\n  category: 'Set',\n  syntax: ['setPowerset(set)'],\n  description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  examples: ['setPowerset([1, 2, 3])'],\n  seealso: ['setCartesian']\n};","export var setSizeDocs = {\n  name: 'setSize',\n  category: 'Set',\n  syntax: ['setSize(set)', 'setSize(set, unique)'],\n  description: 'Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\n};","export var setSymDifferenceDocs = {\n  name: 'setSymDifference',\n  category: 'Set',\n  syntax: ['setSymDifference(set1, set2)'],\n  description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\n};","export var setUnionDocs = {\n  name: 'setUnion',\n  category: 'Set',\n  syntax: ['setUnion(set1, set2)'],\n  description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],\n  seealso: ['setIntersect', 'setDifference']\n};","export var erfDocs = {\n  name: 'erf',\n  category: 'Special',\n  syntax: ['erf(x)'],\n  description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n  examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],\n  seealso: []\n};","export var madDocs = {\n  name: 'mad',\n  category: 'Statistics',\n  syntax: ['mad(a, b, c, ...)', 'mad(A)'],\n  description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',\n  examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],\n  seealso: ['mean', 'median', 'std', 'abs']\n};","export var maxDocs = {\n  name: 'max',\n  category: 'Statistics',\n  syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dimension)'],\n  description: 'Compute the maximum value of a list of values.',\n  examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],\n  seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']\n};","export var meanDocs = {\n  name: 'mean',\n  category: 'Statistics',\n  syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dimension)'],\n  description: 'Compute the arithmetic mean of a list of values.',\n  examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],\n  seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']\n};","export var medianDocs = {\n  name: 'median',\n  category: 'Statistics',\n  syntax: ['median(a, b, c, ...)', 'median(A)'],\n  description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n  examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],\n  seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']\n};","export var minDocs = {\n  name: 'min',\n  category: 'Statistics',\n  syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dimension)'],\n  description: 'Compute the minimum value of a list of values.',\n  examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],\n  seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']\n};","export var modeDocs = {\n  name: 'mode',\n  category: 'Statistics',\n  syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],\n  description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n  examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],\n  seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']\n};","export var prodDocs = {\n  name: 'prod',\n  category: 'Statistics',\n  syntax: ['prod(a, b, c, ...)', 'prod(A)'],\n  description: 'Compute the product of all values.',\n  examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],\n  seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']\n};","export var quantileSeqDocs = {\n  name: 'quantileSeq',\n  category: 'Statistics',\n  syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],\n  description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n  examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],\n  seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']\n};","export var stdDocs = {\n  name: 'std',\n  category: 'Statistics',\n  syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, dimension)', 'std(A, normalization)', 'std(A, dimension, normalization)'],\n  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], \"uncorrected\")', 'std([2, 4, 6, 8], \"biased\")', 'std([1, 2, 3; 4, 5, 6])'],\n  seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']\n};","export var cumSumDocs = {\n  name: 'cumsum',\n  category: 'Statistics',\n  syntax: ['cumsum(a, b, c, ...)', 'cumsum(A)'],\n  description: 'Compute the cumulative sum of all values.',\n  examples: ['cumsum(2, 3, 4, 1)', 'cumsum([2, 3, 4, 1])', 'cumsum([1, 2; 3, 4])', 'cumsum([1, 2; 3, 4], 1)', 'cumsum([1, 2; 3, 4], 2)'],\n  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']\n};","export var sumDocs = {\n  name: 'sum',\n  category: 'Statistics',\n  syntax: ['sum(a, b, c, ...)', 'sum(A)', 'sum(A, dimension)'],\n  description: 'Compute the sum of all values.',\n  examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],\n  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']\n};","export var varianceDocs = {\n  name: 'variance',\n  category: 'Statistics',\n  syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, dimension)', 'variance(A, normalization)', 'variance(A, dimension, normalization)'],\n  description: 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], \"uncorrected\")', 'variance([2, 4, 6, 8], \"biased\")', 'variance([1, 2, 3; 4, 5, 6])'],\n  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']\n};","export var acosDocs = {\n  name: 'acos',\n  category: 'Trigonometry',\n  syntax: ['acos(x)'],\n  description: 'Compute the inverse cosine of a value in radians.',\n  examples: ['acos(0.5)', 'acos(cos(2.3))'],\n  seealso: ['cos', 'atan', 'asin']\n};","export var acoshDocs = {\n  name: 'acosh',\n  category: 'Trigonometry',\n  syntax: ['acosh(x)'],\n  description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n  examples: ['acosh(1.5)'],\n  seealso: ['cosh', 'asinh', 'atanh']\n};","export var acotDocs = {\n  name: 'acot',\n  category: 'Trigonometry',\n  syntax: ['acot(x)'],\n  description: 'Calculate the inverse cotangent of a value.',\n  examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],\n  seealso: ['cot', 'atan']\n};","export var acothDocs = {\n  name: 'acoth',\n  category: 'Trigonometry',\n  syntax: ['acoth(x)'],\n  description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n  examples: ['acoth(2)', 'acoth(0.5)'],\n  seealso: ['acsch', 'asech']\n};","export var acscDocs = {\n  name: 'acsc',\n  category: 'Trigonometry',\n  syntax: ['acsc(x)'],\n  description: 'Calculate the inverse cotangent of a value.',\n  examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],\n  seealso: ['csc', 'asin', 'asec']\n};","export var acschDocs = {\n  name: 'acsch',\n  category: 'Trigonometry',\n  syntax: ['acsch(x)'],\n  description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n  examples: ['acsch(0.5)'],\n  seealso: ['asech', 'acoth']\n};","export var asecDocs = {\n  name: 'asec',\n  category: 'Trigonometry',\n  syntax: ['asec(x)'],\n  description: 'Calculate the inverse secant of a value.',\n  examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],\n  seealso: ['acos', 'acot', 'acsc']\n};","export var asechDocs = {\n  name: 'asech',\n  category: 'Trigonometry',\n  syntax: ['asech(x)'],\n  description: 'Calculate the inverse secant of a value.',\n  examples: ['asech(0.5)'],\n  seealso: ['acsch', 'acoth']\n};","export var asinDocs = {\n  name: 'asin',\n  category: 'Trigonometry',\n  syntax: ['asin(x)'],\n  description: 'Compute the inverse sine of a value in radians.',\n  examples: ['asin(0.5)', 'asin(sin(0.5))'],\n  seealso: ['sin', 'acos', 'atan']\n};","export var asinhDocs = {\n  name: 'asinh',\n  category: 'Trigonometry',\n  syntax: ['asinh(x)'],\n  description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n  examples: ['asinh(0.5)'],\n  seealso: ['acosh', 'atanh']\n};","export var atanDocs = {\n  name: 'atan',\n  category: 'Trigonometry',\n  syntax: ['atan(x)'],\n  description: 'Compute the inverse tangent of a value in radians.',\n  examples: ['atan(0.5)', 'atan(tan(0.5))'],\n  seealso: ['tan', 'acos', 'asin']\n};","export var atan2Docs = {\n  name: 'atan2',\n  category: 'Trigonometry',\n  syntax: ['atan2(y, x)'],\n  description: 'Computes the principal value of the arc tangent of y/x in radians.',\n  examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],\n  seealso: ['sin', 'cos', 'tan']\n};","export var atanhDocs = {\n  name: 'atanh',\n  category: 'Trigonometry',\n  syntax: ['atanh(x)'],\n  description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n  examples: ['atanh(0.5)'],\n  seealso: ['acosh', 'asinh']\n};","export var cosDocs = {\n  name: 'cos',\n  category: 'Trigonometry',\n  syntax: ['cos(x)'],\n  description: 'Compute the cosine of x in radians.',\n  examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],\n  seealso: ['acos', 'sin', 'tan']\n};","export var coshDocs = {\n  name: 'cosh',\n  category: 'Trigonometry',\n  syntax: ['cosh(x)'],\n  description: 'Compute the hyperbolic cosine of x in radians.',\n  examples: ['cosh(0.5)'],\n  seealso: ['sinh', 'tanh', 'coth']\n};","export var cotDocs = {\n  name: 'cot',\n  category: 'Trigonometry',\n  syntax: ['cot(x)'],\n  description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n  examples: ['cot(2)', '1 / tan(2)'],\n  seealso: ['sec', 'csc', 'tan']\n};","export var cothDocs = {\n  name: 'coth',\n  category: 'Trigonometry',\n  syntax: ['coth(x)'],\n  description: 'Compute the hyperbolic cotangent of x in radians.',\n  examples: ['coth(2)', '1 / tanh(2)'],\n  seealso: ['sech', 'csch', 'tanh']\n};","export var cscDocs = {\n  name: 'csc',\n  category: 'Trigonometry',\n  syntax: ['csc(x)'],\n  description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n  examples: ['csc(2)', '1 / sin(2)'],\n  seealso: ['sec', 'cot', 'sin']\n};","export var cschDocs = {\n  name: 'csch',\n  category: 'Trigonometry',\n  syntax: ['csch(x)'],\n  description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n  examples: ['csch(2)', '1 / sinh(2)'],\n  seealso: ['sech', 'coth', 'sinh']\n};","export var secDocs = {\n  name: 'sec',\n  category: 'Trigonometry',\n  syntax: ['sec(x)'],\n  description: 'Compute the secant of x in radians. Defined as 1/cos(x)',\n  examples: ['sec(2)', '1 / cos(2)'],\n  seealso: ['cot', 'csc', 'cos']\n};","export var sechDocs = {\n  name: 'sech',\n  category: 'Trigonometry',\n  syntax: ['sech(x)'],\n  description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n  examples: ['sech(2)', '1 / cosh(2)'],\n  seealso: ['coth', 'csch', 'cosh']\n};","export var sinDocs = {\n  name: 'sin',\n  category: 'Trigonometry',\n  syntax: ['sin(x)'],\n  description: 'Compute the sine of x in radians.',\n  examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],\n  seealso: ['asin', 'cos', 'tan']\n};","export var sinhDocs = {\n  name: 'sinh',\n  category: 'Trigonometry',\n  syntax: ['sinh(x)'],\n  description: 'Compute the hyperbolic sine of x in radians.',\n  examples: ['sinh(0.5)'],\n  seealso: ['cosh', 'tanh']\n};","export var tanDocs = {\n  name: 'tan',\n  category: 'Trigonometry',\n  syntax: ['tan(x)'],\n  description: 'Compute the tangent of x in radians.',\n  examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],\n  seealso: ['atan', 'sin', 'cos']\n};","export var tanhDocs = {\n  name: 'tanh',\n  category: 'Trigonometry',\n  syntax: ['tanh(x)'],\n  description: 'Compute the hyperbolic tangent of x in radians.',\n  examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],\n  seealso: ['sinh', 'cosh']\n};","export var toDocs = {\n  name: 'to',\n  category: 'Units',\n  syntax: ['x to unit', 'to(x, unit)'],\n  description: 'Change the unit of a value.',\n  examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],\n  seealso: []\n};","export var binDocs = {\n  name: 'bin',\n  category: 'Utils',\n  syntax: ['bin(value)'],\n  description: 'Format a number as binary',\n  examples: ['bin(2)'],\n  seealso: ['oct', 'hex']\n};","export var cloneDocs = {\n  name: 'clone',\n  category: 'Utils',\n  syntax: ['clone(x)'],\n  description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n  examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone(\"hello world\")'],\n  seealso: []\n};","export var formatDocs = {\n  name: 'format',\n  category: 'Utils',\n  syntax: ['format(value)', 'format(value, precision)'],\n  description: 'Format a value of any type as string.',\n  examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],\n  seealso: ['print']\n};","export var hasNumericValueDocs = {\n  name: 'hasNumericValue',\n  category: 'Utils',\n  syntax: ['hasNumericValue(x)'],\n  description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',\n  examples: ['hasNumericValue(2)', 'hasNumericValue(\"2\")', 'isNumeric(\"2\")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, \"foo\", false])'],\n  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']\n};","export var hexDocs = {\n  name: 'hex',\n  category: 'Utils',\n  syntax: ['hex(value)'],\n  description: 'Format a number as hexadecimal',\n  examples: ['hex(240)'],\n  seealso: ['bin', 'oct']\n};","export var isIntegerDocs = {\n  name: 'isInteger',\n  category: 'Utils',\n  syntax: ['isInteger(x)'],\n  description: 'Test whether a value is an integer number.',\n  examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],\n  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};","export var isNaNDocs = {\n  name: 'isNaN',\n  category: 'Utils',\n  syntax: ['isNaN(x)'],\n  description: 'Test whether a value is NaN (not a number)',\n  examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],\n  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};","export var isNegativeDocs = {\n  name: 'isNegative',\n  category: 'Utils',\n  syntax: ['isNegative(x)'],\n  description: 'Test whether a value is negative: smaller than zero.',\n  examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],\n  seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n};","export var isNumericDocs = {\n  name: 'isNumeric',\n  category: 'Utils',\n  syntax: ['isNumeric(x)'],\n  description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n  examples: ['isNumeric(2)', 'isNumeric(\"2\")', 'hasNumericValue(\"2\")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, \"foo\", false])'],\n  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']\n};","export var isPositiveDocs = {\n  name: 'isPositive',\n  category: 'Utils',\n  syntax: ['isPositive(x)'],\n  description: 'Test whether a value is positive: larger than zero.',\n  examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],\n  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};","export var isPrimeDocs = {\n  name: 'isPrime',\n  category: 'Utils',\n  syntax: ['isPrime(x)'],\n  description: 'Test whether a value is prime: has no divisors other than itself and one.',\n  examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],\n  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};","export var isZeroDocs = {\n  name: 'isZero',\n  category: 'Utils',\n  syntax: ['isZero(x)'],\n  description: 'Test whether a value is zero.',\n  examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],\n  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n};","export var numericDocs = {\n  name: 'numeric',\n  category: 'Utils',\n  syntax: ['numeric(x)'],\n  description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',\n  examples: ['numeric(\"4\")', 'numeric(\"4\", \"number\")', 'numeric(\"4\", \"BigNumber\")', 'numeric(\"4\", \"Fraction)', 'numeric(4, \"Fraction\")', 'numeric(fraction(2, 5), \"number)'],\n  seealso: ['number', 'fraction', 'bignumber', 'string', 'format']\n};","export var octDocs = {\n  name: 'oct',\n  category: 'Utils',\n  syntax: ['oct(value)'],\n  description: 'Format a number as octal',\n  examples: ['oct(56)'],\n  seealso: ['bin', 'hex']\n};","export var printDocs = {\n  name: 'print',\n  category: 'Utils',\n  syntax: ['print(template, values)', 'print(template, values, precision)'],\n  description: 'Interpolate values into a string template.',\n  examples: ['print(\"Lucy is $age years old\", {age: 5})', 'print(\"The value of pi is $pi\", {pi: pi}, 3)', 'print(\"Hello, $user.name!\", {user: {name: \"John\"}})', 'print(\"Values: $0, $1, $2\", [6, 9, 4])'],\n  seealso: ['format']\n};","export var typeOfDocs = {\n  name: 'typeOf',\n  category: 'Utils',\n  syntax: ['typeOf(x)'],\n  description: 'Get the type of a variable.',\n  examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf(\"hello world\")'],\n  seealso: ['getMatrixDataType']\n};","import { factory } from '../../../utils/factory.js';\nvar name = 'chain';\nvar dependencies = ['typed', 'Chain'];\nexport var createChain = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Chain\n  } = _ref;\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done()     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done()     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.Chain} The created chain\n   */\n  return typed(name, {\n    '': function _() {\n      return new Chain();\n    },\n    any: function any(value) {\n      return new Chain(value);\n    }\n  });\n});","import { isMatrix } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];\nexport var createDet = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply,\n    divideScalar,\n    isZero,\n    unaryMinus\n  } = _ref;\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n      if (isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n      switch (size.length) {\n        case 0:\n          // scalar\n          return clone(x);\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Bareiss algorithm\n      // this algorithm have same complexity as LUP decomposition (O(n^3))\n      // but it preserve precision of floating point more relative to the LUP decomposition\n      var negated = false;\n      var rowIndices = new Array(rows).fill(0).map((_, i) => i); // matrix index of row i\n      for (var k = 0; k < rows; k++) {\n        var k_ = rowIndices[k];\n        if (isZero(matrix[k_][k])) {\n          var _k = void 0;\n          for (_k = k + 1; _k < rows; _k++) {\n            if (!isZero(matrix[rowIndices[_k]][k])) {\n              k_ = rowIndices[_k];\n              rowIndices[_k] = rowIndices[k];\n              rowIndices[k] = k_;\n              negated = !negated;\n              break;\n            }\n          }\n          if (_k === rows) return matrix[k_][k]; // some zero of the type\n        }\n\n        var piv = matrix[k_][k];\n        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];\n        for (var i = k + 1; i < rows; i++) {\n          var i_ = rowIndices[i];\n          for (var j = k + 1; j < rows; j++) {\n            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);\n          }\n        }\n      }\n      var det = matrix[rowIndices[rows - 1]][rows - 1];\n      return negated ? unaryMinus(det) : det;\n    }\n  }\n});","import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nvar name = 'inv';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];\nexport var createInv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    addScalar,\n    multiply,\n    unaryMinus,\n    det,\n    identity,\n    abs\n  } = _ref;\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          // two dimensional array\n          {\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              if (isMatrix(x)) {\n                return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n              } else {\n                // return an Array\n                return _inv(x, rows, cols);\n              }\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = identity(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n          r++;\n        }\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        r = rBig;\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c];\n        var Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n});","import { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nexport var createPinv = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    inv,\n    deepEqual,\n    equal,\n    dotDivide,\n    dot,\n    ctranspose,\n    divideScalar,\n    multiply,\n    add,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = isMatrix(x) ? x.size() : arraySize(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {\n                  // Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n            if (isMatrix(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return clone(x); // zero\n      return divideScalar(1, x);\n    }\n  });\n\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n  function _pinv(mat, rows, cols) {\n    var {\n      C,\n      F\n    } = _rankFact(mat, rows, cols); // TODO: Use SVD instead (may improve precision)\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n  function _rref(mat, rows, cols) {\n    var M = clone(mat);\n    var lead = 0;\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n      var i = r;\n      while (_isZero(M[i][lead])) {\n        i++;\n        if (rows === i) {\n          i = r;\n          lead++;\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n      [M[i], M[r]] = [M[r], M[i]];\n      var val = M[r][lead];\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n      lead++;\n    }\n    return M;\n  }\n\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n    var C = mat.map((_, i) => _.filter((_, j) => j < rows && !_isZero(dot(rref[j], rref[j]))));\n    var F = rref.filter((_, i) => !_isZero(dot(rref[i], rref[i])));\n    return {\n      C,\n      F\n    };\n  }\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { createComplexEigs } from './eigs/complexEigs.js';\nimport { createRealSymmetric } from './eigs/realSymetric.js';\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nvar name = 'eigs';\n\n// The absolute state of math.js's dependency system:\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    matrix,\n    addScalar,\n    subtract,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    divideScalar,\n    inv,\n    bignumber,\n    multiply,\n    add,\n    larger,\n    column,\n    flatten,\n    number,\n    complex,\n    sqrt,\n    diag,\n    qr,\n    usolve,\n    usolveAll,\n    im,\n    re,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  var doRealSymetric = createRealSymmetric({\n    config,\n    addScalar,\n    subtract,\n    column,\n    flatten,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    complex,\n    multiply,\n    add\n  });\n  var doComplexEigs = createComplexEigs({\n    config,\n    addScalar,\n    subtract,\n    multiply,\n    multiplyScalar,\n    flatten,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    qr,\n    inv,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  });\n\n  /**\n   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.\n   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –\n   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).\n   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information\n   * in `err.values` and `err.vectors`.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x, [prec])\n   *\n   * Examples:\n   *\n   *     const { eigs, multiply, column, transpose } = math\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H\n   *     E[0] == UTxHxU[0][0]  // returns true\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   *\n   * @param {number | BigNumber} [prec] Precision, default value: 1e-15\n   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n   *\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat);\n    },\n    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {\n      var mat = matrix(x);\n      return computeValuesAndVectors(mat, prec);\n    },\n    Matrix: function Matrix(mat) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    },\n    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {\n      var {\n        values,\n        vectors\n      } = computeValuesAndVectors(mat, prec);\n      return {\n        values: matrix(values),\n        vectors: matrix(vectors)\n      };\n    }\n  });\n  function computeValuesAndVectors(mat, prec) {\n    if (prec === undefined) {\n      prec = config.epsilon;\n    }\n    var size = mat.size();\n    if (size.length !== 2 || size[0] !== size[1]) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    }\n    var arr = mat.toArray();\n    var N = size[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N);\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N);\n        return doRealSymetric(arr, N, prec, _type);\n      }\n    }\n    var type = coerceTypes(mat, arr, N);\n    return doComplexEigs(arr, N, prec, type);\n  }\n\n  /** @return {boolean} */\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** @return {boolean} */\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if (isNumber(el) || isFraction(el)) {\n          hasNumber = true;\n        } else if (isBigNumber(el)) {\n          hasBig = true;\n        } else if (isComplex(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});","import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    }\n\n    // TODO check if any row/col are zero except the diagonal\n\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n    // MODIFIES arr by side effect!\n    var R = balance(arr, N, prec, type, findVectors);\n\n    // R is the row transformation matrix\n    // arr = A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // (And so to return to original matrix: A = R⁻¹ arr R)\n\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n    // MODIFIES arr by side effect!\n    reduceToHessenberg(arr, N, prec, type, findVectors, R);\n    // still true that original A = R⁻¹ arr R)\n\n    // find eigenvalues\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors);\n\n    // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms arr, the hessenberg\n    // matrix, to upper triangular\n    // (So U = C⁻¹ arr C and the relationship between current arr\n    // and original A is unchanged.)\n\n    var vectors;\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, R, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var realzero = big ? bignumber(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    var realone = big ? bignumber(1) : 1;\n\n    // base of the floating-point arithmetic\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix);\n\n    // the diagonal transformation matrix R\n    var Rdiag;\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    }\n\n    // this isn't the only time we loop thru the matrix...\n    var last = false;\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = realzero;\n        var rowNorm = realzero;\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]); // should be real\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n\n          var f = realone;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          }\n\n          // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95));\n\n          // apply balancing similarity transformation\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            }\n\n            // keep track of transformations\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    }\n\n    // return the diagonal row transformation matrix\n    return diag(Rdiag);\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    if (big) {\n      prec = bignumber(prec);\n    }\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n\n      var maxIndex = 0;\n      var max = zero;\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      }\n\n      // This col is pivoted, no need to do anything\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1;\n\n        // Interchange maxIndex-th and (i+1)-th column\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      }\n\n      // Reduce following rows and columns\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n        if (n === 0) {\n          continue;\n        }\n\n        // from j-th row subtract n-times (i+1)th row\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        }\n\n        // to (i+1)th column add n-times j-th column\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n    return R;\n  }\n\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n    var arr = clone(A);\n\n    // the list of converged eigenvalues\n    var lambdas = [];\n\n    // size of arr, which will get smaller as eigenvalues converge\n    var n = N;\n\n    // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n    var Sdiag = [];\n\n    // N×N matrix describing the overall transformation done during the QR algorithm\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined;\n\n    // n×n matrix describing the QR transformations done since last convergence\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined;\n\n    // last eigenvalue converged before this many steps\n    var lastConvergenceBefore = 0;\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1;\n\n      // TODO if the convergence is slow, do something clever\n\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      }\n\n      // TODO do an implicit QR transformation\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      }\n\n      // keep track of transformations\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      }\n\n      // The rightmost diagonal element converged to an eigenvalue\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 1;\n        arr.pop();\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        }\n\n        // The rightmost diagonal 2x2 block converged\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 2;\n        arr.pop();\n        arr.pop();\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n          arr[_i3].pop();\n        }\n      }\n      if (n === 0) {\n        break;\n      }\n    }\n\n    // standard sorting\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b)));\n\n    // the algorithm didn't converge\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    }\n\n    // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n\n  /**\n   * @param {Matrix} A hessenberg-form matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {Matrix} R similarity that turns original matrix into A\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n  function findEigenvectors(A, N, C, R, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n    var uniqueValues = [];\n    var multiplicities = [];\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    }\n\n    // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one));\n\n    // eigenvalues for which usolve failed (due to numerical error)\n    var failedLambdas = [];\n    var _loop = function _loop(_i4) {\n      var λ = uniqueValues[_i4];\n      var S = subtract(U, multiply(λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(S, b);\n      solutions.shift(); // ignore the null vector\n\n      // looks like we missed something, try inverse iteration\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(S, N, solutions, prec, type);\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(λ);\n          break;\n        }\n        solutions.push(approxVec);\n      }\n\n      // Transform back into original array coordinates\n      var correction = multiply(inv(R), C);\n      solutions = solutions.map(v => multiply(correction, v));\n      vectors.push(...solutions.map(v => flatten(v)));\n    };\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      _loop(_i4);\n    }\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n    return vectors;\n  }\n\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // matrix is already upper triangular\n    // return an identity matrix\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    }\n\n    // matrix is diagonalizable\n    // return its eigenvectors as columns\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    }\n\n    // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    }\n\n    // add rows\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n    return arr;\n  }\n\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n  function blockDiag(arr, N) {\n    var M = [];\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n    var I = 0;\n    for (var sub of arr) {\n      var n = sub.length;\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n      I += n;\n    }\n    return M;\n  }\n\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n\n    // you better choose a random vector before I count to five\n    var i = 0;\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n      if (++i >= 5) {\n        return null;\n      }\n    }\n\n    // you better converge before I count to ten\n    i = 0;\n    while (true) {\n      var c = usolve(A, b);\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n      if (++i >= 10) {\n        return null;\n      }\n      b = normalize(c);\n    }\n    return b;\n  }\n\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n\n    // generate random vector with the correct type\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n    if (cplx) {\n      v = v.map(n => complex(n));\n    }\n\n    // project to orthogonal complement\n    v = orthogonalComplement(v, orthog);\n\n    // normalize\n    return normalize(v, type);\n  }\n\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n    return v;\n  }\n\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n  return complexEigs;\n}","import { clone } from '../../../utils/object.js';\nexport function createRealSymmetric(_ref) {\n  var {\n    config,\n    addScalar,\n    subtract,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    multiply,\n    add\n  } = _ref;\n  /**\n   * @param {number[] | BigNumber[]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number' | 'BigNumber'} type\n   */\n  function main(arr, N) {\n    var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;\n    var type = arguments.length > 3 ? arguments[3] : undefined;\n    if (type === 'number') {\n      return diag(arr, prec);\n    }\n    if (type === 'BigNumber') {\n      return diagBig(arr, prec);\n    }\n    throw TypeError('Unsupported data type: ' + type);\n  }\n\n  // diagonalization implementation for number (efficient)\n  function diag(x, precision) {\n    var N = x.length;\n    var e0 = Math.abs(precision / N);\n    var psi;\n    var Sij = new Array(N);\n    // Sij is Identity Matrix\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    }\n    // initial error\n    var Vab = getAij(x);\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n    return sorting(clone(Ei), clone(Sij));\n  }\n\n  // diagonalization implementation for bigNumber\n  function diagBig(x, precision) {\n    var N = x.length;\n    var e0 = abs(precision / N);\n    var psi;\n    var Sij = new Array(N);\n    // Sij is Identity Matrix\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    }\n    // initial error\n    var Vab = getAijBig(x);\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    }\n    // return [clone(Ei), clone(Sij)]\n    return sorting(clone(Ei), clone(Sij));\n  }\n\n  // get angle\n  function getTheta(aii, ajj, aij) {\n    var denom = ajj - aii;\n    if (Math.abs(denom) <= config.epsilon) {\n      return Math.PI / 4.0;\n    } else {\n      return 0.5 * Math.atan(2.0 * aij / (ajj - aii));\n    }\n  }\n\n  // get angle\n  function getThetaBig(aii, ajj, aij) {\n    var denom = subtract(ajj, aii);\n    if (abs(denom) <= config.epsilon) {\n      return bignumber(-1).acos().div(4);\n    } else {\n      return multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));\n    }\n  }\n\n  // update eigvec\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n    return Sij;\n  }\n  // update eigvec for overlap\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, bignumber(0));\n    var Skj = createArray(N, bignumber(0));\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n    return Sij;\n  }\n\n  // update matrix\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, bignumber(0));\n    var Akj = createArray(N, bignumber(0));\n    // 2cs Hij\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]);\n    //  Aii\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j]));\n    // 0  to i\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    }\n    // Modify Hij\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = bignumber(0);\n    Hij[j][i] = bignumber(0);\n    // 0  to i\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n    return Hij;\n  }\n\n  // update matrix\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0);\n    //  Aii\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j];\n    // 0  to i\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    }\n    // Modify Hij\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0;\n    // 0  to i\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n    return Hij;\n  }\n\n  // get max off-diagonal value from Upper Diagonal\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  }\n\n  // get max off-diagonal value from Upper Diagonal\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  }\n\n  // sort results\n  function sorting(E, S) {\n    var N = E.length;\n    var values = Array(N);\n    var vectors = Array(N);\n    for (var k = 0; k < N; k++) {\n      vectors[k] = Array(N);\n    }\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n      for (var j = 0; j < E.length; j++) {\n        if (abs(E[j]) < abs(minE)) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n      values[i] = E.splice(minID, 1)[0];\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        vectors[_k5][i] = S[_k5][minID];\n        S[_k5].splice(minID, 1);\n      }\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n    return array;\n  }\n  return main;\n}","import { isSparseMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    identity,\n    inv,\n    multiply\n  } = _ref;\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n      var n = size[0];\n\n      // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n      var eps = 1e-15;\n\n      // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n      var infNorm = infinityNorm(A);\n\n      // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j;\n\n      // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n\n      // Scale A by 1 / 2^j\n      var Apos = multiply(A, Math.pow(2, -j));\n\n      // The i=0 term is just the identity matrix\n      var N = identity(n);\n      var D = identity(n);\n\n      // Initialization (i=0)\n      var factor = 1;\n\n      // Initialization (i=1)\n      var AposToI = Apos; // Cloning not necessary\n      var alternate = -1;\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n      var R = multiply(inv(D), N);\n\n      // Square j times\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n      infNorm = Math.max(rowSum, infNorm);\n    }\n    return infNorm;\n  }\n\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q,\n            j\n          };\n        }\n      }\n    }\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n    var twoqfac = qfac;\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});","import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    map,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'sylvester';\nvar dependencies = ['typed', 'schur', 'matrixFromColumns', 'matrix', 'multiply', 'range', 'concat', 'transpose', 'index', 'subset', 'add', 'subtract', 'identity', 'lusolve', 'abs'];\nexport var createSylvester = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    schur,\n    matrixFromColumns,\n    matrix,\n    multiply,\n    range,\n    concat,\n    transpose,\n    index,\n    subset,\n    add,\n    subtract,\n    identity,\n    lusolve,\n    abs\n  } = _ref;\n  /**\n   *\n   * Solves the real-valued Sylvester equation AX+XB=C for X, where A, B and C are\n   * matrices of appropriate dimensions, being A and B squared. Notice that other\n   * equivalent definitions for the Sylvester equation exist and this function\n   * assumes the one presented in the original publication of the the Bartels-\n   * Stewart algorithm, which is implemented by this function.\n   * https://en.wikipedia.org/wiki/Sylvester_equation\n   *\n   * Syntax:\n   *\n   *     math.sylvester(A, B, C)\n   *\n   * Examples:\n   *\n   *     const A = [[-1, -2], [1, 1]]\n   *     const B = [[2, -1], [1, -2]]\n   *     const C = [[-3, 2], [3, 0]]\n   *     math.sylvester(A, B, C)      // returns DenseMatrix [[-0.25, 0.25], [1.5, -1.25]]\n   *\n   * See also:\n   *\n   *     schur, lyap\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} B  Matrix B\n   * @param {Matrix | Array} C  Matrix C\n   * @return {Matrix | Array}   Matrix X, solving the Sylvester equation\n   */\n  return typed(name, {\n    'Matrix, Matrix, Matrix': _sylvester,\n    'Array, Matrix, Matrix': function ArrayMatrixMatrix(A, B, C) {\n      return _sylvester(matrix(A), B, C);\n    },\n    'Array, Array, Matrix': function ArrayArrayMatrix(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), C);\n    },\n    'Array, Matrix, Array': function ArrayMatrixArray(A, B, C) {\n      return _sylvester(matrix(A), B, matrix(C));\n    },\n    'Matrix, Array, Matrix': function MatrixArrayMatrix(A, B, C) {\n      return _sylvester(A, matrix(B), C);\n    },\n    'Matrix, Array, Array': function MatrixArrayArray(A, B, C) {\n      return _sylvester(A, matrix(B), matrix(C));\n    },\n    'Matrix, Matrix, Array': function MatrixMatrixArray(A, B, C) {\n      return _sylvester(A, B, matrix(C));\n    },\n    'Array, Array, Array': function ArrayArrayArray(A, B, C) {\n      return _sylvester(matrix(A), matrix(B), matrix(C)).toArray();\n    }\n  });\n  function _sylvester(A, B, C) {\n    var n = B.size()[0];\n    var m = A.size()[0];\n    var sA = schur(A);\n    var F = sA.T;\n    var U = sA.U;\n    var sB = schur(multiply(-1, B));\n    var G = sB.T;\n    var V = sB.U;\n    var D = multiply(multiply(transpose(U), C), V);\n    var all = range(0, m);\n    var y = [];\n    var hc = (a, b) => concat(a, b, 1);\n    var vc = (a, b) => concat(a, b, 0);\n    for (var k = 0; k < n; k++) {\n      if (k < n - 1 && abs(subset(G, index(k + 1, k))) > 1e-5) {\n        var RHS = vc(subset(D, index(all, k)), subset(D, index(all, k + 1)));\n        for (var j = 0; j < k; j++) {\n          RHS = add(RHS, vc(multiply(y[j], subset(G, index(j, k))), multiply(y[j], subset(G, index(j, k + 1)))));\n        }\n        var gkk = multiply(identity(m), multiply(-1, subset(G, index(k, k))));\n        var gmk = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k))));\n        var gkm = multiply(identity(m), multiply(-1, subset(G, index(k, k + 1))));\n        var gmm = multiply(identity(m), multiply(-1, subset(G, index(k + 1, k + 1))));\n        var LHS = vc(hc(add(F, gkk), gmk), hc(gkm, add(F, gmm)));\n        var yAux = lusolve(LHS, RHS);\n        y[k] = yAux.subset(index(range(0, m), 0));\n        y[k + 1] = yAux.subset(index(range(m, 2 * m), 0));\n        k++;\n      } else {\n        var _RHS = subset(D, index(all, k));\n        for (var _j = 0; _j < k; _j++) {\n          _RHS = add(_RHS, multiply(y[_j], subset(G, index(_j, k))));\n        }\n        var _gkk = subset(G, index(k, k));\n        var _LHS = subtract(F, multiply(_gkk, identity(m)));\n        y[k] = lusolve(_LHS, _RHS);\n      }\n    }\n    var Y = matrix(matrixFromColumns(...y));\n    var X = multiply(U, multiply(Y, transpose(V)));\n    return X;\n  }\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'schur';\nvar dependencies = ['typed', 'matrix', 'identity', 'multiply', 'qr', 'norm', 'subtract'];\nexport var createSchur = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    identity,\n    multiply,\n    qr,\n    norm,\n    subtract\n  } = _ref;\n  /**\n   *\n   * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n   * and T is upper quasi-triangular.\n   * https://en.wikipedia.org/wiki/Schur_decomposition\n   *\n   * Syntax:\n   *\n   *     math.schur(A)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 0], [-4, 3]]\n   *     math.schur(A) // returns {T: [[3, 4], [0, 1]], R: [[0, 1], [-1, 0]]}\n   *\n   * See also:\n   *\n   *     sylvester, lyap, qr\n   *\n   * @param {Array | Matrix} A  Matrix A\n   * @return {{U: Array | Matrix, T: Array | Matrix}} Object containing both matrix U and T of the Schur Decomposition A=UTU'\n   */\n  return typed(name, {\n    Array: function Array(X) {\n      var r = _schur(matrix(X));\n      return {\n        U: r.U.valueOf(),\n        T: r.T.valueOf()\n      };\n    },\n    Matrix: function Matrix(X) {\n      return _schur(X);\n    }\n  });\n  function _schur(X) {\n    var n = X.size()[0];\n    var A = X;\n    var U = identity(n);\n    var k = 0;\n    var A0;\n    do {\n      A0 = A;\n      var QR = qr(A);\n      var Q = QR.Q;\n      var R = QR.R;\n      A = multiply(R, Q);\n      U = multiply(U, Q);\n      if (k++ > 100) {\n        break;\n      }\n    } while (norm(subtract(A, A0)) > 1e-4);\n    return {\n      U,\n      T: A\n    };\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiply,\n    equalScalar,\n    divideScalar,\n    inv\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});","import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    unaryMinus,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});","import { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten,\n    isZero,\n    isNumeric\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n      return arr === null ? null : matrix(arr);\n    }\n  });\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0];\n\n    // column matrix\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n    return arr;\n  }\n  function _2d(x) {\n    return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (isZero(det)) return null;\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));\n    var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));\n    if (isZero(denominator)) return null;\n    var ta = divideScalar(numerator, denominator);\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});","import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *     math.sum(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, cumsum\n   *\n   * @param {... *} args  A single matrix or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","import { containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { _switch } from '../../utils/switch.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nimport { arraySize } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nexport var createCumSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    unaryPlus\n  } = _ref;\n  /**\n   * Compute the cumulative sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the cumulative sums\n   * along a specified dimension (defaulting to the first) will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.cumsum(a, b, c, ...)\n   *     math.cumsum(A)\n   *\n   * Examples:\n   *\n   *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]\n   *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]\n   *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]\n   *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, sum\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The cumulative sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    Array: _cumsum,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_cumsum(matrix.valueOf()));\n    },\n    // sum([a, b, c, d, ...], dim)\n    'Array, number | BigNumber': _ncumSumDim,\n    'Matrix, number | BigNumber': function MatrixNumberBigNumber(matrix, dim) {\n      return matrix.create(_ncumSumDim(matrix.valueOf(), dim));\n    },\n    // cumsum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('All values expected to be scalar in function cumsum');\n      }\n      return _cumsum(args);\n    }\n  });\n\n  /**\n     * Recursively calculate the cumulative sum of an n-dimensional array\n     * @param {Array} array\n     * @return {number} cumsum\n     * @private\n     */\n  function _cumsum(array) {\n    try {\n      return _cumsummap(array);\n    } catch (err) {\n      throw improveErrorMessage(err, name);\n    }\n  }\n  function _cumsummap(array) {\n    if (array.length === 0) {\n      return [];\n    }\n    var sums = [unaryPlus(array[0])]; // unaryPlus converts to number if need be\n    for (var i = 1; i < array.length; ++i) {\n      // Must use add below and not addScalar for the case of summing a\n      // 2+-dimensional array along the 0th dimension (the row vectors,\n      // or higher-d analogues, are literally added to each other).\n      sums.push(add(sums[i - 1], array[i]));\n    }\n    return sums;\n  }\n  function _ncumSumDim(array, dim) {\n    var size = arraySize(array);\n    if (dim < 0 || dim >= size.length) {\n      // TODO: would be more clear when throwing a DimensionError here\n      throw new IndexError(dim, size.length);\n    }\n    try {\n      return _cumsumDimensional(array, dim);\n    } catch (err) {\n      throw improveErrorMessage(err, name);\n    }\n  }\n\n  /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */\n  function _cumsumDimensional(mat, dim) {\n    var i, ret, tran;\n    if (dim <= 0) {\n      var initialValue = mat[0][0];\n      if (!Array.isArray(initialValue)) {\n        return _cumsummap(mat);\n      } else {\n        tran = _switch(mat);\n        ret = [];\n        for (i = 0; i < tran.length; i++) {\n          ret[i] = _cumsumDimensional(tran[i], dim - 1);\n        }\n        return ret;\n      }\n    } else {\n      ret = [];\n      for (i = 0; i < mat.length; i++) {\n        ret[i] = _cumsumDimensional(mat[i], dim - 1);\n      }\n      return ret;\n    }\n  }\n});","import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide\n  } = _ref;\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multidimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n      return _mean(args);\n    }\n  });\n\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n    return divide(sum, num);\n  }\n});","import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1);\n\n        // array now partitioned at mid + 1, take max of left part\n        var left = array[mid];\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], ...)\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n      return _median(args);\n    }\n  });\n});","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    map,\n    median,\n    subtract\n  } = _ref;\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  function _mad(array) {\n    array = flatten(array.valueOf());\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});","import { deepForEach } from '../../utils/collection.js';\nimport { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a multidimensional array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    }\n\n    // calculate the mean and number of elements\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num);\n\n    // calculate the variance\n    sum = undefined;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n    if (isNaN(sum)) {\n      return sum;\n    }\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n      case 'biased':\n        return divide(sum, num + 1);\n      case 'unbiased':\n        {\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n      return apply(array, dim, x => _var(x, normalization));\n    } catch (err) {\n      throw improveErrorMessage(err, 'variance');\n    }\n  }\n});","import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];\nexport var createQuantileSeq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare\n  } = _ref;\n  /**\n   * Compute the prob order quantile of a matrix or a list with values.\n   * The sequence is sorted and the middle value is returned.\n   * Supported types of sequence values are: Number, BigNumber, Unit\n   * Supported types of probability are: Number, BigNumber\n   *\n   * In case of a multidimensional array or matrix, the prob order quantile\n   * of all elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.quantileSeq(A, prob[, sorted])\n   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n   *     math.quantileSeq(A, N[, sorted])\n   *\n   * Examples:\n   *\n   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4\n   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]\n   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]\n   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, variance\n   *\n   * @param {Array, Matrix} data                A single matrix or Array\n   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n   *                                            the amount of evenly distributed steps of\n   *                                            probabilities; only one of these options can\n   *                                            be provided\n   * @param {Boolean} sorted=false              is data sorted in ascending order\n   * @return {Number, BigNumber, Unit, Array}   Quantile(s)\n   */\n  function quantileSeq(data, probOrN, sorted) {\n    var probArr, dataArr, one;\n    if (arguments.length < 2 || arguments.length > 3) {\n      throw new SyntaxError('Function quantileSeq requires two or three parameters');\n    }\n    if (isCollection(data)) {\n      sorted = sorted || false;\n      if (typeof sorted === 'boolean') {\n        dataArr = data.valueOf();\n        if (isNumber(probOrN)) {\n          if (probOrN < 0) {\n            throw new Error('N/prob must be non-negative');\n          }\n          if (probOrN <= 1) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return _quantileSeq(dataArr, probOrN, sorted);\n          }\n          if (probOrN > 1) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!isInteger(probOrN)) {\n              throw new Error('N must be a positive integer');\n            }\n            var nPlusOne = probOrN + 1;\n            probArr = new Array(probOrN);\n            for (var i = 0; i < probOrN;) {\n              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);\n            }\n            return probArr;\n          }\n        }\n        if (isBigNumber(probOrN)) {\n          var BigNumber = probOrN.constructor;\n          if (probOrN.isNegative()) {\n            throw new Error('N/prob must be non-negative');\n          }\n          one = new BigNumber(1);\n          if (probOrN.lte(one)) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));\n          }\n          if (probOrN.gt(one)) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!probOrN.isInteger()) {\n              throw new Error('N must be a positive integer');\n            }\n\n            // largest possible Array length is 2^32-1\n            // 2^32 < 10^15, thus safe conversion guaranteed\n            var intN = probOrN.toNumber();\n            if (intN > 4294967295) {\n              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');\n            }\n            var _nPlusOne = new BigNumber(intN + 1);\n            probArr = new Array(intN);\n            for (var _i = 0; _i < intN;) {\n              probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));\n            }\n            return probArr;\n          }\n        }\n        if (Array.isArray(probOrN)) {\n          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])\n          probArr = new Array(probOrN.length);\n          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {\n            var currProb = probOrN[_i2];\n            if (isNumber(currProb)) {\n              if (currProb < 0 || currProb > 1) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else if (isBigNumber(currProb)) {\n              one = new currProb.constructor(1);\n              if (currProb.isNegative() || currProb.gt(one)) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else {\n              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n            }\n\n            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);\n          }\n          return probArr;\n        }\n        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n      }\n\n      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n    }\n\n    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n  }\n\n  /**\n   * Calculate the prob order quantile of an n-dimensional array.\n   *\n   * @param {Array} array\n   * @param {Number, BigNumber} prob\n   * @param {Boolean} sorted\n   * @return {Number, BigNumber, Unit} prob order quantile\n   * @private\n   */\n  function _quantileSeq(array, prob, sorted) {\n    var flat = flatten(array);\n    var len = flat.length;\n    if (len === 0) {\n      throw new Error('Cannot calculate quantile of an empty sequence');\n    }\n    if (isNumber(prob)) {\n      var _index = prob * (len - 1);\n      var _fracPart = _index % 1;\n      if (_fracPart === 0) {\n        var value = sorted ? flat[_index] : partitionSelect(flat, _index);\n        validate(value);\n        return value;\n      }\n      var _integerPart = Math.floor(_index);\n      var _left;\n      var _right;\n      if (sorted) {\n        _left = flat[_integerPart];\n        _right = flat[_integerPart + 1];\n      } else {\n        _right = partitionSelect(flat, _integerPart + 1);\n\n        // max of partition is kth largest\n        _left = flat[_integerPart];\n        for (var i = 0; i < _integerPart; ++i) {\n          if (compare(flat[i], _left) > 0) {\n            _left = flat[i];\n          }\n        }\n      }\n      validate(_left);\n      validate(_right);\n\n      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n      return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));\n    }\n\n    // If prob is a BigNumber\n    var index = prob.times(len - 1);\n    if (index.isInteger()) {\n      index = index.toNumber();\n      var _value = sorted ? flat[index] : partitionSelect(flat, index);\n      validate(_value);\n      return _value;\n    }\n    var integerPart = index.floor();\n    var fracPart = index.minus(integerPart);\n    var integerPartNumber = integerPart.toNumber();\n    var left;\n    var right;\n    if (sorted) {\n      left = flat[integerPartNumber];\n      right = flat[integerPartNumber + 1];\n    } else {\n      right = partitionSelect(flat, integerPartNumber + 1);\n\n      // max of partition is kth largest\n      left = flat[integerPartNumber];\n      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {\n        if (compare(flat[_i3], left) > 0) {\n          left = flat[_i3];\n        }\n      }\n    }\n    validate(left);\n    validate(right);\n\n    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n    var one = new fracPart.constructor(1);\n    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));\n  }\n\n  /**\n   * Check if array value types are valid, throw error otherwise.\n   * @param {number | BigNumber | Unit} x\n   * @param {number | BigNumber | Unit} x\n   * @private\n   */\n  var validate = typed({\n    'number | BigNumber | Unit': function numberBigNumberUnit(x) {\n      return x;\n    }\n  });\n  return quantileSeq;\n});","import { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'std';\nvar dependencies = ['typed', 'map', 'sqrt', 'variance'];\nexport var createStd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    map,\n    sqrt,\n    variance\n  } = _ref;\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(variance(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated by default, unless an axis is specified\n   * in which case the standard deviation will be computed along that axis.\n   *\n   * Additionally, it is possible to compute the standard deviation along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *     math.std(A, dimension)\n   *     math.std(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6)                     // returns 2\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, variance\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the standard deviation for a matrix\n   * @return {*} The standard deviation\n   */\n  return typed(name, {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n    // std([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': _std,\n    // std([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _std,\n    // std(a, b, c, d, ...)\n    '...': function _(args) {\n      return _std(args);\n    }\n  });\n  function _std(array, normalization) {\n    if (array.length === 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n    try {\n      var v = variance.apply(null, arguments);\n      if (isCollection(v)) {\n        return map(v, sqrt);\n      } else {\n        return sqrt(v);\n      }\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {\n        throw new TypeError(err.message.replace(' variance', ' std'));\n      } else {\n        throw err;\n      }\n    }\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { combinationsNumber } from '../../plain/number/combinations.js';\nvar name = 'combinations';\nvar dependencies = ['typed'];\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n      result = one;\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n      if (k < n - 1) {\n        var _prodrange = product(n, n + k - 1);\n        return _prodrange / product(1, k);\n      }\n      var prodrange = product(k + 1, n + k - 1);\n      return prodrange / product(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n      result = one;\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});","/* eslint-disable no-loss-of-precision */\n\n// References\n// ----------\n// [1] Hare, \"Computing the Principal Branch of log-Gamma\", Journal of Algorithms, 1997.\n// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments\n\nimport { lgammaNumber, lnSqrt2PI } from '../../plain/number/index.js';\nimport { factory } from '../../utils/factory.js';\nimport { copysign } from '../../utils/number.js';\nvar name = 'lgamma';\nvar dependencies = ['Complex', 'typed'];\nexport var createLgamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Complex,\n    typed\n  } = _ref;\n  // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get\n  // sufficient accuracy.\n  //\n  // These two values are copied from Scipy implementation:\n  // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37\n  var SMALL_RE = 7;\n  var SMALL_IM = 7;\n\n  /**\n   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].\n   *\n   * If you cannot access the paper, can also get these values from the formula in [2].\n   *\n   *    1 /     12 = 0.00833333333333333333333333333333\n   *    1 /    360 = 0.00277777777777777777777777777778\n   * ...\n   * 3617 / 133400 = 0.02955065359477124183006535947712\n   */\n  var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];\n\n  /**\n   * Logarithm of the gamma function for real, positive numbers and complex numbers,\n   * using Lanczos approximation for numbers and Stirling series for complex numbers.\n   *\n   * Syntax:\n   *\n   *    math.lgamma(n)\n   *\n   * Examples:\n   *\n   *    math.lgamma(5)       // returns 3.178053830347945\n   *    math.lgamma(0)       // returns Infinity\n   *    math.lgamma(-0.5)    // returns NaN\n   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i\n   *\n   * See also:\n   *\n   *    gamma\n   *\n   * @param {number | Complex} n   A real or complex number\n   * @return {number | Complex}    The log gamma of `n`\n   */\n  return typed(name, {\n    number: lgammaNumber,\n    Complex: lgammaComplex,\n    BigNumber: function BigNumber() {\n      throw new Error(\"mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber\");\n    }\n  });\n  function lgammaComplex(n) {\n    var TWOPI = 6.2831853071795864769252842; // 2*pi\n    var LOGPI = 1.1447298858494001741434262; // log(pi)\n\n    var REFLECTION = 0.1;\n    if (n.isNaN()) {\n      return new Complex(NaN, NaN);\n    } else if (n.im === 0) {\n      return new Complex(lgammaNumber(n.re), 0);\n    } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {\n      return lgammaStirling(n);\n    } else if (n.re <= REFLECTION) {\n      // Reflection formula. see Proposition 3.1 in [1]\n      var tmp = copysign(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);\n      var a = n.mul(Math.PI).sin().log();\n      var b = lgammaComplex(new Complex(1 - n.re, -n.im));\n      return new Complex(LOGPI, tmp).sub(a).sub(b);\n    } else if (n.im >= 0) {\n      return lgammaRecurrence(n);\n    } else {\n      return lgammaRecurrence(n.conjugate()).conjugate();\n    }\n  }\n  function lgammaStirling(z) {\n    // formula ref in [2]\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101\n\n    // left part\n\n    // x (log(x) - 1) + 1/2 (log(2PI) - log(x))\n    // => (x - 0.5) * log(x) - x + log(2PI) / 2\n    var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(lnSqrt2PI);\n\n    // right part\n\n    var rz = new Complex(1, 0).div(z);\n    var rzz = rz.div(z);\n    var a = coeffs[0];\n    var b = coeffs[1];\n    var r = 2 * rzz.re;\n    var s = rzz.re * rzz.re + rzz.im * rzz.im;\n    for (var i = 2; i < 8; i++) {\n      var tmp = b;\n      b = -s * a + coeffs[i];\n      a = r * a + tmp;\n    }\n    var rightPart = rz.mul(rzz.mul(a).add(b));\n\n    // plus left and right\n\n    return leftPart.add(rightPart);\n  }\n  function lgammaRecurrence(z) {\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78\n\n    var signflips = 0;\n    var sb = 0;\n    var shiftprod = z;\n    z = z.add(1);\n    while (z.re <= SMALL_RE) {\n      shiftprod = shiftprod.mul(z);\n      var nsb = shiftprod.im < 0 ? 1 : 0;\n      if (nsb !== 0 && sb === 0) signflips++;\n      sb = nsb;\n      z = z.add(1);\n    }\n    return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));\n  }\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    gamma\n  } = _ref;\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  return typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'kldivergence';\nvar dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'map', 'dotDivide', 'log', 'isNumeric'];\nexport var createKldivergence = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divide,\n    sum,\n    multiply,\n    map,\n    dotDivide,\n    log,\n    isNumeric\n  } = _ref;\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n  return typed(name, {\n    'Array, Array': function ArrayArray(q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function MatrixArray(q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function ArrayMatrix(q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function MatrixMatrix(q, p) {\n      return _kldiv(q, p);\n    }\n  });\n  function _kldiv(q, p) {\n    var plength = p.size().length;\n    var qlength = q.size().length;\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    }\n\n    // Before calculation, apply normalization\n    var sumq = sum(q);\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n    var sump = sum(p);\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n    var qnorm = divide(q, sum(q));\n    var pnorm = divide(p, sum(p));\n    var result = sum(multiply(qnorm, map(dotDivide(qnorm, pnorm), x => log(x))));\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n});","import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    multiply,\n    factorial,\n    isInteger,\n    isPositive\n  } = _ref;\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});","import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    factorial\n  } = _ref;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix, isNumber } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *     math.pickRandom(array, { weights, number, elementWise })\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\n   *         // returns one of the items in the array\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles, {});\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {\n      return _pickRandom(possibles, options);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, {\n        number\n      });\n    },\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {\n      return _pickRandom(possibles, {\n        weights\n      });\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    }\n  });\n\n  /**\n   * @param {Array | Matrix} possibles\n   * @param {{\n   *   number?: number,\n   *   weights?: Array | Matrix,\n   *   elementWise: boolean\n   * }} options\n   * @returns {number | Array}\n   * @private\n   */\n  function _pickRandom(possibles, _ref2) {\n    var {\n      number,\n      weights,\n      elementWise = true\n    } = _ref2;\n    var single = typeof number === 'undefined';\n    if (single) {\n      number = 1;\n    }\n    var createMatrix = isMatrix(possibles) ? possibles.create : isMatrix(weights) ? weights.create : null;\n    possibles = possibles.valueOf(); // get Array\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    if (elementWise === true) {\n      possibles = flatten(possibles);\n      weights = flatten(weights);\n    }\n    var totalWeights = 0;\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n        totalWeights += weights[i];\n      }\n    }\n    var length = possibles.length;\n    var result = [];\n    var pick;\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n      result.push(pick);\n    }\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\n  }\n});","import seedrandom from 'seedrandom';\nvar singletonRandom = /* #__PURE__ */seedrandom(Date.now());\nexport function createRng(randomSeed) {\n  var random;\n\n  // create a new random generator with given seed\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  }\n\n  // initialize a seeded pseudo random number generator with config's random seed\n  setSeed(randomSeed);\n\n  // wrapper function so the rng can be updated via generator\n  function rng() {\n    return random();\n  }\n  return rng;\n}","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","\"use strict\";","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max),\n    'Array | Matrix': size => _randomMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)\n  });\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _random(min, max));\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});\n\n// number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], _ref2 => {\n  var {\n    typed,\n    config,\n    on,\n    matrix\n  } = _ref2;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max)\n  });\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});","/**\n * This is a util function for generating a random matrix recursively.\n * @param {number[]} size\n * @param {function} random\n * @returns {Array}\n */\nexport function randomMatrix(size, random) {\n  var data = [];\n  size = size.slice(0);\n  if (size.length > 1) {\n    for (var i = 0, length = size.shift(); i < length; i++) {\n      data.push(randomMatrix(size, random));\n    }\n  } else {\n    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {\n      data.push(random());\n    }\n  }\n  return data;\n}","import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 1),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    factorial,\n    combinations,\n    isNegative,\n    isInteger,\n    number,\n    bignumber,\n    larger\n  } = _ref;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'bellNumbers';\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\nexport var createBellNumbers = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    isNegative,\n    isInteger,\n    stirlingS2\n  } = _ref;\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3) // returns 5\n   *    math.bellNumbers(8) // returns 4140\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      }\n\n      // Sum (k=0, n) S(n,k).\n      var result = 0;\n      for (var i = 0; i <= n; i++) {\n        result = addScalar(result, stirlingS2(n, i));\n      }\n      return result;\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    combinations,\n    isNegative,\n    isInteger\n  } = _ref;\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    combinations,\n    isPositive,\n    isNegative,\n    isInteger,\n    larger\n  } = _ref;\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nexport var createLeafCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    typed\n  } = _ref;\n  // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(n => {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n  return typed(name, {\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});","import { isParenthesisNode } from '../../utils/is.js';\nimport { isConstantNode, isVariableNode, isNumericNode, isConstantExpression } from './simplify/wildcards.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyConstant', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyConstant,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - Matches any node [Node]\n   * - 'c' - Matches a constant literal (5 or 3.2) [ConstantNode]\n   * - 'cl' - Matches a constant literal; same as c [ConstantNode]\n   * - 'cd' - Matches a decimal literal (5 or -3.2) [ConstantNode or unaryMinus wrapping a ConstantNode]\n   * - 'ce' - Matches a constant expression (-5 or √3) [Expressions consisting of only ConstantNodes, functions, and operators]\n   * - 'v' - Matches a variable; anything not matched by c (-5 or x) [Node that is not a ConstantNode]\n   * - 'vl' - Matches a variable literal (x or y) [SymbolNode]\n   * - 'vd' - Matches a non-decimal expression; anything not matched by cd (x or √3) [Node that is not a ConstantNode or unaryMinus that is wrapping a ConstantNode]\n   * - 've' - Matches a variable expression; anything not matched by ce (x or 2x) [Expressions that contain a SymbolNode or other non-constant term]\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules. Note that since\n   * the `simplifyCore` function is in the default list of rules, by default\n   * simplify will convert any function calls in the expression that have\n   * operator equivalents to their operator forms.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {SimplifyRule[]} [rules]\n   *            Optional list with custom rules\n   * @param {Object} [scope] Optional scope with variables\n   * @param {SimplifyOptions} [options] Optional configuration settings\n   * @return {Node} Returns the simplified form of `expr`\n   */\n  typed.addConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  var simplify = typed('simplify', {\n    Node: _simplify,\n    'Node, Map': (expr, scope) => _simplify(expr, false, scope),\n    'Node, Map, Object': (expr, scope, options) => _simplify(expr, false, scope, options),\n    'Node, Array': _simplify,\n    'Node, Array, Map': _simplify,\n    'Node, Array, Map, Object': _simplify\n  });\n  typed.removeConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  }\n\n  // All constants that are allowed in rules\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true\n    // null: false,\n    // undefined: false,\n    // version: false,\n  };\n\n  // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n  simplify.rules = [simplifyCore,\n  // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  },\n  // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(cl*v) -> v * (-cl)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(cl*v) -> (-cl) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*cl) -> v * (-cl)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  },\n  // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  },\n  // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  },\n  // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n  },\n  // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' vd   * ( vd   * n1 + n2)',\n    r: 'vd^2       * n1 +  vd   * n2'\n  }, {\n    s: ' vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n  }, {\n    s: 'vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n  },\n  // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant,\n  // First: before collecting like terms\n\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'vd*n + vd',\n    r: 'vd*(n+1)'\n  },\n  // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  },\n  // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  },\n  // noncommutative additional cases (term collection & factoring)\n  {\n    s: 'n*vd + vd -> (n+1)*vd',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'vd + n*vd -> (1+n)*vd',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n^n1 * n -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*cd + cd',\n    r: '(n+1)*cd'\n  }, {\n    s: 'cd*n + cd -> cd*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'cd + cd*n -> cd*(1+n)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant,\n  // Second: before returning expressions to \"standard form\"\n\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // final ordering of constants\n  {\n    s: 'ce+ve -> ve+ce',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'vd*cd -> cd*vd',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  },\n  // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    l: 'n^1',\n    r: 'n'\n  },\n  // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  },\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n    if (isAssociative(newRule.l, context)) {\n      var nonCommutative = !isCommutative(newRule.l, context);\n      var leftExpandsym;\n      // Gen. the LHS placeholder used in this NC-context specific expansion rules\n      if (nonCommutative) leftExpandsym = _getExpandPlaceholderSymbol();\n      var makeNode = createMakeNodeFunction(newRule.l);\n      var expandsym = _getExpandPlaceholderSymbol();\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l, expandsym]);\n      // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n\n      // In and for a non-commutative context, attempting with yet additional expansion rules makes\n      // way for more matches cases of multi-arg expressions; such that associative rules (such as\n      // 'n*n -> n^2') can be applied to exprs. such as 'a * b * b' and 'a * b * b * a'.\n      if (nonCommutative) {\n        // 'Non-commutative' 1: LHS (placeholder) only\n        newRule.expandedNC1 = {};\n        newRule.expandedNC1.l = makeNode([leftExpandsym, newRule.l]);\n        newRule.expandedNC1.r = makeNode([leftExpandsym, newRule.r]);\n        // 'Non-commutative' 2: farmost LHS and RHS placeholders\n        newRule.expandedNC2 = {};\n        newRule.expandedNC2.l = makeNode([leftExpandsym, newRule.expanded.l]);\n        newRule.expandedNC2.r = makeNode([leftExpandsym, newRule.expanded.r]);\n      }\n    }\n    return newRule;\n  }\n\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n        /* falls through */\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      }\n      // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  function _simplify(expr, rules) {\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createEmptyMap();\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var debug = options.consoleDebug;\n    rules = _buildRules(rules || simplify.rules, options.context);\n    var res = resolve(expr, scope);\n    res = removeParens(res);\n    var visited = {};\n    var str = res.toString({\n      parenthesis: 'all'\n    });\n    while (!visited[str]) {\n      visited[str] = true;\n      _lastsym = 0; // counter for placeholder symbols\n      var laststr = str;\n      if (debug) console.log('Working on: ', str);\n      for (var i = 0; i < rules.length; i++) {\n        var rulestr = '';\n        if (typeof rules[i] === 'function') {\n          res = rules[i](res, options);\n          if (debug) rulestr = rules[i].name;\n        } else {\n          flatten(res, options.context);\n          res = applyRule(res, rules[i], options.context);\n          if (debug) {\n            rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n          }\n        }\n        if (debug) {\n          var newstr = res.toString({\n            parenthesis: 'all'\n          });\n          if (newstr !== laststr) {\n            console.log('Applying', rulestr, 'produced', newstr);\n            laststr = newstr;\n          }\n        }\n        /* Use left-heavy binary tree internally,\n         * since custom rule functions may expect it\n         */\n        unflattenl(res, options.context);\n      }\n      str = res.toString({\n        parenthesis: 'all'\n      });\n    }\n    return res;\n  }\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n          resNodes[i] = newNode;\n        }\n      }\n    }\n    return resNodes;\n  }\n\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n    var mergedContext = mergeContext(rule.imposeContext, context);\n\n    // Do not clone node unless we find a match\n    var res = node;\n\n    // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n      var newIndex = res.index;\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    }\n\n    // Try to match a rule against this node\n    var repl = rule.r;\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0];\n\n    // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n    // Additional, non-commutative context expansion-rules\n    if (!matches && rule.expandedNC1) {\n      repl = rule.expandedNC1.r;\n      matches = _ruleMatch(rule.expandedNC1.l, res, mergedContext)[0];\n      if (!matches) {\n        // Existence of NC1 implies NC2\n        repl = rule.expandedNC2.r;\n        matches = _ruleMatch(rule.expandedNC2.l, res, mergedContext)[0];\n      }\n    }\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      }\n\n      // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      });\n\n      // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n    return res;\n  }\n\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    };\n\n    // Some matches may not have placeholders; this is OK\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    }\n\n    // Placeholders with the same key must match exactly\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n  function combineChildMatches(list1, list2) {\n    var res = [];\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      }\n\n      // rule and node match. Search the children of rule and node.\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          }\n          // The child matched, so add the information returned from the child to our result\n          childMatches.push(childMatch);\n        }\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) ||\n          // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n          if (leftMatch.length === 0) {\n            return [];\n          }\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n          if (rightMatch.length === 0) {\n            return [];\n          }\n          childMatches = [leftMatch, rightMatch];\n        }\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule\n        // matches for each of them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first one or two characters of the symbol node name.\n      // These meanings are expalined in the documentation for simplify()\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else {\n        // wildcards are composed of up to two alphabetic or underscore characters\n        switch (rule.name[1] >= 'a' && rule.name[1] <= 'z' ? rule.name.substring(0, 2) : rule.name[0]) {\n          case 'n':\n          case '_p':\n            // rule matches _anything_, so assign this node to the rule.name placeholder\n            // Assign node to the rule.name placeholder.\n            // Our parent will check for matches among placeholders.\n            res[0].placeholders[rule.name] = node;\n            break;\n          case 'c':\n          case 'cl':\n            // rule matches a ConstantNode\n            if (isConstantNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'v':\n            // rule matches anything other than a ConstantNode\n            if (!isConstantNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'vl':\n            // rule matches VariableNode\n            if (isVariableNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'cd':\n            // rule matches a ConstantNode or unaryMinus-wrapped ConstantNode\n            if (isNumericNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'vd':\n            // rule matches anything other than a ConstantNode or unaryMinus-wrapped ConstantNode\n            if (!isNumericNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'ce':\n            // rule matches expressions that have a constant value\n            if (isConstantExpression(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 've':\n            // rule matches expressions that do not have a constant value\n            if (!isConstantExpression(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          default:\n            throw new Error('Invalid symbol in rule: ' + rule.name);\n        }\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    }\n\n    // It's a match!\n\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n    return res;\n  }\n\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  return simplify;\n});","import { isConstantNode, isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\nexport { isConstantNode, isSymbolNode as isVariableNode } from '../../../utils/is.js';\nexport function isNumericNode(x) {\n  return isConstantNode(x) || isOperatorNode(x) && x.isUnary() && isConstantNode(x.args[0]);\n}\nexport function isConstantExpression(x) {\n  if (isConstantNode(x)) {\n    // Basic Constant types\n    return true;\n  }\n  if ((isFunctionNode(x) || isOperatorNode(x)) && x.args.every(isConstantExpression)) {\n    // Can be constant depending on arguments\n    return true;\n  }\n  if (isParenthesisNode(x) && isConstantExpression(x.content)) {\n    // Parenthesis are transparent\n    return true;\n  }\n  return false; // Probably missing some edge cases\n}","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { hasOwnProperty } from '../../../utils/object.js';\nvar name = 'simplifyUtil';\nvar dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];\nexport var createUtil = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n\n  /* So that properties of an operator fit on one line: */\n  var T = true;\n  var F = false;\n  var defaultName = 'defaultF';\n  var defaultContext = {\n    /*      */add: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n    /**/unaryPlus: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n    /* */subtract: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n    /* */multiply: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: T\n    },\n    /*   */divide: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    },\n    /*    */paren: {\n      trivial: T,\n      total: T,\n      commutative: T,\n      associative: F\n    },\n    /* */defaultF: {\n      trivial: F,\n      total: T,\n      commutative: F,\n      associative: F\n    }\n  };\n  var realContext = {\n    divide: {\n      total: F\n    },\n    log: {\n      total: F\n    }\n  };\n  var positiveContext = {\n    subtract: {\n      total: F\n    },\n    abs: {\n      trivial: T\n    },\n    log: {\n      total: T\n    }\n  };\n  function hasProperty(nodeOrName, property) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultContext;\n    var name = defaultName;\n    if (typeof nodeOrName === 'string') {\n      name = nodeOrName;\n    } else if (isOperatorNode(nodeOrName)) {\n      name = nodeOrName.fn.toString();\n    } else if (isFunctionNode(nodeOrName)) {\n      name = nodeOrName.name;\n    } else if (isParenthesisNode(nodeOrName)) {\n      name = 'paren';\n    }\n    if (hasOwnProperty(context, name)) {\n      var properties = context[name];\n      if (hasOwnProperty(properties, property)) {\n        return properties[property];\n      }\n      if (hasOwnProperty(defaultContext, name)) {\n        return defaultContext[name][property];\n      }\n    }\n    if (hasOwnProperty(context, defaultName)) {\n      var _properties = context[defaultName];\n      if (hasOwnProperty(_properties, property)) {\n        return _properties[property];\n      }\n      return defaultContext[defaultName][property];\n    }\n    /* name not found in context and context has no global default */\n    /* So use default context. */\n    if (hasOwnProperty(defaultContext, name)) {\n      var _properties2 = defaultContext[name];\n      if (hasOwnProperty(_properties2, property)) {\n        return _properties2[property];\n      }\n    }\n    return defaultContext[defaultName][property];\n  }\n  function isCommutative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'commutative', context);\n  }\n  function isAssociative(node) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n    return hasProperty(node, 'associative', context);\n  }\n\n  /**\n   * Merge the given contexts, with primary overriding secondary\n   * wherever they might conflict\n   */\n  function mergeContext(primary, secondary) {\n    var merged = _objectSpread({}, primary);\n    for (var prop in secondary) {\n      if (hasOwnProperty(primary, prop)) {\n        merged[prop] = _objectSpread(_objectSpread({}, secondary[prop]), primary[prop]);\n      } else {\n        merged[prop] = secondary[prop];\n      }\n    }\n    return merged;\n  }\n\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n  function flatten(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n    node.args = allChildren(node, context);\n    for (var i = 0; i < node.args.length; i++) {\n      flatten(node.args[i], context);\n    }\n  }\n\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n  function allChildren(node, context) {\n    var op;\n    var children = [];\n    var findChildren = function findChildren(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n        if (isOperatorNode(child) && op === child.op) {\n          findChildren(child);\n        } else {\n          children.push(child);\n        }\n      }\n    };\n    if (isAssociative(node, context)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    } else {\n      return node.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n  function unflattenr(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i], context);\n    }\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.pop();\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n      node.args = curnode.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n  function unflattenl(node, context) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i], context);\n    }\n    if (l > 2 && isAssociative(node, context)) {\n      var curnode = node.args.shift();\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n      node.args = curnode.args;\n    }\n  }\n  function createMakeNodeFunction(node) {\n    if (isOperatorNode(node)) {\n      return function (args) {\n        try {\n          return new OperatorNode(node.op, node.fn, args, node.implicit);\n        } catch (err) {\n          console.error(err);\n          return [];\n        }\n      };\n    } else {\n      return function (args) {\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n  return {\n    createMakeNodeFunction,\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    allChildren,\n    unflattenr,\n    unflattenl,\n    defaultContext,\n    realContext,\n    positiveContext\n  };\n});","import { isFraction, isMatrix, isNode, isArrayNode, isConstantNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'parse', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  /**\n   * simplifyConstant() takes a mathjs expression (either a Node representing\n   * a parse tree or a string which it parses to produce a node), and replaces\n   * any subexpression of it consisting entirely of constants with the computed\n   * value of that subexpression.\n   *\n   * Syntax:\n   *\n   *     simplifyConstant(expr)\n   *     simplifyConstant(expr, options)\n   *\n   * Examples:\n   *\n   *     math.simplifyConstant('x + 4*3/6')  // Node \"x + 2\"\n   *     math.simplifyConstant('z cos(0)')   // Node \"z 1\"\n   *     math.simplifyConstant('(5.2 + 1.08)t', {exactFractions: false})  // Node \"6.28 t\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyCore, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with constant subexpressions evaluated\n   */\n  var simplifyConstant = typed('simplifyConstant', {\n    Node: node => _ensureNode(foldFraction(node, {})),\n    'Node, Object': function NodeObject(expr, options) {\n      return _ensureNode(foldFraction(expr, options));\n    }\n  });\n  function _removeFractions(thing) {\n    if (isFraction(thing)) {\n      return thing.valueOf();\n    }\n    if (thing instanceof Array) {\n      return thing.map(_removeFractions);\n    }\n    if (isMatrix(thing)) {\n      return matrix(_removeFractions(thing.valueOf()));\n    }\n    return thing;\n  }\n  function _eval(fnname, args, options) {\n    try {\n      return mathWithTransform[fnname].apply(null, args);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(_removeFractions);\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    },\n    string: function string(s) {\n      return new ConstantNode(s);\n    },\n    Matrix: function Matrix(m) {\n      return new ArrayNode(m.valueOf().map(e => _toNode(e)));\n    }\n  });\n  function _ensureNode(thing) {\n    if (isNode(thing)) {\n      return thing;\n    }\n    return _toNode(thing);\n  }\n\n  // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n    return n;\n  }\n\n  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n      return _exactFraction(s.re, options);\n    },\n    'Matrix, Object': function MatrixObject(s, options) {\n      return matrix(_exactFraction(s.valueOf()));\n    },\n    'Array, Object': function ArrayObject(s, options) {\n      return s.map(_exactFraction);\n    }\n  });\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n    if (f.d === 1) {\n      return n;\n    }\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n\n  /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */\n  function _foldAccessor(obj, index, options) {\n    if (!isIndexNode(index)) {\n      // don't know what to do with that...\n      return new AccessorNode(_ensureNode(obj), _ensureNode(index));\n    }\n    if (isArrayNode(obj) || isMatrix(obj)) {\n      var remainingDims = Array.from(index.dimensions);\n      /* We will resolve constant indices one at a time, looking\n       * just in the first or second dimensions because (a) arrays\n       * of more than two dimensions are likely rare, and (b) pulling\n       * out the third or higher dimension would be pretty intricate.\n       * The price is that we miss simplifying [..3d array][x,y,1]\n       */\n      while (remainingDims.length > 0) {\n        if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {\n          var first = _toNumber(remainingDims.shift().value, options);\n          if (isArrayNode(obj)) {\n            obj = obj.items[first - 1];\n          } else {\n            // matrix\n            obj = obj.valueOf()[first - 1];\n            if (obj instanceof Array) {\n              obj = matrix(obj);\n            }\n          }\n        } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {\n          var second = _toNumber(remainingDims[1].value, options);\n          var tryItems = [];\n          var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();\n          for (var item of fromItems) {\n            if (isArrayNode(item)) {\n              tryItems.push(item.items[second - 1]);\n            } else if (isMatrix(obj)) {\n              tryItems.push(item[second - 1]);\n            } else {\n              break;\n            }\n          }\n          if (tryItems.length === fromItems.length) {\n            if (isArrayNode(obj)) {\n              obj = new ArrayNode(tryItems);\n            } else {\n              // matrix\n              obj = matrix(tryItems);\n            }\n            remainingDims.splice(1, 1);\n          } else {\n            // extracting slice along 2nd dimension failed, give up\n            break;\n          }\n        } else {\n          // neither 1st or 2nd dimension is constant, give up\n          break;\n        }\n      }\n      if (remainingDims.length === index.dimensions.length) {\n        /* No successful constant indexing */\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      if (remainingDims.length > 0) {\n        /* Indexed some but not all dimensions */\n        index = new IndexNode(remainingDims);\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      /* All dimensions were constant, access completely resolved */\n      return obj;\n    }\n    if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {\n      var key = index.dimensions[0].value;\n      if (key in obj.properties) {\n        return obj.properties[key];\n      }\n      return new ConstantNode(); // undefined\n    }\n    /* Don't know how to index this sort of obj, at least not with this index */\n    return new AccessorNode(_ensureNode(obj), index);\n  }\n\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n  function foldOp(fn, args, makeNode, options) {\n    var first = args.shift();\n\n    // In the following reduction, sofar always has one of the three following\n    // forms: [NODE], [CONSTANT], or [NODE, CONSTANT]\n    var reduction = args.reduce((sofar, next) => {\n      if (!isNode(next)) {\n        var last = sofar.pop();\n        if (isNode(last)) {\n          return [last, next];\n        }\n        // Two constants in a row, try to fold them into one\n        try {\n          sofar.push(_eval(fn, [last, next], options));\n          return sofar;\n        } catch (ignoreandcontinue) {\n          sofar.push(last);\n          // fall through to Node case\n        }\n      }\n\n      // Encountered a Node, or failed folding --\n      // collapse everything so far into a single tree:\n      sofar.push(_ensureNode(sofar.pop()));\n      var newtree = sofar.length === 1 ? sofar[0] : makeNode(sofar);\n      return [makeNode([newtree, _ensureNode(next)])];\n    }, [first]);\n    if (reduction.length === 1) {\n      return reduction[0];\n    }\n    // Might end up with a tree and a constant at the end:\n    return makeNode([reduction[0], _toNode(reduction[1])]);\n  }\n\n  // destroys the original node and returns a folded one\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n      case 'ConstantNode':\n        switch (typeof node.value) {\n          case 'number':\n            return _toNumber(node.value, options);\n          case 'string':\n            return node.value;\n          default:\n            if (!isNaN(node.value)) return _toNumber(node.value, options);\n        }\n        return node;\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options));\n\n            // If all args are numbers\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontinue) {}\n            }\n\n            // Size of a matrix does not depend on entries\n            if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {\n              var sz = [];\n              var section = args[0];\n              while (isArrayNode(section)) {\n                sz.push(section.items.length);\n                section = section.items[0];\n              }\n              return matrix(sz);\n            }\n\n            // Convert all args to nodes and construct a symbolic function call\n            return new FunctionNode(node.name, args.map(_ensureNode));\n          } else {\n            // treat as operator\n          }\n        }\n      /* falls through */\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n          var _args;\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node, options.context)) {\n            _args = allChildren(node, options.context);\n            _args = _args.map(arg => foldFraction(arg, options));\n            if (isCommutative(fn, options.context)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n          return res;\n        }\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n      case 'AccessorNode':\n        return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);\n      case 'ArrayNode':\n        {\n          var foldItems = node.items.map(item => foldFraction(item, options));\n          if (foldItems.some(isNode)) {\n            return new ArrayNode(foldItems.map(_ensureNode));\n          }\n          /* All literals -- return a Matrix so we can operate on it */\n          return matrix(foldItems);\n        }\n      case 'IndexNode':\n        {\n          return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));\n        }\n      case 'ObjectNode':\n        {\n          var foldProps = {};\n          for (var prop in node.properties) {\n            foldProps[prop] = simplifyConstant(node.properties[prop], options);\n          }\n          return new ObjectNode(foldProps);\n        }\n      case 'AssignmentNode':\n      /* falls through */\n      case 'BlockNode':\n      /* falls through */\n      case 'FunctionAssignmentNode':\n      /* falls through */\n      case 'RangeNode':\n      /* falls through */\n      case 'ConditionalNode':\n      /* falls through */\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n  return simplifyConstant;\n});","import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { getOperator } from '../../expression/operators.js';\nimport { createUtil } from './simplify/util.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'simplifyCore';\nvar dependencies = ['typed', 'parse', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplifyCore = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  var nodeT = new ConstantNode(true);\n  var nodeF = new ConstantNode(false);\n  // test if a node will always have a boolean value (true/false)\n  // not sure if this list is complete\n  function isAlwaysBoolean(node) {\n    return isOperatorNode(node) && ['and', 'not', 'or'].includes(node.op);\n  }\n  var {\n    hasProperty,\n    isCommutative\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. To roughly summarize,\n   * it handles cases along the lines of simplifyConstant() but where\n   * knowledge of a single argument is sufficient to determine the value.\n   * In contrast, simplify() extends simplifyCore() with additional passes\n   * to provide deeper simplification (such as gathering like terms).\n   *\n   * Specifically, simplifyCore:\n   *\n   * * Converts all function calls with operator equivalents to their\n   *   operator forms.\n   * * Removes operators or function calls that are guaranteed to have no\n   *   effect (such as unary '+').\n   * * Removes double unary '-', '~', and 'not'\n   * * Eliminates addition/subtraction of 0 and multiplication/division/powers\n   *   by 1 or 0.\n   * * Converts addition of a negation into subtraction.\n   * * Eliminates logical operations with constant true or false leading\n   *   arguments.\n   * * Puts constants on the left of a product, if multiplication is\n   *   considered commutative by the options (which is the default)\n   *\n   * Syntax:\n   *\n   *     simplifyCore(expr)\n   *     simplifyCore(expr, options)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (1 - 0)')\n   *     math.simplifyCore(f)                          // Node \"2 * x\"\n   *     math.simplify('2 * 1 * x ^ (1 - 0)', [math.simplifyCore]) // Node \"2 * x\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyConstant, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with basic simplifications applied\n   */\n  function _simplifyCore(nodeToSimplify) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var context = options ? options.context : undefined;\n    if (hasProperty(nodeToSimplify, 'trivial', context)) {\n      // This node does nothing if it has only one argument, so if so,\n      // return that argument simplified\n      if (isFunctionNode(nodeToSimplify) && nodeToSimplify.args.length === 1) {\n        return _simplifyCore(nodeToSimplify.args[0], options);\n      }\n      // For other node types, we try the generic methods\n      var simpChild = false;\n      var childCount = 0;\n      nodeToSimplify.forEach(c => {\n        ++childCount;\n        if (childCount === 1) {\n          simpChild = _simplifyCore(c, options);\n        }\n      });\n      if (childCount === 1) {\n        return simpChild;\n      }\n    }\n    var node = nodeToSimplify;\n    if (isFunctionNode(node)) {\n      var op = getOperator(node.name);\n      if (op) {\n        // Replace FunctionNode with a new OperatorNode\n        if (node.args.length > 2 && hasProperty(node, 'associative', context)) {\n          // unflatten into binary operations since that's what simplifyCore handles\n          while (node.args.length > 2) {\n            var last = node.args.pop();\n            var seclast = node.args.pop();\n            node.args.push(new OperatorNode(op, node.name, [last, seclast]));\n          }\n        }\n        node = new OperatorNode(op, node.name, node.args);\n      } else {\n        return new FunctionNode(_simplifyCore(node.fn), node.args.map(n => _simplifyCore(n, options)));\n      }\n    }\n    if (isOperatorNode(node) && node.isUnary()) {\n      var a0 = _simplifyCore(node.args[0], options);\n      if (node.op === '~') {\n        // bitwise not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === '~') {\n          return a0.args[0];\n        }\n      }\n      if (node.op === 'not') {\n        // logical not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === 'not') {\n          // Has the effect of turning the argument into a boolean\n          // So can only eliminate the double negation if\n          // the inside is already boolean\n          if (isAlwaysBoolean(a0.args[0])) {\n            return a0.args[0];\n          }\n        }\n      }\n      var finish = true;\n      if (node.op === '-') {\n        // unary minus\n        if (isOperatorNode(a0)) {\n          if (a0.isBinary() && a0.fn === 'subtract') {\n            node = new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n            finish = false; // continue to process the new binary node\n          }\n\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          }\n        }\n      }\n      if (finish) return new OperatorNode(node.op, node.fn, [a0]);\n    }\n    if (isOperatorNode(node) && node.isBinary()) {\n      var _a = _simplifyCore(node.args[0], options);\n      var a1 = _simplifyCore(node.args[1], options);\n      if (node.op === '+') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return a1;\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          a1 = a1.args[0];\n          node = new OperatorNode('-', 'subtract', [_a, a1]);\n        }\n      }\n      if (node.op === '-') {\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          return _simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);\n        }\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return _simplifyCore(new OperatorNode('-', 'unaryMinus', [a1]));\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '*') {\n        if (isConstantNode(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n          if (isCommutative(node, context)) {\n            return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      }\n      if (node.op === '/') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return node0;\n        }\n        if (isConstantNode(a1) && equal(a1.value, 1)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '^') {\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n        }\n      }\n      if (node.op === 'and') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            if (isAlwaysBoolean(a1)) return a1;\n          } else {\n            return nodeF;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            if (isAlwaysBoolean(_a)) return _a;\n          } else {\n            return nodeF;\n          }\n        }\n      }\n      if (node.op === 'or') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(a1)) return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(_a)) return _a;\n          }\n        }\n      }\n      return new OperatorNode(node.op, node.fn, [_a, a1]);\n    }\n    if (isOperatorNode(node)) {\n      return new OperatorNode(node.op, node.fn, node.args.map(a => _simplifyCore(a, options)));\n    }\n    if (isArrayNode(node)) {\n      return new ArrayNode(node.items.map(n => _simplifyCore(n, options)));\n    }\n    if (isAccessorNode(node)) {\n      return new AccessorNode(_simplifyCore(node.object, options), _simplifyCore(node.index, options));\n    }\n    if (isIndexNode(node)) {\n      return new IndexNode(node.dimensions.map(n => _simplifyCore(n, options)));\n    }\n    if (isObjectNode(node)) {\n      var newProps = {};\n      for (var prop in node.properties) {\n        newProps[prop] = _simplifyCore(node.properties[prop], options);\n      }\n      return new ObjectNode(newProps);\n    }\n    // cannot simplify\n    return node;\n  }\n  return typed(name, {\n    Node: _simplifyCore,\n    'Node,Object': _simplifyCore\n  });\n});","import { createMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['typed', 'parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node '1 + 2'\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node '1 + 2'\n   *     math.simplify('x+y', {x:2, y: math.parse('x+x')}).toString() // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n  function _resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n    if (!scope) {\n      return node;\n    }\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n      var value = scope.get(node.name);\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return _resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(_resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n\n    // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n    return node.map(child => _resolve(child, scope, within));\n  }\n  return typed('resolve', {\n    Node: _resolve,\n    'Node, Map | null | undefined': _resolve,\n    'Node, Object': (n, scope) => _resolve(n, createMap(scope)),\n    // For arrays and matrices, we map `self` rather than `_resolve`\n    // because resolve is fairly expensive anyway, and this way\n    // we get nice error messages if one entry in the array has wrong type.\n    'Array | Matrix': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array | Matrix, null | undefined': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array, Object': typed.referTo('Array,Map', selfAM => (A, scope) => selfAM(A, createMap(scope))),\n    'Matrix, Object': typed.referTo('Matrix,Map', selfMM => (A, scope) => selfMM(A, createMap(scope))),\n    'Array | Matrix, Map': typed.referToSelf(self => (A, scope) => A.map(n => self(n, scope)))\n  });\n});","import { isConstantNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'symbolicEqual';\nvar dependencies = ['parse', 'simplify', 'typed', 'OperatorNode'];\nexport var createSymbolicEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    simplify,\n    typed,\n    OperatorNode\n  } = _ref;\n  /**\n   * Attempts to determine if two expressions are symbolically equal, i.e.\n   * one is the result of valid algebraic manipulations on the other.\n   * Currently, this simply checks if the difference of the two expressions\n   * simplifies down to 0. So there are two important caveats:\n   * 1. whether two expressions are symbolically equal depends on the\n   *     manipulations allowed. Therefore, this function takes an optional\n   *     third argument, which are the options that control the behavior\n   *     as documented for the `simplify()` function.\n   * 2. it is in general intractable to find the minimal simplification of\n   *     an arbitrarily complicated expression. So while a `true` value\n   *     of `symbolicEqual` ensures that the two expressions can be manipulated\n   *     to match each other, a `false` value does not absolutely rule this out.\n   *\n   * Syntax:\n   *\n   *    symbolicEqual(expr1, expr2)\n   *    symbolicEqual(expr1, expr2, options)\n   *\n   * Examples:\n   *\n   *    symbolicEqual('x*y', 'y*x') // Returns true\n   *    symbolicEqual('x*y', 'y*x', {context: {multiply: {commutative: false}}}) // Returns false\n   *    symbolicEqual('x/y', '(y*x^(-1))^(-1)') // Returns true\n   *    symbolicEqual('abs(x)','x') // Returns false\n   *    symbolicEqual('abs(x)','x', simplify.positiveContext) // Returns true\n   *\n   * See also:\n   *\n   *    simplify, evaluate\n   *\n   * @param {Node|string} expr1  The first expression to compare\n   * @param {Node|string} expr2  The second expression to compare\n   * @param {Object} [options] Optional option object, passed to simplify\n   * @returns {boolean}\n   *     Returns true if a valid manipulation making the expressions equal\n   *     is found.\n   */\n  function _symbolicEqual(e1, e2) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var diff = new OperatorNode('-', 'subtract', [e1, e2]);\n    var simplified = simplify(diff, {}, options);\n    return isConstantNode(simplified) && !simplified.value;\n  }\n  return typed(name, {\n    'Node, Node': _symbolicEqual,\n    'Node, Node, Object': _symbolicEqual\n  });\n});","import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node '2 * x'\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node '2 * 1 * x ^ (2 - 1)'\n   *     math.derivative('sin(2x)', 'x'))                // Node '2 * cos(2 * x)'\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  function plainDerivative(expr, variable) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      simplify: true\n    };\n    var constNodes = {};\n    constTag(constNodes, expr, variable.name);\n    var res = _derivative(expr, constNodes);\n    return options.simplify ? simplify(res) : res;\n  }\n  typed.addConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  var derivative = typed(name, {\n    'Node, SymbolNode': plainDerivative,\n    'Node, SymbolNode, Object': plainDerivative\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n  });\n\n  typed.removeConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  derivative._simplify = true;\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  };\n\n  // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toTex(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]);\n\n            // Is a variable?\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n          break;\n        case 'log10':\n          arg1 = createConstantNode(10);\n        /* fall through! */\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n          break;\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]];\n          // Pass to pow operator node parser\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg0, constNodes);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        }\n\n        // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        }\n\n        // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1];\n\n        // d/dx(f(x) / c) = f'(x) / c\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        }\n\n        // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        }\n\n        // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          }\n\n          // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n        if (constNodes[_arg2] !== undefined) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            }\n            // Ignore exponent; f(x)^1 = f(x)\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          }\n\n          // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        }\n\n        // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    }\n\n    // There should be an incorrect number of arguments if we reach here\n\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n  return derivative;\n});","import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplifyConstant', 'simplifyCore', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    parse,\n    simplifyConstant,\n    simplifyCore,\n    simplify,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or an object\n   *            `{expression, numerator, denominator, variables, coefficients}`, where\n   *              `expression` is a `Node` with the node simplified expression,\n   *              `numerator` is a `Node` with the simplified numerator of expression,\n   *              `denominator` is a `Node` or `boolean` with the simplified denominator or `false` (if there is no denominator),\n   *              `variables` is an array with variable names,\n   *              and `coefficients` is an array with coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n  function _rationalize(expr) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var detailed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n    var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n    var nVars = polyRet.variables.length;\n    var noExactFractions = {\n      exactFractions: false\n    };\n    var withExactFractions = {\n      exactFractions: true\n    };\n    expr = polyRet.expression;\n    if (nVars >= 1) {\n      // If expression in not a constant\n      expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n      var sBefore; // Previous expression\n      var rules;\n      var eDistrDiv = true;\n      var redoInic = false;\n      // Apply the initial rules, including succ div rules:\n      expr = simplify(expr, setRules.firstRules, {}, noExactFractions);\n      var s;\n      while (true) {\n        // Alternate applying successive division rules and distr.div.rules\n        // until there are no more changes:\n        rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n        expr = simplify(expr, rules, {}, withExactFractions);\n        eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n        s = expr.toString();\n        if (s === sBefore) {\n          break; // No changes : end of the loop\n        }\n\n        redoInic = true;\n        sBefore = s;\n      }\n      if (redoInic) {\n        // Apply first rules again without succ div rules (if there are changes)\n        expr = simplify(expr, setRules.firstRulesAgain, {}, noExactFractions);\n      }\n      // Apply final rules:\n      expr = simplify(expr, setRules.finalRules, {}, noExactFractions);\n    } // NVars >= 1\n\n    var coefficients = [];\n    var retRationalize = {};\n    if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n      // Separate numerator from denominator\n      if (nVars === 1) {\n        expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n        expr.args[1] = polyToCanonical(expr.args[1]);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr.args[0];\n        retRationalize.denominator = expr.args[1];\n      }\n    } else {\n      if (nVars === 1) {\n        expr = polyToCanonical(expr, coefficients);\n      }\n      if (detailed) {\n        retRationalize.numerator = expr;\n        retRationalize.denominator = null;\n      }\n    }\n    // nVars\n\n    if (!detailed) return expr;\n    retRationalize.coefficients = coefficients;\n    retRationalize.variables = polyRet.variables;\n    retRationalize.expression = expr;\n    return retRationalize;\n  }\n  return typed(name, {\n    Node: _rationalize,\n    'Node, boolean': (expr, detailed) => _rationalize(expr, {}, detailed),\n    'Node, Object': _rationalize,\n    'Node, Object, boolean': _rationalize\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc;\n\n    // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n    function recPoly(node) {\n      var tp = node.type; // node type\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n        var pos = variables.indexOf(_name);\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n  } // end of polynomial\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n  function rulesRationalize() {\n    var oldRules = [simplifyCore,\n    // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant,\n    // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    },\n    // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    },\n    // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    },\n    // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    },\n    // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    },\n    // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    },\n    // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    },\n    // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    },\n    // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    },\n    // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    },\n    // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    },\n    // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    },\n    // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    },\n    // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    },\n    // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    },\n    // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    },\n    // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n\n    // Division simplification\n\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n    setRules.finalRules = [simplifyCore,\n    // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    },\n    // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    },\n    // Joining multiply with power 2\n    simplifyConstant,\n    // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    },\n    // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    },\n    // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    },\n    // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    },\n    // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    },\n    // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    },\n    // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    },\n    // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    },\n    // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    },\n    // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    },\n    // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    },\n    // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    },\n    // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n\n    return setRules;\n  } // End rulesRationalize\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n    } // binary OperatorNode\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n\n  // ---------------------------------------------------------------------------------------\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n    coefficients[0] = 0; // index is the exponent\n    var o = {};\n    o.cte = 1;\n    o.oper = '+';\n\n    // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n      first = false;\n    } // for\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+,* : children of +,-\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n\n          // -,+ : first child\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n          o.noFil = _i; // number of son\n          recurPol(node.args[_i], node, o);\n        } // for in children\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n        varname = node.name;\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        }\n\n        // ^: Symbol is First child\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        }\n\n        // *: Symbol is Second child\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        }\n\n        // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n        o.cte = valor;\n\n        // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n  } // End of polyToCanonical\n});","import { factory } from '../utils/factory.js';\nvar name = 'reviver';\nvar dependencies = ['classes'];\nexport var createReviver = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    classes\n  } = _ref;\n  /**\n   * Instantiate mathjs data types from their JSON representation\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the revived object\n   */\n  return function reviver(key, value) {\n    var constructor = classes[value && value.mathjs];\n    if (constructor && typeof constructor.fromJSON === 'function') {\n      return constructor.fromJSON(value);\n    }\n    return value;\n  };\n});","import { factory } from '../utils/factory.js';\nvar name = 'replacer';\nvar dependencies = [];\nexport var createReplacer = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n    return value;\n  };\n});","import { factory } from './utils/factory.js';\nimport { version } from './version.js';\nimport { createBigNumberE, createBigNumberPhi, createBigNumberPi, createBigNumberTau } from './utils/bignumber/constants.js';\nimport { pi, tau, e, phi } from './plain/number/index.js';\nexport var createTrue = /* #__PURE__ */factory('true', [], () => true);\nexport var createFalse = /* #__PURE__ */factory('false', [], () => false);\nexport var createNull = /* #__PURE__ */factory('null', [], () => null);\nexport var createInfinity = /* #__PURE__ */recreateFactory('Infinity', ['config', '?BigNumber'], _ref => {\n  var {\n    config,\n    BigNumber\n  } = _ref;\n  return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;\n});\nexport var createNaN = /* #__PURE__ */recreateFactory('NaN', ['config', '?BigNumber'], _ref2 => {\n  var {\n    config,\n    BigNumber\n  } = _ref2;\n  return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;\n});\nexport var createPi = /* #__PURE__ */recreateFactory('pi', ['config', '?BigNumber'], _ref3 => {\n  var {\n    config,\n    BigNumber\n  } = _ref3;\n  return config.number === 'BigNumber' ? createBigNumberPi(BigNumber) : pi;\n});\nexport var createTau = /* #__PURE__ */recreateFactory('tau', ['config', '?BigNumber'], _ref4 => {\n  var {\n    config,\n    BigNumber\n  } = _ref4;\n  return config.number === 'BigNumber' ? createBigNumberTau(BigNumber) : tau;\n});\nexport var createE = /* #__PURE__ */recreateFactory('e', ['config', '?BigNumber'], _ref5 => {\n  var {\n    config,\n    BigNumber\n  } = _ref5;\n  return config.number === 'BigNumber' ? createBigNumberE(BigNumber) : e;\n});\n\n// golden ratio, (1+sqrt(5))/2\nexport var createPhi = /* #__PURE__ */recreateFactory('phi', ['config', '?BigNumber'], _ref6 => {\n  var {\n    config,\n    BigNumber\n  } = _ref6;\n  return config.number === 'BigNumber' ? createBigNumberPhi(BigNumber) : phi;\n});\nexport var createLN2 = /* #__PURE__ */recreateFactory('LN2', ['config', '?BigNumber'], _ref7 => {\n  var {\n    config,\n    BigNumber\n  } = _ref7;\n  return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;\n});\nexport var createLN10 = /* #__PURE__ */recreateFactory('LN10', ['config', '?BigNumber'], _ref8 => {\n  var {\n    config,\n    BigNumber\n  } = _ref8;\n  return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;\n});\nexport var createLOG2E = /* #__PURE__ */recreateFactory('LOG2E', ['config', '?BigNumber'], _ref9 => {\n  var {\n    config,\n    BigNumber\n  } = _ref9;\n  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;\n});\nexport var createLOG10E = /* #__PURE__ */recreateFactory('LOG10E', ['config', '?BigNumber'], _ref10 => {\n  var {\n    config,\n    BigNumber\n  } = _ref10;\n  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;\n});\nexport var createSQRT1_2 = /* #__PURE__ */recreateFactory(\n// eslint-disable-line camelcase\n'SQRT1_2', ['config', '?BigNumber'], _ref11 => {\n  var {\n    config,\n    BigNumber\n  } = _ref11;\n  return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;\n});\nexport var createSQRT2 = /* #__PURE__ */recreateFactory('SQRT2', ['config', '?BigNumber'], _ref12 => {\n  var {\n    config,\n    BigNumber\n  } = _ref12;\n  return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;\n});\nexport var createI = /* #__PURE__ */recreateFactory('i', ['Complex'], _ref13 => {\n  var {\n    Complex\n  } = _ref13;\n  return Complex.I;\n});\n\n// for backward compatibility with v5\nexport var createUppercasePi = /* #__PURE__ */factory('PI', ['pi'], _ref14 => {\n  var {\n    pi\n  } = _ref14;\n  return pi;\n});\nexport var createUppercaseE = /* #__PURE__ */factory('E', ['e'], _ref15 => {\n  var {\n    e\n  } = _ref15;\n  return e;\n});\nexport var createVersion = /* #__PURE__ */factory('version', [], () => version);\n\n// helper function to create a factory with a flag recreateOnConfigChange\n// idea: allow passing optional properties to be attached to the factory function as 4th argument?\nfunction recreateFactory(name, dependencies, create) {\n  return factory(name, dependencies, create, {\n    recreateOnConfigChange: true\n  });\n}","export var version = '11.5.1';\n// Note: This file is automatically generated when building math.js.\n// Changes made in this file will be overwritten.","import { factory } from '../../utils/factory.js';\n\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createApply } from '../../function/matrix/apply.js';\nimport { isBigNumber, isNumber } from '../../utils/is.js';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  var apply = createApply({\n    typed,\n    isInteger\n  });\n\n  // @see: comment of concat itself\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createColumn } from '../../function/matrix/column.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var column = createColumn({\n    typed,\n    Index,\n    matrix,\n    range\n  });\n\n  // @see: comment of column itself\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { filter, filterRegExp } from '../../utils/array.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.filter\n   * Adds a property transform containing the transform function.\n   *\n   * This transform adds support for equations as test function for math.filter,\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\n   */\n  function filterTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return filter(x, callback);\n  }\n  filterTransform.rawArgs = true;\n\n  // one based version of function filter\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filter(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n\n/**\n * Filter values in a callback given a callback function\n *\n * !!! Passes a one-based index !!!\n *\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filter(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index + 1]);\n    } else {\n      // 3 or -1\n      return callback(value, [index + 1], array);\n    }\n  });\n}","import { isSymbolNode } from '../../../utils/is.js';\nimport { createSubScope } from '../../../utils/scope.js';\n\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);\n  })[0];\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  }\n\n  // create a test function for this equation\n  var name = symbol.name; // variable name\n  var subScope = createSubScope(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope.set(name, x);\n    return eq.evaluate(subScope);\n  };\n}","import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { forEach } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return _forEach(x, callback);\n  }\n  forEachTransform.rawArgs = true;\n\n  // one-based version of forEach\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});","import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Index\n  } = _ref;\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {\n        // leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});","import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMapTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return map(x, callback);\n  }\n  mapTransform.rawArgs = true;\n\n  // one-based version of map function\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = maxArgumentCount(callback);\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return map(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n  return recurse(array, []);\n}","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createMax } from '../../function/statistics/max.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMaxTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  var max = createMax({\n    typed,\n    config,\n    numeric,\n    larger\n  });\n\n  /**\n   * Attach a transform function to math.max\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function max\n   * from one-based to zero based\n   */\n  return typed('max', {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return max.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { isBigNumber, isCollection, isNumber } from '../../../utils/is.js';\n\n/**\n * Change last argument dim from one-based to zero-based.\n */\nexport function lastDimToZeroBase(args) {\n  if (args.length === 2 && isCollection(args[0])) {\n    args = args.slice();\n    var dim = args[1];\n    if (isNumber(dim)) {\n      args[1] = dim - 1;\n    } else if (isBigNumber(dim)) {\n      args[1] = dim.minus(1);\n    }\n  }\n  return args;\n}","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createMean } from '../../function/statistics/mean.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMeanTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide\n  } = _ref;\n  var mean = createMean({\n    typed,\n    add,\n    divide\n  });\n\n  /**\n   * Attach a transform function to math.mean\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function mean\n   * from one-based to zero based\n   */\n  return typed('mean', {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return mean.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createMin } from '../../function/statistics/min.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMinTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    smaller\n  } = _ref;\n  var min = createMin({\n    typed,\n    config,\n    numeric,\n    smaller\n  });\n\n  /**\n   * Attach a transform function to math.min\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function min\n   * from one-based to zero based\n   */\n  return typed('min', {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return min.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { createRange } from '../../function/matrix/range.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRangeTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n  var range = createRange({\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  });\n\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { createRow } from '../../function/matrix/row.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\nexport var createRowTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var row = createRow({\n    typed,\n    Index,\n    matrix,\n    range\n  });\n\n  // @see: comment of row itself\n  return typed('row', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n      try {\n        return row.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createSubset } from '../../function/matrix/subset.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubsetTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var subset = createSubset({\n    typed,\n    matrix\n  });\n\n  /**\n   * Attach a transform function to math.subset\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n  return typed('subset', {\n    '...any': function any(args) {\n      try {\n        return subset.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { isBigNumber, isNumber } from '../../utils/is.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createConcat } from '../../function/matrix/concat.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  var concat = createConcat({\n    typed,\n    matrix,\n    isInteger\n  });\n\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function concat\n   * from one-based to zero based\n   */\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createDiff } from '../../function/matrix/diff.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];\nexport var createDiffTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  } = _ref;\n  var diff = createDiff({\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  });\n\n  /**\n   * Attach a transform function to math.diff\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return diff.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { createStd } from '../../function/statistics/std.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'std';\nvar dependencies = ['typed', 'map', 'sqrt', 'variance'];\n\n/**\n * Attach a transform function to math.std\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createStdTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    map,\n    sqrt,\n    variance\n  } = _ref;\n  var std = createStd({\n    typed,\n    map,\n    sqrt,\n    variance\n  });\n  return typed('std', {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return std.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createSum } from '../../function/statistics/sum.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\n\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function sum\n * from one-based to zero based\n */\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSumTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  var sum = createSum({\n    typed,\n    config,\n    add,\n    numeric\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return sum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createCumSum } from '../../function/statistics/cumsum.js';\n\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function sum\n * from one-based to zero based\n */\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nexport var createCumSumTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    unaryPlus\n  } = _ref;\n  var cumsum = createCumSum({\n    typed,\n    add,\n    unaryPlus\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n      try {\n        return cumsum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createVariance } from '../../function/statistics/variance.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\n\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\nexport var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  var variance = createVariance({\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createNode, createObjectNode, createOperatorNode, createParenthesisNode, createRelationalNode, createArrayNode, createBlockNode, createConditionalNode, createConstantNode, createRangeNode, createReviver, createChainClass, createFunctionAssignmentNode, createChain, createAccessorNode, createAssignmentNode, createIndexNode, createSymbolNode, createFunctionNode, createParse, createResolve, createSimplifyConstant, createCompile, createHelpClass, createLeafCount, createSimplifyCore, createEvaluate, createHelp, createParserClass, createSimplify, createSymbolicEqual, createDerivative, createParser, createRationalize, createFilterTransform, createForEachTransform, createMapTransform, createApplyTransform, createDiffTransform, createSubsetTransform, createConcatTransform, createMaxTransform, createMinTransform, createRangeTransform, createSumTransform, createCumSumTransform, createRowTransform, createColumnTransform, createIndexTransform, createMeanTransform, createVarianceTransform, createStdTransform } from '../factoriesAny.js';\nimport { BigNumber, Complex, e, _false, fineStructure, Fraction, i, _Infinity, LN10, LOG10E, Matrix, _NaN, _null, phi, Range, ResultSet, SQRT1_2,\n// eslint-disable-line camelcase\nsackurTetrode, tau, _true, version, DenseMatrix, efimovFactor, LN2, pi, replacer, SQRT2, typed, unaryPlus, weakMixingAngle, abs, acos, acot, acsc, addScalar, arg, asech, asinh, atan, atanh, bignumber, bitNot, boolean, clone, combinations, complex, conj, cosh, coth, csc, cube, equalScalar, erf, exp, expm1, filter, forEach, format, getMatrixDataType, hex, im, isInteger, isNegative, isPositive, isZero, LOG2E, lgamma, log10, log2, map, multiplyScalar, not, number, oct, pickRandom, print, random, re, sec, sign, sin, SparseMatrix, splitUnit, square, string, tan, typeOf, acosh, acsch, apply, asec, bin, combinationsWithRep, cos, csch, isNaN, isPrime, randomInt, sech, sinh, sparse, sqrt, tanh, unaryMinus, acoth, cot, fraction, isNumeric, matrix, matrixFromFunction, mod, nthRoot, numeric, or, prod, reshape, size, smaller, squeeze, subset, subtract, to, transpose, xgcd, zeros, and, bitAnd, bitXor, cbrt, compare, compareText, concat, count, ctranspose, diag, divideScalar, dotDivide, equal, fft, flatten, gcd, hasNumericValue, hypot, ifft, kron, largerEq, leftShift, lsolve, matrixFromColumns, min, mode, nthRoots, ones, partitionSelect, resize, rightArithShift, round, smallerEq, unequal, usolve, xor, add, atan2, bitOr, catalan, compareNatural, cumsum, deepEqual, diff, dot, equalText, floor, identity, invmod, larger, log, lsolveAll, matrixFromRows, multiply, qr, range, rightLogShift, setSize, slu, sum, trace, usolveAll, asin, ceil, composition, cross, det, distance, dotMultiply, FibonacciHeap, fix, ImmutableDenseMatrix, Index, intersect, lcm, log1p, max, quantileSeq, row, setCartesian, setDistinct, setIsSubset, setPowerset, sort, column, index, inv, pinv, pow, setDifference, setMultiplicity, Spa, sqrtm, Unit, vacuumImpedance, wienDisplacement, atomicMass, bohrMagneton, boltzmann, conductanceQuantum, createUnit, deuteronMass, dotPow, electricConstant, elementaryCharge, expm, faraday, firstRadiation, gamma, gravitationConstant, hartreeEnergy, klitzing, loschmidt, magneticConstant, molarMass, molarPlanckConstant, neutronMass, nuclearMagneton, planckCharge, planckLength, planckTemperature, protonMass, reducedPlanckConstant, rydberg, secondRadiation, setSymDifference, speedOfLight, stefanBoltzmann, thomsonCrossSection, avogadro, bohrRadius, coulomb, divide, electronMass, factorial, gravity, inverseConductanceQuantum, lup, magneticFluxQuantum, molarMassC12, multinomial, permutations, planckMass, polynomialRoot, setIntersect, stirlingS2, unit, bellNumbers, eigs, fermiCoupling, mean, molarVolume, planckConstant, quantumOfCirculation, setUnion, variance, classicalElectronRadius, lusolve, median, kldivergence, mad, std, gasConstant, norm, rotationMatrix, planckTime, schur, rotate, sylvester, lyap } from './pureFunctionsAny.generated.js';\nvar math = {}; // NOT pure!\nvar mathWithTransform = {}; // NOT pure!\nvar classes = {}; // NOT pure!\n\nexport var Node = createNode({\n  mathWithTransform\n});\nexport var ObjectNode = createObjectNode({\n  Node\n});\nexport var OperatorNode = createOperatorNode({\n  Node\n});\nexport var ParenthesisNode = createParenthesisNode({\n  Node\n});\nexport var RelationalNode = createRelationalNode({\n  Node\n});\nexport var ArrayNode = createArrayNode({\n  Node\n});\nexport var BlockNode = createBlockNode({\n  Node,\n  ResultSet\n});\nexport var ConditionalNode = createConditionalNode({\n  Node\n});\nexport var ConstantNode = createConstantNode({\n  Node\n});\nexport var RangeNode = createRangeNode({\n  Node\n});\nexport var reviver = createReviver({\n  classes\n});\nexport var Chain = createChainClass({\n  math,\n  typed\n});\nexport var FunctionAssignmentNode = createFunctionAssignmentNode({\n  Node,\n  typed\n});\nexport var chain = createChain({\n  Chain,\n  typed\n});\nexport var AccessorNode = createAccessorNode({\n  Node,\n  subset\n});\nexport var AssignmentNode = createAssignmentNode({\n  matrix,\n  Node,\n  subset\n});\nexport var IndexNode = createIndexNode({\n  Node,\n  size\n});\nexport var SymbolNode = createSymbolNode({\n  Unit,\n  Node,\n  math\n});\nexport var FunctionNode = createFunctionNode({\n  Node,\n  SymbolNode,\n  math\n});\nexport var parse = createParse({\n  AccessorNode,\n  ArrayNode,\n  AssignmentNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  FunctionAssignmentNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  RangeNode,\n  RelationalNode,\n  SymbolNode,\n  config,\n  numeric,\n  typed\n});\nexport var resolve = createResolve({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  parse,\n  typed\n});\nexport var simplifyConstant = createSimplifyConstant({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  SymbolNode,\n  config,\n  mathWithTransform,\n  matrix,\n  parse,\n  typed\n});\nexport var compile = createCompile({\n  parse,\n  typed\n});\nexport var Help = createHelpClass({\n  parse\n});\nexport var leafCount = createLeafCount({\n  parse,\n  typed\n});\nexport var simplifyCore = createSimplifyCore({\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  divide,\n  equal,\n  isZero,\n  multiply,\n  parse,\n  pow,\n  subtract,\n  typed\n});\nexport var evaluate = createEvaluate({\n  parse,\n  typed\n});\nexport var help = createHelp({\n  Help,\n  mathWithTransform,\n  typed\n});\nexport var Parser = createParserClass({\n  evaluate\n});\nexport var simplify = createSimplify({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  resolve,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\nexport var symbolicEqual = createSymbolicEqual({\n  OperatorNode,\n  parse,\n  simplify,\n  typed\n});\nexport var derivative = createDerivative({\n  ConstantNode,\n  FunctionNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  config,\n  equal,\n  isZero,\n  numeric,\n  parse,\n  simplify,\n  typed\n});\nexport var parser = createParser({\n  Parser,\n  typed\n});\nexport var rationalize = createRationalize({\n  bignumber,\n  fraction,\n  AccessorNode,\n  ArrayNode,\n  ConstantNode,\n  FunctionNode,\n  IndexNode,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  SymbolNode,\n  add,\n  config,\n  divide,\n  equal,\n  isZero,\n  mathWithTransform,\n  matrix,\n  multiply,\n  parse,\n  pow,\n  simplify,\n  simplifyConstant,\n  simplifyCore,\n  subtract,\n  typed\n});\n_extends(math, {\n  e,\n  false: _false,\n  fineStructure,\n  i,\n  Infinity: _Infinity,\n  LN10,\n  LOG10E,\n  NaN: _NaN,\n  null: _null,\n  phi,\n  SQRT1_2,\n  sackurTetrode,\n  tau,\n  true: _true,\n  'E': e,\n  version,\n  efimovFactor,\n  LN2,\n  pi,\n  replacer,\n  reviver,\n  SQRT2,\n  typed,\n  unaryPlus,\n  'PI': pi,\n  weakMixingAngle,\n  abs,\n  acos,\n  acot,\n  acsc,\n  addScalar,\n  arg,\n  asech,\n  asinh,\n  atan,\n  atanh,\n  bignumber,\n  bitNot,\n  boolean,\n  clone,\n  combinations,\n  complex,\n  conj,\n  cosh,\n  coth,\n  csc,\n  cube,\n  equalScalar,\n  erf,\n  exp,\n  expm1,\n  filter,\n  forEach,\n  format,\n  getMatrixDataType,\n  hex,\n  im,\n  isInteger,\n  isNegative,\n  isPositive,\n  isZero,\n  LOG2E,\n  lgamma,\n  log10,\n  log2,\n  map,\n  multiplyScalar,\n  not,\n  number,\n  oct,\n  pickRandom,\n  print,\n  random,\n  re,\n  sec,\n  sign,\n  sin,\n  splitUnit,\n  square,\n  string,\n  tan,\n  typeOf,\n  acosh,\n  acsch,\n  apply,\n  asec,\n  bin,\n  chain,\n  combinationsWithRep,\n  cos,\n  csch,\n  isNaN,\n  isPrime,\n  randomInt,\n  sech,\n  sinh,\n  sparse,\n  sqrt,\n  tanh,\n  unaryMinus,\n  acoth,\n  cot,\n  fraction,\n  isNumeric,\n  matrix,\n  matrixFromFunction,\n  mod,\n  nthRoot,\n  numeric,\n  or,\n  prod,\n  reshape,\n  size,\n  smaller,\n  squeeze,\n  subset,\n  subtract,\n  to,\n  transpose,\n  xgcd,\n  zeros,\n  and,\n  bitAnd,\n  bitXor,\n  cbrt,\n  compare,\n  compareText,\n  concat,\n  count,\n  ctranspose,\n  diag,\n  divideScalar,\n  dotDivide,\n  equal,\n  fft,\n  flatten,\n  gcd,\n  hasNumericValue,\n  hypot,\n  ifft,\n  kron,\n  largerEq,\n  leftShift,\n  lsolve,\n  matrixFromColumns,\n  min,\n  mode,\n  nthRoots,\n  ones,\n  partitionSelect,\n  resize,\n  rightArithShift,\n  round,\n  smallerEq,\n  unequal,\n  usolve,\n  xor,\n  add,\n  atan2,\n  bitOr,\n  catalan,\n  compareNatural,\n  cumsum,\n  deepEqual,\n  diff,\n  dot,\n  equalText,\n  floor,\n  identity,\n  invmod,\n  larger,\n  log,\n  lsolveAll,\n  matrixFromRows,\n  multiply,\n  qr,\n  range,\n  rightLogShift,\n  setSize,\n  slu,\n  sum,\n  trace,\n  usolveAll,\n  asin,\n  ceil,\n  composition,\n  cross,\n  det,\n  distance,\n  dotMultiply,\n  fix,\n  intersect,\n  lcm,\n  log1p,\n  max,\n  quantileSeq,\n  row,\n  setCartesian,\n  setDistinct,\n  setIsSubset,\n  setPowerset,\n  sort,\n  column,\n  index,\n  inv,\n  pinv,\n  pow,\n  setDifference,\n  setMultiplicity,\n  sqrtm,\n  vacuumImpedance,\n  wienDisplacement,\n  atomicMass,\n  bohrMagneton,\n  boltzmann,\n  conductanceQuantum,\n  createUnit,\n  deuteronMass,\n  dotPow,\n  electricConstant,\n  elementaryCharge,\n  expm,\n  faraday,\n  firstRadiation,\n  gamma,\n  gravitationConstant,\n  hartreeEnergy,\n  klitzing,\n  loschmidt,\n  magneticConstant,\n  molarMass,\n  molarPlanckConstant,\n  neutronMass,\n  nuclearMagneton,\n  planckCharge,\n  planckLength,\n  planckTemperature,\n  protonMass,\n  reducedPlanckConstant,\n  rydberg,\n  secondRadiation,\n  setSymDifference,\n  speedOfLight,\n  stefanBoltzmann,\n  thomsonCrossSection,\n  avogadro,\n  bohrRadius,\n  coulomb,\n  divide,\n  electronMass,\n  factorial,\n  gravity,\n  inverseConductanceQuantum,\n  lup,\n  magneticFluxQuantum,\n  molarMassC12,\n  multinomial,\n  parse,\n  permutations,\n  planckMass,\n  polynomialRoot,\n  resolve,\n  setIntersect,\n  simplifyConstant,\n  stirlingS2,\n  unit,\n  bellNumbers,\n  compile,\n  eigs,\n  fermiCoupling,\n  leafCount,\n  mean,\n  molarVolume,\n  planckConstant,\n  quantumOfCirculation,\n  setUnion,\n  simplifyCore,\n  variance,\n  classicalElectronRadius,\n  evaluate,\n  help,\n  lusolve,\n  median,\n  simplify,\n  symbolicEqual,\n  derivative,\n  kldivergence,\n  mad,\n  parser,\n  rationalize,\n  std,\n  gasConstant,\n  norm,\n  rotationMatrix,\n  planckTime,\n  schur,\n  rotate,\n  sylvester,\n  lyap,\n  config\n});\n_extends(mathWithTransform, math, {\n  filter: createFilterTransform({\n    typed\n  }),\n  forEach: createForEachTransform({\n    typed\n  }),\n  map: createMapTransform({\n    typed\n  }),\n  apply: createApplyTransform({\n    isInteger,\n    typed\n  }),\n  diff: createDiffTransform({\n    bignumber,\n    matrix,\n    number,\n    subtract,\n    typed\n  }),\n  subset: createSubsetTransform({\n    matrix,\n    typed\n  }),\n  concat: createConcatTransform({\n    isInteger,\n    matrix,\n    typed\n  }),\n  max: createMaxTransform({\n    config,\n    larger,\n    numeric,\n    typed\n  }),\n  min: createMinTransform({\n    config,\n    numeric,\n    smaller,\n    typed\n  }),\n  range: createRangeTransform({\n    bignumber,\n    matrix,\n    config,\n    larger,\n    largerEq,\n    smaller,\n    smallerEq,\n    typed\n  }),\n  sum: createSumTransform({\n    add,\n    config,\n    numeric,\n    typed\n  }),\n  cumsum: createCumSumTransform({\n    add,\n    typed,\n    unaryPlus\n  }),\n  row: createRowTransform({\n    Index,\n    matrix,\n    range,\n    typed\n  }),\n  column: createColumnTransform({\n    Index,\n    matrix,\n    range,\n    typed\n  }),\n  index: createIndexTransform({\n    Index\n  }),\n  mean: createMeanTransform({\n    add,\n    divide,\n    typed\n  }),\n  variance: createVarianceTransform({\n    add,\n    apply,\n    divide,\n    isNaN,\n    multiply,\n    subtract,\n    typed\n  }),\n  std: createStdTransform({\n    map,\n    sqrt,\n    typed,\n    variance\n  })\n});\n_extends(classes, {\n  BigNumber,\n  Complex,\n  Fraction,\n  Matrix,\n  Node,\n  ObjectNode,\n  OperatorNode,\n  ParenthesisNode,\n  Range,\n  RelationalNode,\n  ResultSet,\n  ArrayNode,\n  BlockNode,\n  ConditionalNode,\n  ConstantNode,\n  DenseMatrix,\n  RangeNode,\n  Chain,\n  FunctionAssignmentNode,\n  SparseMatrix,\n  AccessorNode,\n  AssignmentNode,\n  IndexNode,\n  FibonacciHeap,\n  ImmutableDenseMatrix,\n  Index,\n  Spa,\n  Unit,\n  SymbolNode,\n  FunctionNode,\n  Help,\n  Parser\n});\nChain.createProxy(math);\nexport { embeddedDocs as docs } from '../expression/embeddedDocs/embeddedDocs.js';","// util functions\nexport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isString, isUndefined, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRelationalNode, isRegExp, isResultSet, isSparseMatrix, isSymbolNode, isUnit } from '../utils/is.js';","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nexport { absDependencies } from './dependenciesAny/dependenciesAbs.generated.js';\nexport { AccessorNodeDependencies } from './dependenciesAny/dependenciesAccessorNode.generated.js';\nexport { acosDependencies } from './dependenciesAny/dependenciesAcos.generated.js';\nexport { acoshDependencies } from './dependenciesAny/dependenciesAcosh.generated.js';\nexport { acotDependencies } from './dependenciesAny/dependenciesAcot.generated.js';\nexport { acothDependencies } from './dependenciesAny/dependenciesAcoth.generated.js';\nexport { acscDependencies } from './dependenciesAny/dependenciesAcsc.generated.js';\nexport { acschDependencies } from './dependenciesAny/dependenciesAcsch.generated.js';\nexport { addDependencies } from './dependenciesAny/dependenciesAdd.generated.js';\nexport { addScalarDependencies } from './dependenciesAny/dependenciesAddScalar.generated.js';\nexport { andDependencies } from './dependenciesAny/dependenciesAnd.generated.js';\nexport { applyDependencies } from './dependenciesAny/dependenciesApply.generated.js';\nexport { applyTransformDependencies } from './dependenciesAny/dependenciesApplyTransform.generated.js';\nexport { argDependencies } from './dependenciesAny/dependenciesArg.generated.js';\nexport { ArrayNodeDependencies } from './dependenciesAny/dependenciesArrayNode.generated.js';\nexport { asecDependencies } from './dependenciesAny/dependenciesAsec.generated.js';\nexport { asechDependencies } from './dependenciesAny/dependenciesAsech.generated.js';\nexport { asinDependencies } from './dependenciesAny/dependenciesAsin.generated.js';\nexport { asinhDependencies } from './dependenciesAny/dependenciesAsinh.generated.js';\nexport { AssignmentNodeDependencies } from './dependenciesAny/dependenciesAssignmentNode.generated.js';\nexport { atanDependencies } from './dependenciesAny/dependenciesAtan.generated.js';\nexport { atan2Dependencies } from './dependenciesAny/dependenciesAtan2.generated.js';\nexport { atanhDependencies } from './dependenciesAny/dependenciesAtanh.generated.js';\nexport { atomicMassDependencies } from './dependenciesAny/dependenciesAtomicMass.generated.js';\nexport { avogadroDependencies } from './dependenciesAny/dependenciesAvogadro.generated.js';\nexport { bellNumbersDependencies } from './dependenciesAny/dependenciesBellNumbers.generated.js';\nexport { BigNumberDependencies } from './dependenciesAny/dependenciesBigNumberClass.generated.js';\nexport { bignumberDependencies } from './dependenciesAny/dependenciesBignumber.generated.js';\nexport { binDependencies } from './dependenciesAny/dependenciesBin.generated.js';\nexport { bitAndDependencies } from './dependenciesAny/dependenciesBitAnd.generated.js';\nexport { bitNotDependencies } from './dependenciesAny/dependenciesBitNot.generated.js';\nexport { bitOrDependencies } from './dependenciesAny/dependenciesBitOr.generated.js';\nexport { bitXorDependencies } from './dependenciesAny/dependenciesBitXor.generated.js';\nexport { BlockNodeDependencies } from './dependenciesAny/dependenciesBlockNode.generated.js';\nexport { bohrMagnetonDependencies } from './dependenciesAny/dependenciesBohrMagneton.generated.js';\nexport { bohrRadiusDependencies } from './dependenciesAny/dependenciesBohrRadius.generated.js';\nexport { boltzmannDependencies } from './dependenciesAny/dependenciesBoltzmann.generated.js';\nexport { booleanDependencies } from './dependenciesAny/dependenciesBoolean.generated.js';\nexport { catalanDependencies } from './dependenciesAny/dependenciesCatalan.generated.js';\nexport { cbrtDependencies } from './dependenciesAny/dependenciesCbrt.generated.js';\nexport { ceilDependencies } from './dependenciesAny/dependenciesCeil.generated.js';\nexport { chainDependencies } from './dependenciesAny/dependenciesChain.generated.js';\nexport { ChainDependencies } from './dependenciesAny/dependenciesChainClass.generated.js';\nexport { classicalElectronRadiusDependencies } from './dependenciesAny/dependenciesClassicalElectronRadius.generated.js';\nexport { cloneDependencies } from './dependenciesAny/dependenciesClone.generated.js';\nexport { columnDependencies } from './dependenciesAny/dependenciesColumn.generated.js';\nexport { columnTransformDependencies } from './dependenciesAny/dependenciesColumnTransform.generated.js';\nexport { combinationsDependencies } from './dependenciesAny/dependenciesCombinations.generated.js';\nexport { combinationsWithRepDependencies } from './dependenciesAny/dependenciesCombinationsWithRep.generated.js';\nexport { compareDependencies } from './dependenciesAny/dependenciesCompare.generated.js';\nexport { compareNaturalDependencies } from './dependenciesAny/dependenciesCompareNatural.generated.js';\nexport { compareTextDependencies } from './dependenciesAny/dependenciesCompareText.generated.js';\nexport { compileDependencies } from './dependenciesAny/dependenciesCompile.generated.js';\nexport { complexDependencies } from './dependenciesAny/dependenciesComplex.generated.js';\nexport { ComplexDependencies } from './dependenciesAny/dependenciesComplexClass.generated.js';\nexport { compositionDependencies } from './dependenciesAny/dependenciesComposition.generated.js';\nexport { concatDependencies } from './dependenciesAny/dependenciesConcat.generated.js';\nexport { concatTransformDependencies } from './dependenciesAny/dependenciesConcatTransform.generated.js';\nexport { ConditionalNodeDependencies } from './dependenciesAny/dependenciesConditionalNode.generated.js';\nexport { conductanceQuantumDependencies } from './dependenciesAny/dependenciesConductanceQuantum.generated.js';\nexport { conjDependencies } from './dependenciesAny/dependenciesConj.generated.js';\nexport { ConstantNodeDependencies } from './dependenciesAny/dependenciesConstantNode.generated.js';\nexport { cosDependencies } from './dependenciesAny/dependenciesCos.generated.js';\nexport { coshDependencies } from './dependenciesAny/dependenciesCosh.generated.js';\nexport { cotDependencies } from './dependenciesAny/dependenciesCot.generated.js';\nexport { cothDependencies } from './dependenciesAny/dependenciesCoth.generated.js';\nexport { coulombDependencies } from './dependenciesAny/dependenciesCoulomb.generated.js';\nexport { countDependencies } from './dependenciesAny/dependenciesCount.generated.js';\nexport { createUnitDependencies } from './dependenciesAny/dependenciesCreateUnit.generated.js';\nexport { crossDependencies } from './dependenciesAny/dependenciesCross.generated.js';\nexport { cscDependencies } from './dependenciesAny/dependenciesCsc.generated.js';\nexport { cschDependencies } from './dependenciesAny/dependenciesCsch.generated.js';\nexport { ctransposeDependencies } from './dependenciesAny/dependenciesCtranspose.generated.js';\nexport { cubeDependencies } from './dependenciesAny/dependenciesCube.generated.js';\nexport { cumsumDependencies } from './dependenciesAny/dependenciesCumSum.generated.js';\nexport { cumsumTransformDependencies } from './dependenciesAny/dependenciesCumSumTransform.generated.js';\nexport { deepEqualDependencies } from './dependenciesAny/dependenciesDeepEqual.generated.js';\nexport { DenseMatrixDependencies } from './dependenciesAny/dependenciesDenseMatrixClass.generated.js';\nexport { derivativeDependencies } from './dependenciesAny/dependenciesDerivative.generated.js';\nexport { detDependencies } from './dependenciesAny/dependenciesDet.generated.js';\nexport { deuteronMassDependencies } from './dependenciesAny/dependenciesDeuteronMass.generated.js';\nexport { diagDependencies } from './dependenciesAny/dependenciesDiag.generated.js';\nexport { diffDependencies } from './dependenciesAny/dependenciesDiff.generated.js';\nexport { diffTransformDependencies } from './dependenciesAny/dependenciesDiffTransform.generated.js';\nexport { distanceDependencies } from './dependenciesAny/dependenciesDistance.generated.js';\nexport { divideDependencies } from './dependenciesAny/dependenciesDivide.generated.js';\nexport { divideScalarDependencies } from './dependenciesAny/dependenciesDivideScalar.generated.js';\nexport { dotDependencies } from './dependenciesAny/dependenciesDot.generated.js';\nexport { dotDivideDependencies } from './dependenciesAny/dependenciesDotDivide.generated.js';\nexport { dotMultiplyDependencies } from './dependenciesAny/dependenciesDotMultiply.generated.js';\nexport { dotPowDependencies } from './dependenciesAny/dependenciesDotPow.generated.js';\nexport { eDependencies } from './dependenciesAny/dependenciesE.generated.js';\nexport { efimovFactorDependencies } from './dependenciesAny/dependenciesEfimovFactor.generated.js';\nexport { eigsDependencies } from './dependenciesAny/dependenciesEigs.generated.js';\nexport { electricConstantDependencies } from './dependenciesAny/dependenciesElectricConstant.generated.js';\nexport { electronMassDependencies } from './dependenciesAny/dependenciesElectronMass.generated.js';\nexport { elementaryChargeDependencies } from './dependenciesAny/dependenciesElementaryCharge.generated.js';\nexport { equalDependencies } from './dependenciesAny/dependenciesEqual.generated.js';\nexport { equalScalarDependencies } from './dependenciesAny/dependenciesEqualScalar.generated.js';\nexport { equalTextDependencies } from './dependenciesAny/dependenciesEqualText.generated.js';\nexport { erfDependencies } from './dependenciesAny/dependenciesErf.generated.js';\nexport { evaluateDependencies } from './dependenciesAny/dependenciesEvaluate.generated.js';\nexport { expDependencies } from './dependenciesAny/dependenciesExp.generated.js';\nexport { expmDependencies } from './dependenciesAny/dependenciesExpm.generated.js';\nexport { expm1Dependencies } from './dependenciesAny/dependenciesExpm1.generated.js';\nexport { factorialDependencies } from './dependenciesAny/dependenciesFactorial.generated.js';\nexport { falseDependencies } from './dependenciesAny/dependenciesFalse.generated.js';\nexport { faradayDependencies } from './dependenciesAny/dependenciesFaraday.generated.js';\nexport { fermiCouplingDependencies } from './dependenciesAny/dependenciesFermiCoupling.generated.js';\nexport { fftDependencies } from './dependenciesAny/dependenciesFft.generated.js';\nexport { FibonacciHeapDependencies } from './dependenciesAny/dependenciesFibonacciHeapClass.generated.js';\nexport { filterDependencies } from './dependenciesAny/dependenciesFilter.generated.js';\nexport { filterTransformDependencies } from './dependenciesAny/dependenciesFilterTransform.generated.js';\nexport { fineStructureDependencies } from './dependenciesAny/dependenciesFineStructure.generated.js';\nexport { firstRadiationDependencies } from './dependenciesAny/dependenciesFirstRadiation.generated.js';\nexport { fixDependencies } from './dependenciesAny/dependenciesFix.generated.js';\nexport { flattenDependencies } from './dependenciesAny/dependenciesFlatten.generated.js';\nexport { floorDependencies } from './dependenciesAny/dependenciesFloor.generated.js';\nexport { forEachDependencies } from './dependenciesAny/dependenciesForEach.generated.js';\nexport { forEachTransformDependencies } from './dependenciesAny/dependenciesForEachTransform.generated.js';\nexport { formatDependencies } from './dependenciesAny/dependenciesFormat.generated.js';\nexport { fractionDependencies } from './dependenciesAny/dependenciesFraction.generated.js';\nexport { FractionDependencies } from './dependenciesAny/dependenciesFractionClass.generated.js';\nexport { FunctionAssignmentNodeDependencies } from './dependenciesAny/dependenciesFunctionAssignmentNode.generated.js';\nexport { FunctionNodeDependencies } from './dependenciesAny/dependenciesFunctionNode.generated.js';\nexport { gammaDependencies } from './dependenciesAny/dependenciesGamma.generated.js';\nexport { gasConstantDependencies } from './dependenciesAny/dependenciesGasConstant.generated.js';\nexport { gcdDependencies } from './dependenciesAny/dependenciesGcd.generated.js';\nexport { getMatrixDataTypeDependencies } from './dependenciesAny/dependenciesGetMatrixDataType.generated.js';\nexport { gravitationConstantDependencies } from './dependenciesAny/dependenciesGravitationConstant.generated.js';\nexport { gravityDependencies } from './dependenciesAny/dependenciesGravity.generated.js';\nexport { hartreeEnergyDependencies } from './dependenciesAny/dependenciesHartreeEnergy.generated.js';\nexport { hasNumericValueDependencies } from './dependenciesAny/dependenciesHasNumericValue.generated.js';\nexport { helpDependencies } from './dependenciesAny/dependenciesHelp.generated.js';\nexport { HelpDependencies } from './dependenciesAny/dependenciesHelpClass.generated.js';\nexport { hexDependencies } from './dependenciesAny/dependenciesHex.generated.js';\nexport { hypotDependencies } from './dependenciesAny/dependenciesHypot.generated.js';\nexport { iDependencies } from './dependenciesAny/dependenciesI.generated.js';\nexport { identityDependencies } from './dependenciesAny/dependenciesIdentity.generated.js';\nexport { ifftDependencies } from './dependenciesAny/dependenciesIfft.generated.js';\nexport { imDependencies } from './dependenciesAny/dependenciesIm.generated.js';\nexport { ImmutableDenseMatrixDependencies } from './dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js';\nexport { indexDependencies } from './dependenciesAny/dependenciesIndex.generated.js';\nexport { IndexDependencies } from './dependenciesAny/dependenciesIndexClass.generated.js';\nexport { IndexNodeDependencies } from './dependenciesAny/dependenciesIndexNode.generated.js';\nexport { indexTransformDependencies } from './dependenciesAny/dependenciesIndexTransform.generated.js';\nexport { InfinityDependencies } from './dependenciesAny/dependenciesInfinity.generated.js';\nexport { intersectDependencies } from './dependenciesAny/dependenciesIntersect.generated.js';\nexport { invDependencies } from './dependenciesAny/dependenciesInv.generated.js';\nexport { inverseConductanceQuantumDependencies } from './dependenciesAny/dependenciesInverseConductanceQuantum.generated.js';\nexport { invmodDependencies } from './dependenciesAny/dependenciesInvmod.generated.js';\nexport { isIntegerDependencies } from './dependenciesAny/dependenciesIsInteger.generated.js';\nexport { isNaNDependencies } from './dependenciesAny/dependenciesIsNaN.generated.js';\nexport { isNegativeDependencies } from './dependenciesAny/dependenciesIsNegative.generated.js';\nexport { isNumericDependencies } from './dependenciesAny/dependenciesIsNumeric.generated.js';\nexport { isPositiveDependencies } from './dependenciesAny/dependenciesIsPositive.generated.js';\nexport { isPrimeDependencies } from './dependenciesAny/dependenciesIsPrime.generated.js';\nexport { isZeroDependencies } from './dependenciesAny/dependenciesIsZero.generated.js';\nexport { kldivergenceDependencies } from './dependenciesAny/dependenciesKldivergence.generated.js';\nexport { klitzingDependencies } from './dependenciesAny/dependenciesKlitzing.generated.js';\nexport { kronDependencies } from './dependenciesAny/dependenciesKron.generated.js';\nexport { LN10Dependencies } from './dependenciesAny/dependenciesLN10.generated.js';\nexport { LN2Dependencies } from './dependenciesAny/dependenciesLN2.generated.js';\nexport { LOG10EDependencies } from './dependenciesAny/dependenciesLOG10E.generated.js';\nexport { LOG2EDependencies } from './dependenciesAny/dependenciesLOG2E.generated.js';\nexport { largerDependencies } from './dependenciesAny/dependenciesLarger.generated.js';\nexport { largerEqDependencies } from './dependenciesAny/dependenciesLargerEq.generated.js';\nexport { lcmDependencies } from './dependenciesAny/dependenciesLcm.generated.js';\nexport { leafCountDependencies } from './dependenciesAny/dependenciesLeafCount.generated.js';\nexport { leftShiftDependencies } from './dependenciesAny/dependenciesLeftShift.generated.js';\nexport { lgammaDependencies } from './dependenciesAny/dependenciesLgamma.generated.js';\nexport { logDependencies } from './dependenciesAny/dependenciesLog.generated.js';\nexport { log10Dependencies } from './dependenciesAny/dependenciesLog10.generated.js';\nexport { log1pDependencies } from './dependenciesAny/dependenciesLog1p.generated.js';\nexport { log2Dependencies } from './dependenciesAny/dependenciesLog2.generated.js';\nexport { loschmidtDependencies } from './dependenciesAny/dependenciesLoschmidt.generated.js';\nexport { lsolveDependencies } from './dependenciesAny/dependenciesLsolve.generated.js';\nexport { lsolveAllDependencies } from './dependenciesAny/dependenciesLsolveAll.generated.js';\nexport { lupDependencies } from './dependenciesAny/dependenciesLup.generated.js';\nexport { lusolveDependencies } from './dependenciesAny/dependenciesLusolve.generated.js';\nexport { lyapDependencies } from './dependenciesAny/dependenciesLyap.generated.js';\nexport { madDependencies } from './dependenciesAny/dependenciesMad.generated.js';\nexport { magneticConstantDependencies } from './dependenciesAny/dependenciesMagneticConstant.generated.js';\nexport { magneticFluxQuantumDependencies } from './dependenciesAny/dependenciesMagneticFluxQuantum.generated.js';\nexport { mapDependencies } from './dependenciesAny/dependenciesMap.generated.js';\nexport { mapTransformDependencies } from './dependenciesAny/dependenciesMapTransform.generated.js';\nexport { matrixDependencies } from './dependenciesAny/dependenciesMatrix.generated.js';\nexport { MatrixDependencies } from './dependenciesAny/dependenciesMatrixClass.generated.js';\nexport { matrixFromColumnsDependencies } from './dependenciesAny/dependenciesMatrixFromColumns.generated.js';\nexport { matrixFromFunctionDependencies } from './dependenciesAny/dependenciesMatrixFromFunction.generated.js';\nexport { matrixFromRowsDependencies } from './dependenciesAny/dependenciesMatrixFromRows.generated.js';\nexport { maxDependencies } from './dependenciesAny/dependenciesMax.generated.js';\nexport { maxTransformDependencies } from './dependenciesAny/dependenciesMaxTransform.generated.js';\nexport { meanDependencies } from './dependenciesAny/dependenciesMean.generated.js';\nexport { meanTransformDependencies } from './dependenciesAny/dependenciesMeanTransform.generated.js';\nexport { medianDependencies } from './dependenciesAny/dependenciesMedian.generated.js';\nexport { minDependencies } from './dependenciesAny/dependenciesMin.generated.js';\nexport { minTransformDependencies } from './dependenciesAny/dependenciesMinTransform.generated.js';\nexport { modDependencies } from './dependenciesAny/dependenciesMod.generated.js';\nexport { modeDependencies } from './dependenciesAny/dependenciesMode.generated.js';\nexport { molarMassDependencies } from './dependenciesAny/dependenciesMolarMass.generated.js';\nexport { molarMassC12Dependencies } from './dependenciesAny/dependenciesMolarMassC12.generated.js';\nexport { molarPlanckConstantDependencies } from './dependenciesAny/dependenciesMolarPlanckConstant.generated.js';\nexport { molarVolumeDependencies } from './dependenciesAny/dependenciesMolarVolume.generated.js';\nexport { multinomialDependencies } from './dependenciesAny/dependenciesMultinomial.generated.js';\nexport { multiplyDependencies } from './dependenciesAny/dependenciesMultiply.generated.js';\nexport { multiplyScalarDependencies } from './dependenciesAny/dependenciesMultiplyScalar.generated.js';\nexport { NaNDependencies } from './dependenciesAny/dependenciesNaN.generated.js';\nexport { neutronMassDependencies } from './dependenciesAny/dependenciesNeutronMass.generated.js';\nexport { NodeDependencies } from './dependenciesAny/dependenciesNode.generated.js';\nexport { normDependencies } from './dependenciesAny/dependenciesNorm.generated.js';\nexport { notDependencies } from './dependenciesAny/dependenciesNot.generated.js';\nexport { nthRootDependencies } from './dependenciesAny/dependenciesNthRoot.generated.js';\nexport { nthRootsDependencies } from './dependenciesAny/dependenciesNthRoots.generated.js';\nexport { nuclearMagnetonDependencies } from './dependenciesAny/dependenciesNuclearMagneton.generated.js';\nexport { nullDependencies } from './dependenciesAny/dependenciesNull.generated.js';\nexport { numberDependencies } from './dependenciesAny/dependenciesNumber.generated.js';\nexport { numericDependencies } from './dependenciesAny/dependenciesNumeric.generated.js';\nexport { ObjectNodeDependencies } from './dependenciesAny/dependenciesObjectNode.generated.js';\nexport { octDependencies } from './dependenciesAny/dependenciesOct.generated.js';\nexport { onesDependencies } from './dependenciesAny/dependenciesOnes.generated.js';\nexport { OperatorNodeDependencies } from './dependenciesAny/dependenciesOperatorNode.generated.js';\nexport { orDependencies } from './dependenciesAny/dependenciesOr.generated.js';\nexport { ParenthesisNodeDependencies } from './dependenciesAny/dependenciesParenthesisNode.generated.js';\nexport { parseDependencies } from './dependenciesAny/dependenciesParse.generated.js';\nexport { parserDependencies } from './dependenciesAny/dependenciesParser.generated.js';\nexport { ParserDependencies } from './dependenciesAny/dependenciesParserClass.generated.js';\nexport { partitionSelectDependencies } from './dependenciesAny/dependenciesPartitionSelect.generated.js';\nexport { permutationsDependencies } from './dependenciesAny/dependenciesPermutations.generated.js';\nexport { phiDependencies } from './dependenciesAny/dependenciesPhi.generated.js';\nexport { piDependencies } from './dependenciesAny/dependenciesPi.generated.js';\nexport { pickRandomDependencies } from './dependenciesAny/dependenciesPickRandom.generated.js';\nexport { pinvDependencies } from './dependenciesAny/dependenciesPinv.generated.js';\nexport { planckChargeDependencies } from './dependenciesAny/dependenciesPlanckCharge.generated.js';\nexport { planckConstantDependencies } from './dependenciesAny/dependenciesPlanckConstant.generated.js';\nexport { planckLengthDependencies } from './dependenciesAny/dependenciesPlanckLength.generated.js';\nexport { planckMassDependencies } from './dependenciesAny/dependenciesPlanckMass.generated.js';\nexport { planckTemperatureDependencies } from './dependenciesAny/dependenciesPlanckTemperature.generated.js';\nexport { planckTimeDependencies } from './dependenciesAny/dependenciesPlanckTime.generated.js';\nexport { polynomialRootDependencies } from './dependenciesAny/dependenciesPolynomialRoot.generated.js';\nexport { powDependencies } from './dependenciesAny/dependenciesPow.generated.js';\nexport { printDependencies } from './dependenciesAny/dependenciesPrint.generated.js';\nexport { prodDependencies } from './dependenciesAny/dependenciesProd.generated.js';\nexport { protonMassDependencies } from './dependenciesAny/dependenciesProtonMass.generated.js';\nexport { qrDependencies } from './dependenciesAny/dependenciesQr.generated.js';\nexport { quantileSeqDependencies } from './dependenciesAny/dependenciesQuantileSeq.generated.js';\nexport { quantumOfCirculationDependencies } from './dependenciesAny/dependenciesQuantumOfCirculation.generated.js';\nexport { randomDependencies } from './dependenciesAny/dependenciesRandom.generated.js';\nexport { randomIntDependencies } from './dependenciesAny/dependenciesRandomInt.generated.js';\nexport { rangeDependencies } from './dependenciesAny/dependenciesRange.generated.js';\nexport { RangeDependencies } from './dependenciesAny/dependenciesRangeClass.generated.js';\nexport { RangeNodeDependencies } from './dependenciesAny/dependenciesRangeNode.generated.js';\nexport { rangeTransformDependencies } from './dependenciesAny/dependenciesRangeTransform.generated.js';\nexport { rationalizeDependencies } from './dependenciesAny/dependenciesRationalize.generated.js';\nexport { reDependencies } from './dependenciesAny/dependenciesRe.generated.js';\nexport { reducedPlanckConstantDependencies } from './dependenciesAny/dependenciesReducedPlanckConstant.generated.js';\nexport { RelationalNodeDependencies } from './dependenciesAny/dependenciesRelationalNode.generated.js';\nexport { replacerDependencies } from './dependenciesAny/dependenciesReplacer.generated.js';\nexport { reshapeDependencies } from './dependenciesAny/dependenciesReshape.generated.js';\nexport { resizeDependencies } from './dependenciesAny/dependenciesResize.generated.js';\nexport { resolveDependencies } from './dependenciesAny/dependenciesResolve.generated.js';\nexport { ResultSetDependencies } from './dependenciesAny/dependenciesResultSet.generated.js';\nexport { reviverDependencies } from './dependenciesAny/dependenciesReviver.generated.js';\nexport { rightArithShiftDependencies } from './dependenciesAny/dependenciesRightArithShift.generated.js';\nexport { rightLogShiftDependencies } from './dependenciesAny/dependenciesRightLogShift.generated.js';\nexport { rotateDependencies } from './dependenciesAny/dependenciesRotate.generated.js';\nexport { rotationMatrixDependencies } from './dependenciesAny/dependenciesRotationMatrix.generated.js';\nexport { roundDependencies } from './dependenciesAny/dependenciesRound.generated.js';\nexport { rowDependencies } from './dependenciesAny/dependenciesRow.generated.js';\nexport { rowTransformDependencies } from './dependenciesAny/dependenciesRowTransform.generated.js';\nexport { rydbergDependencies } from './dependenciesAny/dependenciesRydberg.generated.js';\nexport { SQRT1_2Dependencies } from './dependenciesAny/dependenciesSQRT1_2.generated.js'; // eslint-disable-line camelcase\nexport { SQRT2Dependencies } from './dependenciesAny/dependenciesSQRT2.generated.js';\nexport { sackurTetrodeDependencies } from './dependenciesAny/dependenciesSackurTetrode.generated.js';\nexport { schurDependencies } from './dependenciesAny/dependenciesSchur.generated.js';\nexport { secDependencies } from './dependenciesAny/dependenciesSec.generated.js';\nexport { sechDependencies } from './dependenciesAny/dependenciesSech.generated.js';\nexport { secondRadiationDependencies } from './dependenciesAny/dependenciesSecondRadiation.generated.js';\nexport { setCartesianDependencies } from './dependenciesAny/dependenciesSetCartesian.generated.js';\nexport { setDifferenceDependencies } from './dependenciesAny/dependenciesSetDifference.generated.js';\nexport { setDistinctDependencies } from './dependenciesAny/dependenciesSetDistinct.generated.js';\nexport { setIntersectDependencies } from './dependenciesAny/dependenciesSetIntersect.generated.js';\nexport { setIsSubsetDependencies } from './dependenciesAny/dependenciesSetIsSubset.generated.js';\nexport { setMultiplicityDependencies } from './dependenciesAny/dependenciesSetMultiplicity.generated.js';\nexport { setPowersetDependencies } from './dependenciesAny/dependenciesSetPowerset.generated.js';\nexport { setSizeDependencies } from './dependenciesAny/dependenciesSetSize.generated.js';\nexport { setSymDifferenceDependencies } from './dependenciesAny/dependenciesSetSymDifference.generated.js';\nexport { setUnionDependencies } from './dependenciesAny/dependenciesSetUnion.generated.js';\nexport { signDependencies } from './dependenciesAny/dependenciesSign.generated.js';\nexport { simplifyDependencies } from './dependenciesAny/dependenciesSimplify.generated.js';\nexport { simplifyConstantDependencies } from './dependenciesAny/dependenciesSimplifyConstant.generated.js';\nexport { simplifyCoreDependencies } from './dependenciesAny/dependenciesSimplifyCore.generated.js';\nexport { sinDependencies } from './dependenciesAny/dependenciesSin.generated.js';\nexport { sinhDependencies } from './dependenciesAny/dependenciesSinh.generated.js';\nexport { sizeDependencies } from './dependenciesAny/dependenciesSize.generated.js';\nexport { sluDependencies } from './dependenciesAny/dependenciesSlu.generated.js';\nexport { smallerDependencies } from './dependenciesAny/dependenciesSmaller.generated.js';\nexport { smallerEqDependencies } from './dependenciesAny/dependenciesSmallerEq.generated.js';\nexport { sortDependencies } from './dependenciesAny/dependenciesSort.generated.js';\nexport { SpaDependencies } from './dependenciesAny/dependenciesSpaClass.generated.js';\nexport { sparseDependencies } from './dependenciesAny/dependenciesSparse.generated.js';\nexport { SparseMatrixDependencies } from './dependenciesAny/dependenciesSparseMatrixClass.generated.js';\nexport { speedOfLightDependencies } from './dependenciesAny/dependenciesSpeedOfLight.generated.js';\nexport { splitUnitDependencies } from './dependenciesAny/dependenciesSplitUnit.generated.js';\nexport { sqrtDependencies } from './dependenciesAny/dependenciesSqrt.generated.js';\nexport { sqrtmDependencies } from './dependenciesAny/dependenciesSqrtm.generated.js';\nexport { squareDependencies } from './dependenciesAny/dependenciesSquare.generated.js';\nexport { squeezeDependencies } from './dependenciesAny/dependenciesSqueeze.generated.js';\nexport { stdDependencies } from './dependenciesAny/dependenciesStd.generated.js';\nexport { stdTransformDependencies } from './dependenciesAny/dependenciesStdTransform.generated.js';\nexport { stefanBoltzmannDependencies } from './dependenciesAny/dependenciesStefanBoltzmann.generated.js';\nexport { stirlingS2Dependencies } from './dependenciesAny/dependenciesStirlingS2.generated.js';\nexport { stringDependencies } from './dependenciesAny/dependenciesString.generated.js';\nexport { subsetDependencies } from './dependenciesAny/dependenciesSubset.generated.js';\nexport { subsetTransformDependencies } from './dependenciesAny/dependenciesSubsetTransform.generated.js';\nexport { subtractDependencies } from './dependenciesAny/dependenciesSubtract.generated.js';\nexport { sumDependencies } from './dependenciesAny/dependenciesSum.generated.js';\nexport { sumTransformDependencies } from './dependenciesAny/dependenciesSumTransform.generated.js';\nexport { sylvesterDependencies } from './dependenciesAny/dependenciesSylvester.generated.js';\nexport { SymbolNodeDependencies } from './dependenciesAny/dependenciesSymbolNode.generated.js';\nexport { symbolicEqualDependencies } from './dependenciesAny/dependenciesSymbolicEqual.generated.js';\nexport { tanDependencies } from './dependenciesAny/dependenciesTan.generated.js';\nexport { tanhDependencies } from './dependenciesAny/dependenciesTanh.generated.js';\nexport { tauDependencies } from './dependenciesAny/dependenciesTau.generated.js';\nexport { thomsonCrossSectionDependencies } from './dependenciesAny/dependenciesThomsonCrossSection.generated.js';\nexport { toDependencies } from './dependenciesAny/dependenciesTo.generated.js';\nexport { traceDependencies } from './dependenciesAny/dependenciesTrace.generated.js';\nexport { transposeDependencies } from './dependenciesAny/dependenciesTranspose.generated.js';\nexport { trueDependencies } from './dependenciesAny/dependenciesTrue.generated.js';\nexport { typeOfDependencies } from './dependenciesAny/dependenciesTypeOf.generated.js';\nexport { typedDependencies } from './dependenciesAny/dependenciesTyped.generated.js';\nexport { unaryMinusDependencies } from './dependenciesAny/dependenciesUnaryMinus.generated.js';\nexport { unaryPlusDependencies } from './dependenciesAny/dependenciesUnaryPlus.generated.js';\nexport { unequalDependencies } from './dependenciesAny/dependenciesUnequal.generated.js';\nexport { UnitDependencies } from './dependenciesAny/dependenciesUnitClass.generated.js';\nexport { unitDependencies } from './dependenciesAny/dependenciesUnitFunction.generated.js';\nexport { EDependencies } from './dependenciesAny/dependenciesUppercaseE.generated.js';\nexport { PIDependencies } from './dependenciesAny/dependenciesUppercasePi.generated.js';\nexport { usolveDependencies } from './dependenciesAny/dependenciesUsolve.generated.js';\nexport { usolveAllDependencies } from './dependenciesAny/dependenciesUsolveAll.generated.js';\nexport { vacuumImpedanceDependencies } from './dependenciesAny/dependenciesVacuumImpedance.generated.js';\nexport { varianceDependencies } from './dependenciesAny/dependenciesVariance.generated.js';\nexport { varianceTransformDependencies } from './dependenciesAny/dependenciesVarianceTransform.generated.js';\nexport { versionDependencies } from './dependenciesAny/dependenciesVersion.generated.js';\nexport { weakMixingAngleDependencies } from './dependenciesAny/dependenciesWeakMixingAngle.generated.js';\nexport { wienDisplacementDependencies } from './dependenciesAny/dependenciesWienDisplacement.generated.js';\nexport { xgcdDependencies } from './dependenciesAny/dependenciesXgcd.generated.js';\nexport { xorDependencies } from './dependenciesAny/dependenciesXor.generated.js';\nexport { zerosDependencies } from './dependenciesAny/dependenciesZeros.generated.js';\nexport { all } from './allFactoriesAny.js';","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAbs } from '../../factoriesAny.js';\nexport var absDependencies = {\n  typedDependencies,\n  createAbs\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { createTyped } from '../../factoriesAny.js';\nexport var typedDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  DenseMatrixDependencies,\n  FractionDependencies,\n  createTyped\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createBigNumberClass } from '../../factoriesAny.js';\nexport var BigNumberDependencies = {\n  createBigNumberClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createComplexClass } from '../../factoriesAny.js';\nexport var ComplexDependencies = {\n  createComplexClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { createDenseMatrixClass } from '../../factoriesAny.js';\nexport var DenseMatrixDependencies = {\n  MatrixDependencies,\n  createDenseMatrixClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createMatrixClass } from '../../factoriesAny.js';\nexport var MatrixDependencies = {\n  createMatrixClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createFractionClass } from '../../factoriesAny.js';\nexport var FractionDependencies = {\n  createFractionClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { createAccessorNode } from '../../factoriesAny.js';\nexport var AccessorNodeDependencies = {\n  NodeDependencies,\n  subsetDependencies,\n  createAccessorNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createNode } from '../../factoriesAny.js';\nexport var NodeDependencies = {\n  createNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSubset } from '../../factoriesAny.js';\nexport var subsetDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSubset\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrix } from '../../factoriesAny.js';\nexport var matrixDependencies = {\n  DenseMatrixDependencies,\n  MatrixDependencies,\n  SparseMatrixDependencies,\n  typedDependencies,\n  createMatrix\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { MatrixDependencies } from './dependenciesMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSparseMatrixClass } from '../../factoriesAny.js';\nexport var SparseMatrixDependencies = {\n  MatrixDependencies,\n  equalScalarDependencies,\n  typedDependencies,\n  createSparseMatrixClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqualScalar } from '../../factoriesAny.js';\nexport var equalScalarDependencies = {\n  typedDependencies,\n  createEqualScalar\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcos } from '../../factoriesAny.js';\nexport var acosDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAcos\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcosh } from '../../factoriesAny.js';\nexport var acoshDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAcosh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcot } from '../../factoriesAny.js';\nexport var acotDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createAcot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcoth } from '../../factoriesAny.js';\nexport var acothDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAcoth\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcsc } from '../../factoriesAny.js';\nexport var acscDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAcsc\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAcsch } from '../../factoriesAny.js';\nexport var acschDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createAcsch\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAdd } from '../../factoriesAny.js';\nexport var addDependencies = {\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createAdd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAddScalar } from '../../factoriesAny.js';\nexport var addScalarDependencies = {\n  typedDependencies,\n  createAddScalar\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { notDependencies } from './dependenciesNot.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createAnd } from '../../factoriesAny.js';\nexport var andDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  notDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createAnd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNot } from '../../factoriesAny.js';\nexport var notDependencies = {\n  typedDependencies,\n  createNot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createZeros } from '../../factoriesAny.js';\nexport var zerosDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createZeros\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createApply } from '../../factoriesAny.js';\nexport var applyDependencies = {\n  isIntegerDependencies,\n  typedDependencies,\n  createApply\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsInteger } from '../../factoriesAny.js';\nexport var isIntegerDependencies = {\n  typedDependencies,\n  createIsInteger\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createApplyTransform } from '../../factoriesAny.js';\nexport var applyTransformDependencies = {\n  isIntegerDependencies,\n  typedDependencies,\n  createApplyTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createArg } from '../../factoriesAny.js';\nexport var argDependencies = {\n  typedDependencies,\n  createArg\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createArrayNode } from '../../factoriesAny.js';\nexport var ArrayNodeDependencies = {\n  NodeDependencies,\n  createArrayNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsec } from '../../factoriesAny.js';\nexport var asecDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAsec\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsech } from '../../factoriesAny.js';\nexport var asechDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  typedDependencies,\n  createAsech\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsin } from '../../factoriesAny.js';\nexport var asinDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAsin\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAsinh } from '../../factoriesAny.js';\nexport var asinhDependencies = {\n  typedDependencies,\n  createAsinh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { createAssignmentNode } from '../../factoriesAny.js';\nexport var AssignmentNodeDependencies = {\n  matrixDependencies,\n  NodeDependencies,\n  subsetDependencies,\n  createAssignmentNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtan } from '../../factoriesAny.js';\nexport var atanDependencies = {\n  typedDependencies,\n  createAtan\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtan2 } from '../../factoriesAny.js';\nexport var atan2Dependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createAtan2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createAtanh } from '../../factoriesAny.js';\nexport var atanhDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createAtanh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createAtomicMass } from '../../factoriesAny.js';\nexport var atomicMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createAtomicMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { fixDependencies } from './dependenciesFix.generated.js';\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { createUnitClass } from '../../factoriesAny.js';\nexport var UnitDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  FractionDependencies,\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalDependencies,\n  fixDependencies,\n  formatDependencies,\n  isNumericDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  powDependencies,\n  roundDependencies,\n  subtractDependencies,\n  createUnitClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDivideScalar } from '../../factoriesAny.js';\nexport var divideScalarDependencies = {\n  numericDependencies,\n  typedDependencies,\n  createDivideScalar\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { createNumeric } from '../../factoriesAny.js';\nexport var numericDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  numberDependencies,\n  createNumeric\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBignumber } from '../../factoriesAny.js';\nexport var bignumberDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createBignumber\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFraction } from '../../factoriesAny.js';\nexport var fractionDependencies = {\n  FractionDependencies,\n  typedDependencies,\n  createFraction\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNumber } from '../../factoriesAny.js';\nexport var numberDependencies = {\n  typedDependencies,\n  createNumber\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqual } from '../../factoriesAny.js';\nexport var equalDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createEqual\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { ceilDependencies } from './dependenciesCeil.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { floorDependencies } from './dependenciesFloor.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createFix } from '../../factoriesAny.js';\nexport var fixDependencies = {\n  ComplexDependencies,\n  DenseMatrixDependencies,\n  ceilDependencies,\n  equalScalarDependencies,\n  floorDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createFix\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createCeil } from '../../factoriesAny.js';\nexport var ceilDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  roundDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createCeil\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRound } from '../../factoriesAny.js';\nexport var roundDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRound\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { roundDependencies } from './dependenciesRound.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createFloor } from '../../factoriesAny.js';\nexport var floorDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  roundDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createFloor\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFormat } from '../../factoriesAny.js';\nexport var formatDependencies = {\n  typedDependencies,\n  createFormat\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNumeric } from '../../factoriesAny.js';\nexport var isNumericDependencies = {\n  typedDependencies,\n  createIsNumeric\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultiplyScalar } from '../../factoriesAny.js';\nexport var multiplyScalarDependencies = {\n  typedDependencies,\n  createMultiplyScalar\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPow } from '../../factoriesAny.js';\nexport var powDependencies = {\n  ComplexDependencies,\n  fractionDependencies,\n  identityDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  numberDependencies,\n  typedDependencies,\n  createPow\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIdentity } from '../../factoriesAny.js';\nexport var identityDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createIdentity\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { detDependencies } from './dependenciesDet.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createInv } from '../../factoriesAny.js';\nexport var invDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  detDependencies,\n  divideScalarDependencies,\n  identityDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createInv\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createDet } from '../../factoriesAny.js';\nexport var detDependencies = {\n  divideScalarDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createDet\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsZero } from '../../factoriesAny.js';\nexport var isZeroDependencies = {\n  typedDependencies,\n  createIsZero\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultiply } from '../../factoriesAny.js';\nexport var multiplyDependencies = {\n  addScalarDependencies,\n  dotDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createMultiply\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDot } from '../../factoriesAny.js';\nexport var dotDependencies = {\n  addScalarDependencies,\n  conjDependencies,\n  multiplyScalarDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createDot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConj } from '../../factoriesAny.js';\nexport var conjDependencies = {\n  typedDependencies,\n  createConj\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSize } from '../../factoriesAny.js';\nexport var sizeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSize\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createSubtract } from '../../factoriesAny.js';\nexport var subtractDependencies = {\n  DenseMatrixDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createSubtract\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnaryMinus } from '../../factoriesAny.js';\nexport var unaryMinusDependencies = {\n  typedDependencies,\n  createUnaryMinus\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createAvogadro } from '../../factoriesAny.js';\nexport var avogadroDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createAvogadro\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { stirlingS2Dependencies } from './dependenciesStirlingS2.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBellNumbers } from '../../factoriesAny.js';\nexport var bellNumbersDependencies = {\n  addScalarDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  stirlingS2Dependencies,\n  typedDependencies,\n  createBellNumbers\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNegative } from '../../factoriesAny.js';\nexport var isNegativeDependencies = {\n  typedDependencies,\n  createIsNegative\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createStirlingS2 } from '../../factoriesAny.js';\nexport var stirlingS2Dependencies = {\n  bignumberDependencies,\n  addScalarDependencies,\n  combinationsDependencies,\n  divideScalarDependencies,\n  factorialDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  largerDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  powDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createStirlingS2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCombinations } from '../../factoriesAny.js';\nexport var combinationsDependencies = {\n  typedDependencies,\n  createCombinations\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { gammaDependencies } from './dependenciesGamma.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFactorial } from '../../factoriesAny.js';\nexport var factorialDependencies = {\n  gammaDependencies,\n  typedDependencies,\n  createFactorial\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGamma } from '../../factoriesAny.js';\nexport var gammaDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  multiplyScalarDependencies,\n  powDependencies,\n  typedDependencies,\n  createGamma\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLarger } from '../../factoriesAny.js';\nexport var largerDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLarger\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBin } from '../../factoriesAny.js';\nexport var binDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createBin\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitAnd } from '../../factoriesAny.js';\nexport var bitAndDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitAnd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitNot } from '../../factoriesAny.js';\nexport var bitNotDependencies = {\n  typedDependencies,\n  createBitNot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitOr } from '../../factoriesAny.js';\nexport var bitOrDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitOr\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBitXor } from '../../factoriesAny.js';\nexport var bitXorDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createBitXor\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { ResultSetDependencies } from './dependenciesResultSet.generated.js';\nimport { createBlockNode } from '../../factoriesAny.js';\nexport var BlockNodeDependencies = {\n  NodeDependencies,\n  ResultSetDependencies,\n  createBlockNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createResultSet } from '../../factoriesAny.js';\nexport var ResultSetDependencies = {\n  createResultSet\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBohrMagneton } from '../../factoriesAny.js';\nexport var bohrMagnetonDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBohrMagneton\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBohrRadius } from '../../factoriesAny.js';\nexport var bohrRadiusDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBohrRadius\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createBoltzmann } from '../../factoriesAny.js';\nexport var boltzmannDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createBoltzmann\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createBoolean } from '../../factoriesAny.js';\nexport var booleanDependencies = {\n  typedDependencies,\n  createBoolean\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCatalan } from '../../factoriesAny.js';\nexport var catalanDependencies = {\n  addScalarDependencies,\n  combinationsDependencies,\n  divideScalarDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createCatalan\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createCbrt } from '../../factoriesAny.js';\nexport var cbrtDependencies = {\n  BigNumberDependencies,\n  ComplexDependencies,\n  FractionDependencies,\n  isNegativeDependencies,\n  matrixDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createCbrt\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ChainDependencies } from './dependenciesChainClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createChain } from '../../factoriesAny.js';\nexport var chainDependencies = {\n  ChainDependencies,\n  typedDependencies,\n  createChain\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createChainClass } from '../../factoriesAny.js';\nexport var ChainDependencies = {\n  typedDependencies,\n  createChainClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createClassicalElectronRadius } from '../../factoriesAny.js';\nexport var classicalElectronRadiusDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createClassicalElectronRadius\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createClone } from '../../factoriesAny.js';\nexport var cloneDependencies = {\n  typedDependencies,\n  createClone\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createColumn } from '../../factoriesAny.js';\nexport var columnDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createColumn\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ImmutableDenseMatrixDependencies } from './dependenciesImmutableDenseMatrixClass.generated.js';\nimport { createIndexClass } from '../../factoriesAny.js';\nexport var IndexDependencies = {\n  ImmutableDenseMatrixDependencies,\n  createIndexClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { createImmutableDenseMatrixClass } from '../../factoriesAny.js';\nexport var ImmutableDenseMatrixDependencies = {\n  DenseMatrixDependencies,\n  smallerDependencies,\n  createImmutableDenseMatrixClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSmaller } from '../../factoriesAny.js';\nexport var smallerDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSmaller\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { smallerEqDependencies } from './dependenciesSmallerEq.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRange } from '../../factoriesAny.js';\nexport var rangeDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  smallerDependencies,\n  smallerEqDependencies,\n  typedDependencies,\n  createRange\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLargerEq } from '../../factoriesAny.js';\nexport var largerEqDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLargerEq\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSmallerEq } from '../../factoriesAny.js';\nexport var smallerEqDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSmallerEq\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createColumnTransform } from '../../factoriesAny.js';\nexport var columnTransformDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createColumnTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCombinationsWithRep } from '../../factoriesAny.js';\nexport var combinationsWithRepDependencies = {\n  typedDependencies,\n  createCombinationsWithRep\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompare } from '../../factoriesAny.js';\nexport var compareDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  FractionDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createCompare\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompareNatural } from '../../factoriesAny.js';\nexport var compareNaturalDependencies = {\n  compareDependencies,\n  typedDependencies,\n  createCompareNatural\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompareText } from '../../factoriesAny.js';\nexport var compareTextDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createCompareText\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCompile } from '../../factoriesAny.js';\nexport var compileDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createCompile\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { AssignmentNodeDependencies } from './dependenciesAssignmentNode.generated.js';\nimport { BlockNodeDependencies } from './dependenciesBlockNode.generated.js';\nimport { ConditionalNodeDependencies } from './dependenciesConditionalNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionAssignmentNodeDependencies } from './dependenciesFunctionAssignmentNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { RangeNodeDependencies } from './dependenciesRangeNode.generated.js';\nimport { RelationalNodeDependencies } from './dependenciesRelationalNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createParse } from '../../factoriesAny.js';\nexport var parseDependencies = {\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  AssignmentNodeDependencies,\n  BlockNodeDependencies,\n  ConditionalNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionAssignmentNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  RangeNodeDependencies,\n  RelationalNodeDependencies,\n  SymbolNodeDependencies,\n  numericDependencies,\n  typedDependencies,\n  createParse\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createConditionalNode } from '../../factoriesAny.js';\nexport var ConditionalNodeDependencies = {\n  NodeDependencies,\n  createConditionalNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createConstantNode } from '../../factoriesAny.js';\nexport var ConstantNodeDependencies = {\n  NodeDependencies,\n  createConstantNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFunctionAssignmentNode } from '../../factoriesAny.js';\nexport var FunctionAssignmentNodeDependencies = {\n  NodeDependencies,\n  typedDependencies,\n  createFunctionAssignmentNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { createFunctionNode } from '../../factoriesAny.js';\nexport var FunctionNodeDependencies = {\n  NodeDependencies,\n  SymbolNodeDependencies,\n  createFunctionNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createSymbolNode } from '../../factoriesAny.js';\nexport var SymbolNodeDependencies = {\n  UnitDependencies,\n  NodeDependencies,\n  createSymbolNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { createIndexNode } from '../../factoriesAny.js';\nexport var IndexNodeDependencies = {\n  NodeDependencies,\n  sizeDependencies,\n  createIndexNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createObjectNode } from '../../factoriesAny.js';\nexport var ObjectNodeDependencies = {\n  NodeDependencies,\n  createObjectNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createOperatorNode } from '../../factoriesAny.js';\nexport var OperatorNodeDependencies = {\n  NodeDependencies,\n  createOperatorNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createParenthesisNode } from '../../factoriesAny.js';\nexport var ParenthesisNodeDependencies = {\n  NodeDependencies,\n  createParenthesisNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createRangeNode } from '../../factoriesAny.js';\nexport var RangeNodeDependencies = {\n  NodeDependencies,\n  createRangeNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { NodeDependencies } from './dependenciesNode.generated.js';\nimport { createRelationalNode } from '../../factoriesAny.js';\nexport var RelationalNodeDependencies = {\n  NodeDependencies,\n  createRelationalNode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createComplex } from '../../factoriesAny.js';\nexport var complexDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createComplex\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { combinationsDependencies } from './dependenciesCombinations.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isNegativeDependencies } from './dependenciesIsNegative.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createComposition } from '../../factoriesAny.js';\nexport var compositionDependencies = {\n  addScalarDependencies,\n  combinationsDependencies,\n  isIntegerDependencies,\n  isNegativeDependencies,\n  isPositiveDependencies,\n  largerDependencies,\n  typedDependencies,\n  createComposition\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsPositive } from '../../factoriesAny.js';\nexport var isPositiveDependencies = {\n  typedDependencies,\n  createIsPositive\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConcat } from '../../factoriesAny.js';\nexport var concatDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createConcat\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createConcatTransform } from '../../factoriesAny.js';\nexport var concatTransformDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createConcatTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createConductanceQuantum } from '../../factoriesAny.js';\nexport var conductanceQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createConductanceQuantum\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCos } from '../../factoriesAny.js';\nexport var cosDependencies = {\n  typedDependencies,\n  createCos\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCosh } from '../../factoriesAny.js';\nexport var coshDependencies = {\n  typedDependencies,\n  createCosh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCot } from '../../factoriesAny.js';\nexport var cotDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCoth } from '../../factoriesAny.js';\nexport var cothDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCoth\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createCoulomb } from '../../factoriesAny.js';\nexport var coulombDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createCoulomb\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { prodDependencies } from './dependenciesProd.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCount } from '../../factoriesAny.js';\nexport var countDependencies = {\n  prodDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createCount\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createProd } from '../../factoriesAny.js';\nexport var prodDependencies = {\n  multiplyScalarDependencies,\n  numericDependencies,\n  typedDependencies,\n  createProd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCreateUnit } from '../../factoriesAny.js';\nexport var createUnitDependencies = {\n  UnitDependencies,\n  typedDependencies,\n  createCreateUnit\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCross } from '../../factoriesAny.js';\nexport var crossDependencies = {\n  matrixDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createCross\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCsc } from '../../factoriesAny.js';\nexport var cscDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCsc\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCsch } from '../../factoriesAny.js';\nexport var cschDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createCsch\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCtranspose } from '../../factoriesAny.js';\nexport var ctransposeDependencies = {\n  conjDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createCtranspose\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTranspose } from '../../factoriesAny.js';\nexport var transposeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createTranspose\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createCube } from '../../factoriesAny.js';\nexport var cubeDependencies = {\n  typedDependencies,\n  createCube\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryPlusDependencies } from './dependenciesUnaryPlus.generated.js';\nimport { createCumSum } from '../../factoriesAny.js';\nexport var cumsumDependencies = {\n  addDependencies,\n  typedDependencies,\n  unaryPlusDependencies,\n  createCumSum\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnaryPlus } from '../../factoriesAny.js';\nexport var unaryPlusDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createUnaryPlus\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryPlusDependencies } from './dependenciesUnaryPlus.generated.js';\nimport { createCumSumTransform } from '../../factoriesAny.js';\nexport var cumsumTransformDependencies = {\n  addDependencies,\n  typedDependencies,\n  unaryPlusDependencies,\n  createCumSumTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDeepEqual } from '../../factoriesAny.js';\nexport var deepEqualDependencies = {\n  equalDependencies,\n  typedDependencies,\n  createDeepEqual\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDerivative } from '../../factoriesAny.js';\nexport var derivativeDependencies = {\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  numericDependencies,\n  parseDependencies,\n  simplifyDependencies,\n  typedDependencies,\n  createDerivative\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { resolveDependencies } from './dependenciesResolve.generated.js';\nimport { simplifyConstantDependencies } from './dependenciesSimplifyConstant.generated.js';\nimport { simplifyCoreDependencies } from './dependenciesSimplifyCore.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplify } from '../../factoriesAny.js';\nexport var simplifyDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  resolveDependencies,\n  simplifyConstantDependencies,\n  simplifyCoreDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSimplify\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDivide } from '../../factoriesAny.js';\nexport var divideDependencies = {\n  divideScalarDependencies,\n  equalScalarDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createDivide\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createResolve } from '../../factoriesAny.js';\nexport var resolveDependencies = {\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  parseDependencies,\n  typedDependencies,\n  createResolve\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplifyConstant } from '../../factoriesAny.js';\nexport var simplifyConstantDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  SymbolNodeDependencies,\n  matrixDependencies,\n  parseDependencies,\n  typedDependencies,\n  createSimplifyConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSimplifyCore } from '../../factoriesAny.js';\nexport var simplifyCoreDependencies = {\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSimplifyCore\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createDeuteronMass } from '../../factoriesAny.js';\nexport var deuteronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createDeuteronMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiag } from '../../factoriesAny.js';\nexport var diagDependencies = {\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createDiag\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiff } from '../../factoriesAny.js';\nexport var diffDependencies = {\n  matrixDependencies,\n  numberDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createDiff\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDiffTransform } from '../../factoriesAny.js';\nexport var diffTransformDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  numberDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createDiffTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createDistance } from '../../factoriesAny.js';\nexport var distanceDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  multiplyScalarDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createDistance\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqrt } from '../../factoriesAny.js';\nexport var sqrtDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createSqrt\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotDivide } from '../../factoriesAny.js';\nexport var dotDivideDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createDotDivide\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotMultiply } from '../../factoriesAny.js';\nexport var dotMultiplyDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createDotMultiply\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createDotPow } from '../../factoriesAny.js';\nexport var dotPowDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  powDependencies,\n  typedDependencies,\n  createDotPow\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createE } from '../../factoriesAny.js';\nexport var eDependencies = {\n  BigNumberDependencies,\n  createE\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createEfimovFactor } from '../../factoriesAny.js';\nexport var efimovFactorDependencies = {\n  BigNumberDependencies,\n  createEfimovFactor\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { atanDependencies } from './dependenciesAtan.generated.js';\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { columnDependencies } from './dependenciesColumn.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { cosDependencies } from './dependenciesCos.generated.js';\nimport { diagDependencies } from './dependenciesDiag.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { imDependencies } from './dependenciesIm.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { matrixFromColumnsDependencies } from './dependenciesMatrixFromColumns.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { numberDependencies } from './dependenciesNumber.generated.js';\nimport { qrDependencies } from './dependenciesQr.generated.js';\nimport { reDependencies } from './dependenciesRe.generated.js';\nimport { sinDependencies } from './dependenciesSin.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { usolveDependencies } from './dependenciesUsolve.generated.js';\nimport { usolveAllDependencies } from './dependenciesUsolveAll.generated.js';\nimport { createEigs } from '../../factoriesAny.js';\nexport var eigsDependencies = {\n  absDependencies,\n  addDependencies,\n  addScalarDependencies,\n  atanDependencies,\n  bignumberDependencies,\n  columnDependencies,\n  complexDependencies,\n  cosDependencies,\n  diagDependencies,\n  divideScalarDependencies,\n  dotDependencies,\n  equalDependencies,\n  flattenDependencies,\n  imDependencies,\n  invDependencies,\n  largerDependencies,\n  matrixDependencies,\n  matrixFromColumnsDependencies,\n  multiplyDependencies,\n  multiplyScalarDependencies,\n  numberDependencies,\n  qrDependencies,\n  reDependencies,\n  sinDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  usolveDependencies,\n  usolveAllDependencies,\n  createEigs\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFlatten } from '../../factoriesAny.js';\nexport var flattenDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createFlatten\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIm } from '../../factoriesAny.js';\nexport var imDependencies = {\n  typedDependencies,\n  createIm\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromColumns } from '../../factoriesAny.js';\nexport var matrixFromColumnsDependencies = {\n  flattenDependencies,\n  matrixDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createMatrixFromColumns\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { signDependencies } from './dependenciesSign.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createQr } from '../../factoriesAny.js';\nexport var qrDependencies = {\n  addScalarDependencies,\n  complexDependencies,\n  conjDependencies,\n  divideScalarDependencies,\n  equalDependencies,\n  identityDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  signDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  zerosDependencies,\n  createQr\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { FractionDependencies } from './dependenciesFractionClass.generated.js';\nimport { complexDependencies } from './dependenciesComplex.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSign } from '../../factoriesAny.js';\nexport var signDependencies = {\n  BigNumberDependencies,\n  FractionDependencies,\n  complexDependencies,\n  typedDependencies,\n  createSign\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRe } from '../../factoriesAny.js';\nexport var reDependencies = {\n  typedDependencies,\n  createRe\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSin } from '../../factoriesAny.js';\nexport var sinDependencies = {\n  typedDependencies,\n  createSin\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUsolve } from '../../factoriesAny.js';\nexport var usolveDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createUsolve\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUsolveAll } from '../../factoriesAny.js';\nexport var usolveAllDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createUsolveAll\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElectricConstant } from '../../factoriesAny.js';\nexport var electricConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElectricConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElectronMass } from '../../factoriesAny.js';\nexport var electronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElectronMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createElementaryCharge } from '../../factoriesAny.js';\nexport var elementaryChargeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createElementaryCharge\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareTextDependencies } from './dependenciesCompareText.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEqualText } from '../../factoriesAny.js';\nexport var equalTextDependencies = {\n  compareTextDependencies,\n  isZeroDependencies,\n  typedDependencies,\n  createEqualText\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createErf } from '../../factoriesAny.js';\nexport var erfDependencies = {\n  typedDependencies,\n  createErf\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createEvaluate } from '../../factoriesAny.js';\nexport var evaluateDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createEvaluate\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExp } from '../../factoriesAny.js';\nexport var expDependencies = {\n  typedDependencies,\n  createExp\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExpm } from '../../factoriesAny.js';\nexport var expmDependencies = {\n  absDependencies,\n  addDependencies,\n  identityDependencies,\n  invDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createExpm\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createExpm1 } from '../../factoriesAny.js';\nexport var expm1Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createExpm1\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createFalse } from '../../factoriesAny.js';\nexport var falseDependencies = {\n  createFalse\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFaraday } from '../../factoriesAny.js';\nexport var faradayDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFaraday\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFermiCoupling } from '../../factoriesAny.js';\nexport var fermiCouplingDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFermiCoupling\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { expDependencies } from './dependenciesExp.generated.js';\nimport { iDependencies } from './dependenciesI.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { tauDependencies } from './dependenciesTau.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFft } from '../../factoriesAny.js';\nexport var fftDependencies = {\n  addScalarDependencies,\n  divideScalarDependencies,\n  expDependencies,\n  iDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  tauDependencies,\n  typedDependencies,\n  createFft\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { createI } from '../../factoriesAny.js';\nexport var iDependencies = {\n  ComplexDependencies,\n  createI\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createTau } from '../../factoriesAny.js';\nexport var tauDependencies = {\n  BigNumberDependencies,\n  createTau\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { createFibonacciHeapClass } from '../../factoriesAny.js';\nexport var FibonacciHeapDependencies = {\n  largerDependencies,\n  smallerDependencies,\n  createFibonacciHeapClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFilter } from '../../factoriesAny.js';\nexport var filterDependencies = {\n  typedDependencies,\n  createFilter\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createFilterTransform } from '../../factoriesAny.js';\nexport var filterTransformDependencies = {\n  typedDependencies,\n  createFilterTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createFineStructure } from '../../factoriesAny.js';\nexport var fineStructureDependencies = {\n  BigNumberDependencies,\n  createFineStructure\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createFirstRadiation } from '../../factoriesAny.js';\nexport var firstRadiationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createFirstRadiation\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createForEach } from '../../factoriesAny.js';\nexport var forEachDependencies = {\n  typedDependencies,\n  createForEach\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createForEachTransform } from '../../factoriesAny.js';\nexport var forEachTransformDependencies = {\n  typedDependencies,\n  createForEachTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGasConstant } from '../../factoriesAny.js';\nexport var gasConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGasConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGcd } from '../../factoriesAny.js';\nexport var gcdDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createGcd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createGetMatrixDataType } from '../../factoriesAny.js';\nexport var getMatrixDataTypeDependencies = {\n  typedDependencies,\n  createGetMatrixDataType\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGravitationConstant } from '../../factoriesAny.js';\nexport var gravitationConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGravitationConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createGravity } from '../../factoriesAny.js';\nexport var gravityDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createGravity\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createHartreeEnergy } from '../../factoriesAny.js';\nexport var hartreeEnergyDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createHartreeEnergy\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHasNumericValue } from '../../factoriesAny.js';\nexport var hasNumericValueDependencies = {\n  isNumericDependencies,\n  typedDependencies,\n  createHasNumericValue\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { HelpDependencies } from './dependenciesHelpClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHelp } from '../../factoriesAny.js';\nexport var helpDependencies = {\n  HelpDependencies,\n  typedDependencies,\n  createHelp\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { createHelpClass } from '../../factoriesAny.js';\nexport var HelpDependencies = {\n  parseDependencies,\n  createHelpClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHex } from '../../factoriesAny.js';\nexport var hexDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createHex\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createHypot } from '../../factoriesAny.js';\nexport var hypotDependencies = {\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  isPositiveDependencies,\n  multiplyScalarDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  createHypot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { fftDependencies } from './dependenciesFft.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIfft } from '../../factoriesAny.js';\nexport var ifftDependencies = {\n  conjDependencies,\n  dotDivideDependencies,\n  fftDependencies,\n  typedDependencies,\n  createIfft\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIndex } from '../../factoriesAny.js';\nexport var indexDependencies = {\n  IndexDependencies,\n  typedDependencies,\n  createIndex\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { createIndexTransform } from '../../factoriesAny.js';\nexport var indexTransformDependencies = {\n  IndexDependencies,\n  createIndexTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createInfinity } from '../../factoriesAny.js';\nexport var InfinityDependencies = {\n  BigNumberDependencies,\n  createInfinity\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIntersect } from '../../factoriesAny.js';\nexport var intersectDependencies = {\n  absDependencies,\n  addDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  flattenDependencies,\n  isNumericDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  multiplyScalarDependencies,\n  smallerDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createIntersect\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createInverseConductanceQuantum } from '../../factoriesAny.js';\nexport var inverseConductanceQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createInverseConductanceQuantum\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { modDependencies } from './dependenciesMod.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { xgcdDependencies } from './dependenciesXgcd.generated.js';\nimport { createInvmod } from '../../factoriesAny.js';\nexport var invmodDependencies = {\n  BigNumberDependencies,\n  addDependencies,\n  equalDependencies,\n  isIntegerDependencies,\n  modDependencies,\n  smallerDependencies,\n  typedDependencies,\n  xgcdDependencies,\n  createInvmod\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMod } from '../../factoriesAny.js';\nexport var modDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createMod\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createXgcd } from '../../factoriesAny.js';\nexport var xgcdDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createXgcd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsNaN } from '../../factoriesAny.js';\nexport var isNaNDependencies = {\n  typedDependencies,\n  createIsNaN\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createIsPrime } from '../../factoriesAny.js';\nexport var isPrimeDependencies = {\n  typedDependencies,\n  createIsPrime\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { logDependencies } from './dependenciesLog.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sumDependencies } from './dependenciesSum.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createKldivergence } from '../../factoriesAny.js';\nexport var kldivergenceDependencies = {\n  divideDependencies,\n  dotDivideDependencies,\n  isNumericDependencies,\n  logDependencies,\n  mapDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  sumDependencies,\n  typedDependencies,\n  createKldivergence\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog } from '../../factoriesAny.js';\nexport var logDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  typedDependencies,\n  createLog\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMap } from '../../factoriesAny.js';\nexport var mapDependencies = {\n  typedDependencies,\n  createMap\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSum } from '../../factoriesAny.js';\nexport var sumDependencies = {\n  addDependencies,\n  numericDependencies,\n  typedDependencies,\n  createSum\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createKlitzing } from '../../factoriesAny.js';\nexport var klitzingDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createKlitzing\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createKron } from '../../factoriesAny.js';\nexport var kronDependencies = {\n  matrixDependencies,\n  multiplyScalarDependencies,\n  typedDependencies,\n  createKron\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLN10 } from '../../factoriesAny.js';\nexport var LN10Dependencies = {\n  BigNumberDependencies,\n  createLN10\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLN2 } from '../../factoriesAny.js';\nexport var LN2Dependencies = {\n  BigNumberDependencies,\n  createLN2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLOG10E } from '../../factoriesAny.js';\nexport var LOG10EDependencies = {\n  BigNumberDependencies,\n  createLOG10E\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createLOG2E } from '../../factoriesAny.js';\nexport var LOG2EDependencies = {\n  BigNumberDependencies,\n  createLOG2E\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLcm } from '../../factoriesAny.js';\nexport var lcmDependencies = {\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createLcm\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLeafCount } from '../../factoriesAny.js';\nexport var leafCountDependencies = {\n  parseDependencies,\n  typedDependencies,\n  createLeafCount\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createLeftShift } from '../../factoriesAny.js';\nexport var leftShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createLeftShift\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLgamma } from '../../factoriesAny.js';\nexport var lgammaDependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLgamma\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog10 } from '../../factoriesAny.js';\nexport var log10Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLog10\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { logDependencies } from './dependenciesLog.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog1p } from '../../factoriesAny.js';\nexport var log1pDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  logDependencies,\n  typedDependencies,\n  createLog1p\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLog2 } from '../../factoriesAny.js';\nexport var log2Dependencies = {\n  ComplexDependencies,\n  typedDependencies,\n  createLog2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createLoschmidt } from '../../factoriesAny.js';\nexport var loschmidtDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createLoschmidt\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLsolve } from '../../factoriesAny.js';\nexport var lsolveDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createLsolve\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLsolveAll } from '../../factoriesAny.js';\nexport var lsolveAllDependencies = {\n  DenseMatrixDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createLsolveAll\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SpaDependencies } from './dependenciesSpaClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createLup } from '../../factoriesAny.js';\nexport var lupDependencies = {\n  DenseMatrixDependencies,\n  SpaDependencies,\n  SparseMatrixDependencies,\n  absDependencies,\n  addScalarDependencies,\n  divideScalarDependencies,\n  equalScalarDependencies,\n  largerDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  subtractDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createLup\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { FibonacciHeapDependencies } from './dependenciesFibonacciHeapClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { createSpaClass } from '../../factoriesAny.js';\nexport var SpaDependencies = {\n  FibonacciHeapDependencies,\n  addScalarDependencies,\n  equalScalarDependencies,\n  createSpaClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { lsolveDependencies } from './dependenciesLsolve.generated.js';\nimport { lupDependencies } from './dependenciesLup.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sluDependencies } from './dependenciesSlu.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { usolveDependencies } from './dependenciesUsolve.generated.js';\nimport { createLusolve } from '../../factoriesAny.js';\nexport var lusolveDependencies = {\n  DenseMatrixDependencies,\n  lsolveDependencies,\n  lupDependencies,\n  matrixDependencies,\n  sluDependencies,\n  typedDependencies,\n  usolveDependencies,\n  createLusolve\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSlu } from '../../factoriesAny.js';\nexport var sluDependencies = {\n  SparseMatrixDependencies,\n  absDependencies,\n  addDependencies,\n  divideScalarDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createSlu\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sylvesterDependencies } from './dependenciesSylvester.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createLyap } from '../../factoriesAny.js';\nexport var lyapDependencies = {\n  matrixDependencies,\n  multiplyDependencies,\n  sylvesterDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createLyap\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { indexDependencies } from './dependenciesIndex.generated.js';\nimport { lusolveDependencies } from './dependenciesLusolve.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { matrixFromColumnsDependencies } from './dependenciesMatrixFromColumns.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { schurDependencies } from './dependenciesSchur.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { transposeDependencies } from './dependenciesTranspose.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSylvester } from '../../factoriesAny.js';\nexport var sylvesterDependencies = {\n  absDependencies,\n  addDependencies,\n  concatDependencies,\n  identityDependencies,\n  indexDependencies,\n  lusolveDependencies,\n  matrixDependencies,\n  matrixFromColumnsDependencies,\n  multiplyDependencies,\n  rangeDependencies,\n  schurDependencies,\n  subsetDependencies,\n  subtractDependencies,\n  transposeDependencies,\n  typedDependencies,\n  createSylvester\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { normDependencies } from './dependenciesNorm.generated.js';\nimport { qrDependencies } from './dependenciesQr.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSchur } from '../../factoriesAny.js';\nexport var schurDependencies = {\n  identityDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  normDependencies,\n  qrDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSchur\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { conjDependencies } from './dependenciesConj.generated.js';\nimport { ctransposeDependencies } from './dependenciesCtranspose.generated.js';\nimport { eigsDependencies } from './dependenciesEigs.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNorm } from '../../factoriesAny.js';\nexport var normDependencies = {\n  absDependencies,\n  addDependencies,\n  conjDependencies,\n  ctransposeDependencies,\n  eigsDependencies,\n  equalScalarDependencies,\n  largerDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  powDependencies,\n  smallerDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  createNorm\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { medianDependencies } from './dependenciesMedian.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMad } from '../../factoriesAny.js';\nexport var madDependencies = {\n  absDependencies,\n  mapDependencies,\n  medianDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createMad\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { partitionSelectDependencies } from './dependenciesPartitionSelect.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMedian } from '../../factoriesAny.js';\nexport var medianDependencies = {\n  addDependencies,\n  compareDependencies,\n  divideDependencies,\n  partitionSelectDependencies,\n  typedDependencies,\n  createMedian\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPartitionSelect } from '../../factoriesAny.js';\nexport var partitionSelectDependencies = {\n  compareDependencies,\n  isNaNDependencies,\n  isNumericDependencies,\n  typedDependencies,\n  createPartitionSelect\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMagneticConstant } from '../../factoriesAny.js';\nexport var magneticConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMagneticConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMagneticFluxQuantum } from '../../factoriesAny.js';\nexport var magneticFluxQuantumDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMagneticFluxQuantum\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMapTransform } from '../../factoriesAny.js';\nexport var mapTransformDependencies = {\n  typedDependencies,\n  createMapTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromFunction } from '../../factoriesAny.js';\nexport var matrixFromFunctionDependencies = {\n  isZeroDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createMatrixFromFunction\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { flattenDependencies } from './dependenciesFlatten.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMatrixFromRows } from '../../factoriesAny.js';\nexport var matrixFromRowsDependencies = {\n  flattenDependencies,\n  matrixDependencies,\n  sizeDependencies,\n  typedDependencies,\n  createMatrixFromRows\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMax } from '../../factoriesAny.js';\nexport var maxDependencies = {\n  largerDependencies,\n  numericDependencies,\n  typedDependencies,\n  createMax\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMaxTransform } from '../../factoriesAny.js';\nexport var maxTransformDependencies = {\n  largerDependencies,\n  numericDependencies,\n  typedDependencies,\n  createMaxTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMean } from '../../factoriesAny.js';\nexport var meanDependencies = {\n  addDependencies,\n  divideDependencies,\n  typedDependencies,\n  createMean\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMeanTransform } from '../../factoriesAny.js';\nexport var meanTransformDependencies = {\n  addDependencies,\n  divideDependencies,\n  typedDependencies,\n  createMeanTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMin } from '../../factoriesAny.js';\nexport var minDependencies = {\n  numericDependencies,\n  smallerDependencies,\n  typedDependencies,\n  createMin\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMinTransform } from '../../factoriesAny.js';\nexport var minTransformDependencies = {\n  numericDependencies,\n  smallerDependencies,\n  typedDependencies,\n  createMinTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { isNumericDependencies } from './dependenciesIsNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMode } from '../../factoriesAny.js';\nexport var modeDependencies = {\n  isNaNDependencies,\n  isNumericDependencies,\n  typedDependencies,\n  createMode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarMass } from '../../factoriesAny.js';\nexport var molarMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarMassC12 } from '../../factoriesAny.js';\nexport var molarMassC12Dependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarMassC12\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarPlanckConstant } from '../../factoriesAny.js';\nexport var molarPlanckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarPlanckConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createMolarVolume } from '../../factoriesAny.js';\nexport var molarVolumeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createMolarVolume\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { isPositiveDependencies } from './dependenciesIsPositive.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createMultinomial } from '../../factoriesAny.js';\nexport var multinomialDependencies = {\n  addDependencies,\n  divideDependencies,\n  factorialDependencies,\n  isIntegerDependencies,\n  isPositiveDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createMultinomial\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createNaN } from '../../factoriesAny.js';\nexport var NaNDependencies = {\n  BigNumberDependencies,\n  createNaN\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createNeutronMass } from '../../factoriesAny.js';\nexport var neutronMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createNeutronMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNthRoot } from '../../factoriesAny.js';\nexport var nthRootDependencies = {\n  BigNumberDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createNthRoot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createNthRoots } from '../../factoriesAny.js';\nexport var nthRootsDependencies = {\n  ComplexDependencies,\n  divideScalarDependencies,\n  typedDependencies,\n  createNthRoots\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createNuclearMagneton } from '../../factoriesAny.js';\nexport var nuclearMagnetonDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createNuclearMagneton\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createNull } from '../../factoriesAny.js';\nexport var nullDependencies = {\n  createNull\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { formatDependencies } from './dependenciesFormat.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOct } from '../../factoriesAny.js';\nexport var octDependencies = {\n  formatDependencies,\n  typedDependencies,\n  createOct\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOnes } from '../../factoriesAny.js';\nexport var onesDependencies = {\n  BigNumberDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createOnes\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createOr } from '../../factoriesAny.js';\nexport var orDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createOr\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ParserDependencies } from './dependenciesParserClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createParser } from '../../factoriesAny.js';\nexport var parserDependencies = {\n  ParserDependencies,\n  typedDependencies,\n  createParser\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { evaluateDependencies } from './dependenciesEvaluate.generated.js';\nimport { createParserClass } from '../../factoriesAny.js';\nexport var ParserDependencies = {\n  evaluateDependencies,\n  createParserClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { factorialDependencies } from './dependenciesFactorial.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPermutations } from '../../factoriesAny.js';\nexport var permutationsDependencies = {\n  factorialDependencies,\n  typedDependencies,\n  createPermutations\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createPhi } from '../../factoriesAny.js';\nexport var phiDependencies = {\n  BigNumberDependencies,\n  createPhi\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createPi } from '../../factoriesAny.js';\nexport var piDependencies = {\n  BigNumberDependencies,\n  createPi\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPickRandom } from '../../factoriesAny.js';\nexport var pickRandomDependencies = {\n  typedDependencies,\n  createPickRandom\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { ComplexDependencies } from './dependenciesComplexClass.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { ctransposeDependencies } from './dependenciesCtranspose.generated.js';\nimport { deepEqualDependencies } from './dependenciesDeepEqual.generated.js';\nimport { divideScalarDependencies } from './dependenciesDivideScalar.generated.js';\nimport { dotDependencies } from './dependenciesDot.generated.js';\nimport { dotDivideDependencies } from './dependenciesDotDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPinv } from '../../factoriesAny.js';\nexport var pinvDependencies = {\n  ComplexDependencies,\n  addDependencies,\n  ctransposeDependencies,\n  deepEqualDependencies,\n  divideScalarDependencies,\n  dotDependencies,\n  dotDivideDependencies,\n  equalDependencies,\n  invDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  typedDependencies,\n  createPinv\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckCharge } from '../../factoriesAny.js';\nexport var planckChargeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckCharge\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckConstant } from '../../factoriesAny.js';\nexport var planckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckLength } from '../../factoriesAny.js';\nexport var planckLengthDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckLength\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckMass } from '../../factoriesAny.js';\nexport var planckMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckTemperature } from '../../factoriesAny.js';\nexport var planckTemperatureDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckTemperature\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createPlanckTime } from '../../factoriesAny.js';\nexport var planckTimeDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createPlanckTime\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { cbrtDependencies } from './dependenciesCbrt.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { imDependencies } from './dependenciesIm.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { reDependencies } from './dependenciesRe.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typeOfDependencies } from './dependenciesTypeOf.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createPolynomialRoot } from '../../factoriesAny.js';\nexport var polynomialRootDependencies = {\n  addDependencies,\n  cbrtDependencies,\n  divideDependencies,\n  equalScalarDependencies,\n  imDependencies,\n  isZeroDependencies,\n  multiplyDependencies,\n  reDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typeOfDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createPolynomialRoot\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTypeOf } from '../../factoriesAny.js';\nexport var typeOfDependencies = {\n  typedDependencies,\n  createTypeOf\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createPrint } from '../../factoriesAny.js';\nexport var printDependencies = {\n  typedDependencies,\n  createPrint\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createProtonMass } from '../../factoriesAny.js';\nexport var protonMassDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createProtonMass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { partitionSelectDependencies } from './dependenciesPartitionSelect.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createQuantileSeq } from '../../factoriesAny.js';\nexport var quantileSeqDependencies = {\n  addDependencies,\n  compareDependencies,\n  multiplyDependencies,\n  partitionSelectDependencies,\n  typedDependencies,\n  createQuantileSeq\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createQuantumOfCirculation } from '../../factoriesAny.js';\nexport var quantumOfCirculationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createQuantumOfCirculation\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRandom } from '../../factoriesAny.js';\nexport var randomDependencies = {\n  typedDependencies,\n  createRandom\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRandomInt } from '../../factoriesAny.js';\nexport var randomIntDependencies = {\n  typedDependencies,\n  createRandomInt\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createRangeClass } from '../../factoriesAny.js';\nexport var RangeDependencies = {\n  createRangeClass\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { largerDependencies } from './dependenciesLarger.generated.js';\nimport { largerEqDependencies } from './dependenciesLargerEq.generated.js';\nimport { smallerDependencies } from './dependenciesSmaller.generated.js';\nimport { smallerEqDependencies } from './dependenciesSmallerEq.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRangeTransform } from '../../factoriesAny.js';\nexport var rangeTransformDependencies = {\n  bignumberDependencies,\n  matrixDependencies,\n  largerDependencies,\n  largerEqDependencies,\n  smallerDependencies,\n  smallerEqDependencies,\n  typedDependencies,\n  createRangeTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { bignumberDependencies } from './dependenciesBignumber.generated.js';\nimport { fractionDependencies } from './dependenciesFraction.generated.js';\nimport { AccessorNodeDependencies } from './dependenciesAccessorNode.generated.js';\nimport { ArrayNodeDependencies } from './dependenciesArrayNode.generated.js';\nimport { ConstantNodeDependencies } from './dependenciesConstantNode.generated.js';\nimport { FunctionNodeDependencies } from './dependenciesFunctionNode.generated.js';\nimport { IndexNodeDependencies } from './dependenciesIndexNode.generated.js';\nimport { ObjectNodeDependencies } from './dependenciesObjectNode.generated.js';\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { ParenthesisNodeDependencies } from './dependenciesParenthesisNode.generated.js';\nimport { SymbolNodeDependencies } from './dependenciesSymbolNode.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { equalDependencies } from './dependenciesEqual.generated.js';\nimport { isZeroDependencies } from './dependenciesIsZero.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { powDependencies } from './dependenciesPow.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { simplifyConstantDependencies } from './dependenciesSimplifyConstant.generated.js';\nimport { simplifyCoreDependencies } from './dependenciesSimplifyCore.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRationalize } from '../../factoriesAny.js';\nexport var rationalizeDependencies = {\n  bignumberDependencies,\n  fractionDependencies,\n  AccessorNodeDependencies,\n  ArrayNodeDependencies,\n  ConstantNodeDependencies,\n  FunctionNodeDependencies,\n  IndexNodeDependencies,\n  ObjectNodeDependencies,\n  OperatorNodeDependencies,\n  ParenthesisNodeDependencies,\n  SymbolNodeDependencies,\n  addDependencies,\n  divideDependencies,\n  equalDependencies,\n  isZeroDependencies,\n  matrixDependencies,\n  multiplyDependencies,\n  parseDependencies,\n  powDependencies,\n  simplifyDependencies,\n  simplifyConstantDependencies,\n  simplifyCoreDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createRationalize\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createReducedPlanckConstant } from '../../factoriesAny.js';\nexport var reducedPlanckConstantDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createReducedPlanckConstant\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createReplacer } from '../../factoriesAny.js';\nexport var replacerDependencies = {\n  createReplacer\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { isIntegerDependencies } from './dependenciesIsInteger.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createReshape } from '../../factoriesAny.js';\nexport var reshapeDependencies = {\n  isIntegerDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createReshape\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { createResize } from '../../factoriesAny.js';\nexport var resizeDependencies = {\n  matrixDependencies,\n  createResize\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createReviver } from '../../factoriesAny.js';\nexport var reviverDependencies = {\n  createReviver\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRightArithShift } from '../../factoriesAny.js';\nexport var rightArithShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRightArithShift\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { zerosDependencies } from './dependenciesZeros.generated.js';\nimport { createRightLogShift } from '../../factoriesAny.js';\nexport var rightLogShiftDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  zerosDependencies,\n  createRightLogShift\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { rotationMatrixDependencies } from './dependenciesRotationMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRotate } from '../../factoriesAny.js';\nexport var rotateDependencies = {\n  multiplyDependencies,\n  rotationMatrixDependencies,\n  typedDependencies,\n  createRotate\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { addScalarDependencies } from './dependenciesAddScalar.generated.js';\nimport { cosDependencies } from './dependenciesCos.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { multiplyScalarDependencies } from './dependenciesMultiplyScalar.generated.js';\nimport { normDependencies } from './dependenciesNorm.generated.js';\nimport { sinDependencies } from './dependenciesSin.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { unaryMinusDependencies } from './dependenciesUnaryMinus.generated.js';\nimport { createRotationMatrix } from '../../factoriesAny.js';\nexport var rotationMatrixDependencies = {\n  BigNumberDependencies,\n  DenseMatrixDependencies,\n  SparseMatrixDependencies,\n  addScalarDependencies,\n  cosDependencies,\n  matrixDependencies,\n  multiplyScalarDependencies,\n  normDependencies,\n  sinDependencies,\n  typedDependencies,\n  unaryMinusDependencies,\n  createRotationMatrix\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRow } from '../../factoriesAny.js';\nexport var rowDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createRow\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { rangeDependencies } from './dependenciesRange.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createRowTransform } from '../../factoriesAny.js';\nexport var rowTransformDependencies = {\n  IndexDependencies,\n  matrixDependencies,\n  rangeDependencies,\n  typedDependencies,\n  createRowTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createRydberg } from '../../factoriesAny.js';\nexport var rydbergDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createRydberg\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSQRT1_2 } from '../../factoriesAny.js'; // eslint-disable-line camelcase\n\nexport var SQRT1_2Dependencies = {\n  // eslint-disable-line camelcase\n  BigNumberDependencies,\n  createSQRT1_2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSQRT2 } from '../../factoriesAny.js';\nexport var SQRT2Dependencies = {\n  BigNumberDependencies,\n  createSQRT2\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createSackurTetrode } from '../../factoriesAny.js';\nexport var sackurTetrodeDependencies = {\n  BigNumberDependencies,\n  createSackurTetrode\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSec } from '../../factoriesAny.js';\nexport var secDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createSec\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSech } from '../../factoriesAny.js';\nexport var sechDependencies = {\n  BigNumberDependencies,\n  typedDependencies,\n  createSech\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createSecondRadiation } from '../../factoriesAny.js';\nexport var secondRadiationDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createSecondRadiation\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetCartesian } from '../../factoriesAny.js';\nexport var setCartesianDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetCartesian\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetDifference } from '../../factoriesAny.js';\nexport var setDifferenceDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetDifference\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetDistinct } from '../../factoriesAny.js';\nexport var setDistinctDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetDistinct\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetIntersect } from '../../factoriesAny.js';\nexport var setIntersectDependencies = {\n  DenseMatrixDependencies,\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetIntersect\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetIsSubset } from '../../factoriesAny.js';\nexport var setIsSubsetDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetIsSubset\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetMultiplicity } from '../../factoriesAny.js';\nexport var setMultiplicityDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetMultiplicity\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetPowerset } from '../../factoriesAny.js';\nexport var setPowersetDependencies = {\n  IndexDependencies,\n  compareNaturalDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetPowerset\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetSize } from '../../factoriesAny.js';\nexport var setSizeDependencies = {\n  compareNaturalDependencies,\n  typedDependencies,\n  createSetSize\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { setDifferenceDependencies } from './dependenciesSetDifference.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetSymDifference } from '../../factoriesAny.js';\nexport var setSymDifferenceDependencies = {\n  IndexDependencies,\n  concatDependencies,\n  setDifferenceDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetSymDifference\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { IndexDependencies } from './dependenciesIndexClass.generated.js';\nimport { concatDependencies } from './dependenciesConcat.generated.js';\nimport { setIntersectDependencies } from './dependenciesSetIntersect.generated.js';\nimport { setSymDifferenceDependencies } from './dependenciesSetSymDifference.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { subsetDependencies } from './dependenciesSubset.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSetUnion } from '../../factoriesAny.js';\nexport var setUnionDependencies = {\n  IndexDependencies,\n  concatDependencies,\n  setIntersectDependencies,\n  setSymDifferenceDependencies,\n  sizeDependencies,\n  subsetDependencies,\n  typedDependencies,\n  createSetUnion\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSinh } from '../../factoriesAny.js';\nexport var sinhDependencies = {\n  typedDependencies,\n  createSinh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { compareDependencies } from './dependenciesCompare.generated.js';\nimport { compareNaturalDependencies } from './dependenciesCompareNatural.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSort } from '../../factoriesAny.js';\nexport var sortDependencies = {\n  compareDependencies,\n  compareNaturalDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createSort\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { SparseMatrixDependencies } from './dependenciesSparseMatrixClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSparse } from '../../factoriesAny.js';\nexport var sparseDependencies = {\n  SparseMatrixDependencies,\n  typedDependencies,\n  createSparse\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createSpeedOfLight } from '../../factoriesAny.js';\nexport var speedOfLightDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createSpeedOfLight\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSplitUnit } from '../../factoriesAny.js';\nexport var splitUnitDependencies = {\n  typedDependencies,\n  createSplitUnit\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { absDependencies } from './dependenciesAbs.generated.js';\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { identityDependencies } from './dependenciesIdentity.generated.js';\nimport { invDependencies } from './dependenciesInv.generated.js';\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { maxDependencies } from './dependenciesMax.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { sizeDependencies } from './dependenciesSize.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqrtm } from '../../factoriesAny.js';\nexport var sqrtmDependencies = {\n  absDependencies,\n  addDependencies,\n  identityDependencies,\n  invDependencies,\n  mapDependencies,\n  maxDependencies,\n  multiplyDependencies,\n  sizeDependencies,\n  sqrtDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createSqrtm\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSquare } from '../../factoriesAny.js';\nexport var squareDependencies = {\n  typedDependencies,\n  createSquare\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSqueeze } from '../../factoriesAny.js';\nexport var squeezeDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSqueeze\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { varianceDependencies } from './dependenciesVariance.generated.js';\nimport { createStd } from '../../factoriesAny.js';\nexport var stdDependencies = {\n  mapDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  varianceDependencies,\n  createStd\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { applyDependencies } from './dependenciesApply.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createVariance } from '../../factoriesAny.js';\nexport var varianceDependencies = {\n  addDependencies,\n  applyDependencies,\n  divideDependencies,\n  isNaNDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createVariance\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { mapDependencies } from './dependenciesMap.generated.js';\nimport { sqrtDependencies } from './dependenciesSqrt.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { varianceDependencies } from './dependenciesVariance.generated.js';\nimport { createStdTransform } from '../../factoriesAny.js';\nexport var stdTransformDependencies = {\n  mapDependencies,\n  sqrtDependencies,\n  typedDependencies,\n  varianceDependencies,\n  createStdTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createStefanBoltzmann } from '../../factoriesAny.js';\nexport var stefanBoltzmannDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createStefanBoltzmann\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createString } from '../../factoriesAny.js';\nexport var stringDependencies = {\n  typedDependencies,\n  createString\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSubsetTransform } from '../../factoriesAny.js';\nexport var subsetTransformDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createSubsetTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { numericDependencies } from './dependenciesNumeric.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSumTransform } from '../../factoriesAny.js';\nexport var sumTransformDependencies = {\n  addDependencies,\n  numericDependencies,\n  typedDependencies,\n  createSumTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { OperatorNodeDependencies } from './dependenciesOperatorNode.generated.js';\nimport { parseDependencies } from './dependenciesParse.generated.js';\nimport { simplifyDependencies } from './dependenciesSimplify.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createSymbolicEqual } from '../../factoriesAny.js';\nexport var symbolicEqualDependencies = {\n  OperatorNodeDependencies,\n  parseDependencies,\n  simplifyDependencies,\n  typedDependencies,\n  createSymbolicEqual\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTan } from '../../factoriesAny.js';\nexport var tanDependencies = {\n  typedDependencies,\n  createTan\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTanh } from '../../factoriesAny.js';\nexport var tanhDependencies = {\n  typedDependencies,\n  createTanh\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createThomsonCrossSection } from '../../factoriesAny.js';\nexport var thomsonCrossSectionDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createThomsonCrossSection\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTo } from '../../factoriesAny.js';\nexport var toDependencies = {\n  matrixDependencies,\n  typedDependencies,\n  createTo\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createTrace } from '../../factoriesAny.js';\nexport var traceDependencies = {\n  addDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createTrace\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createTrue } from '../../factoriesAny.js';\nexport var trueDependencies = {\n  createTrue\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { equalScalarDependencies } from './dependenciesEqualScalar.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnequal } from '../../factoriesAny.js';\nexport var unequalDependencies = {\n  DenseMatrixDependencies,\n  equalScalarDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createUnequal\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createUnitFunction } from '../../factoriesAny.js';\nexport var unitDependencies = {\n  UnitDependencies,\n  typedDependencies,\n  createUnitFunction\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { eDependencies } from './dependenciesE.generated.js';\nimport { createUppercaseE } from '../../factoriesAny.js';\nexport var EDependencies = {\n  eDependencies,\n  createUppercaseE\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { piDependencies } from './dependenciesPi.generated.js';\nimport { createUppercasePi } from '../../factoriesAny.js';\nexport var PIDependencies = {\n  piDependencies,\n  createUppercasePi\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createVacuumImpedance } from '../../factoriesAny.js';\nexport var vacuumImpedanceDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createVacuumImpedance\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { addDependencies } from './dependenciesAdd.generated.js';\nimport { applyDependencies } from './dependenciesApply.generated.js';\nimport { divideDependencies } from './dependenciesDivide.generated.js';\nimport { isNaNDependencies } from './dependenciesIsNaN.generated.js';\nimport { multiplyDependencies } from './dependenciesMultiply.generated.js';\nimport { subtractDependencies } from './dependenciesSubtract.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createVarianceTransform } from '../../factoriesAny.js';\nexport var varianceTransformDependencies = {\n  addDependencies,\n  applyDependencies,\n  divideDependencies,\n  isNaNDependencies,\n  multiplyDependencies,\n  subtractDependencies,\n  typedDependencies,\n  createVarianceTransform\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { createVersion } from '../../factoriesAny.js';\nexport var versionDependencies = {\n  createVersion\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { createWeakMixingAngle } from '../../factoriesAny.js';\nexport var weakMixingAngleDependencies = {\n  BigNumberDependencies,\n  createWeakMixingAngle\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { BigNumberDependencies } from './dependenciesBigNumberClass.generated.js';\nimport { UnitDependencies } from './dependenciesUnitClass.generated.js';\nimport { createWienDisplacement } from '../../factoriesAny.js';\nexport var wienDisplacementDependencies = {\n  BigNumberDependencies,\n  UnitDependencies,\n  createWienDisplacement\n};","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { DenseMatrixDependencies } from './dependenciesDenseMatrixClass.generated.js';\nimport { matrixDependencies } from './dependenciesMatrix.generated.js';\nimport { typedDependencies } from './dependenciesTyped.generated.js';\nimport { createXor } from '../../factoriesAny.js';\nexport var xorDependencies = {\n  DenseMatrixDependencies,\n  matrixDependencies,\n  typedDependencies,\n  createXor\n};","// creating all factories here in a separate file is needed to get tree-shaking working\nimport * as allFactories from '../factoriesAny.js';\nexport var all = allFactories;","import _extends from \"@babel/runtime/helpers/extends\";\nimport typedFunction from 'typed-function';\nimport { deepFlatten, isLegacyFactory, values } from '../utils/object.js';\nimport * as emitter from './../utils/emitter.js';\nimport { importFactory } from './function/import.js';\nimport { configFactory } from './function/config.js';\nimport { factory, isFactory } from '../utils/factory.js';\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRelationalNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../utils/is.js';\nimport { ArgumentsError } from '../error/ArgumentsError.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { DEFAULT_CONFIG } from './config.js';\n\n/**\n * Create a mathjs instance from given factory functions and optionally config\n *\n * Usage:\n *\n *     const mathjs1 = create({ createAdd, createMultiply, ...})\n *     const config = { number: 'BigNumber' }\n *     const mathjs2 = create(all, config)\n *\n * @param {Object} [factories] An object with factory functions\n *                             The object can contain nested objects,\n *                             all nested objects will be flattened.\n * @param {Object} [config]    Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\nexport function create(factories, config) {\n  var configInternal = _extends({}, DEFAULT_CONFIG, config);\n\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  }\n\n  // create the mathjs instance\n  var math = emitter.mixin({\n    // only here for backward compatibility for legacy factory functions\n    isNumber,\n    isComplex,\n    isBigNumber,\n    isFraction,\n    isUnit,\n    isString,\n    isArray,\n    isMatrix,\n    isCollection,\n    isDenseMatrix,\n    isSparseMatrix,\n    isRange,\n    isIndex,\n    isBoolean,\n    isResultSet,\n    isHelp,\n    isFunction,\n    isDate,\n    isRegExp,\n    isObject,\n    isNull,\n    isUndefined,\n    isAccessorNode,\n    isArrayNode,\n    isAssignmentNode,\n    isBlockNode,\n    isConditionalNode,\n    isConstantNode,\n    isFunctionAssignmentNode,\n    isFunctionNode,\n    isIndexNode,\n    isNode,\n    isObjectNode,\n    isOperatorNode,\n    isParenthesisNode,\n    isRangeNode,\n    isRelationalNode,\n    isSymbolNode,\n    isChain\n  });\n\n  // load config function and apply provided config\n  math.config = configFactory(configInternal, math.emit);\n  math.expression = {\n    transform: {},\n    mathWithTransform: {\n      config: math.config\n    }\n  };\n\n  // cached factories and instances used by function load\n  var legacyFactories = [];\n  var legacyInstances = [];\n\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {Function} factory\n   * @returns {*}\n   */\n  function load(factory) {\n    if (isFactory(factory)) {\n      return factory(math);\n    }\n    var firstProperty = factory[Object.keys(factory)[0]];\n    if (isFactory(firstProperty)) {\n      return firstProperty(math);\n    }\n    if (!isLegacyFactory(factory)) {\n      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n    var index = legacyFactories.indexOf(factory);\n    var instance;\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, configInternal, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, configInternal, load, math.typed);\n      }\n\n      // append to the cache\n      legacyFactories.push(factory);\n      legacyInstances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = legacyInstances[index];\n    }\n    return instance;\n  }\n  var importedFactories = {};\n\n  // load the import function\n  function lazyTyped() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return math.typed.apply(math.typed, args);\n  }\n  lazyTyped.isTypedFunction = typedFunction.isTypedFunction;\n  var internalImport = importFactory(lazyTyped, load, math, importedFactories);\n  math.import = internalImport;\n\n  // listen for changes in config, import all functions again when changed\n  // TODO: move this listener into the import function?\n  math.on('config', () => {\n    values(importedFactories).forEach(factory => {\n      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {\n        // FIXME: only re-create when the current instance is the same as was initially created\n        // FIXME: delete the functions/constants before importing them again?\n        internalImport(factory, {\n          override: true\n        });\n      }\n    });\n  });\n\n  // the create function exposed on the mathjs instance is bound to\n  // the factory functions passed before\n  math.create = create.bind(null, factories);\n\n  // export factory function\n  math.factory = factory;\n\n  // import the factory functions like createAdd as an array instead of object,\n  // else they will get a different naming (`createAdd` instead of `add`).\n  math.import(values(deepFlatten(factories)));\n  math.ArgumentsError = ArgumentsError;\n  math.DimensionError = DimensionError;\n  math.IndexError = IndexError;\n  return math;\n}","import Emitter from 'tiny-emitter';\n\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\nexport function mixin(obj) {\n  // create event emitter\n  var emitter = new Emitter();\n\n  // bind methods to obj (we don't want to expose the emitter.e Array...)\n  obj.on = emitter.on.bind(emitter);\n  obj.off = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n  return obj;\n}","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","import { isBigNumber, isComplex, isFraction, isMatrix, isUnit } from '../../utils/is.js';\nimport { isFactory, stripOptionalNotation } from '../../utils/factory.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { contains } from '../../utils/array.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nexport function importFactory(typed, load, math, importedFactories) {\n  /**\n   * Import functions from an object or a module.\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *    math.import(functions)\n   *    math.import(functions, options)\n   *\n   * Where:\n   *\n   * - `functions: Object`\n   *   An object with functions or factories to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    import { create, all } from 'mathjs'\n   *    import * as numbers from 'numbers'\n   *\n   *    // create a mathjs instance\n   *    const math = create(all)\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(numbers, {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} functions  Object with functions to be imported.\n   * @param {Object} [options]          Import options.\n   */\n  function mathImport(functions, options) {\n    var num = arguments.length;\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n    if (!options) {\n      options = {};\n    }\n    function flattenImports(flatValues, value, name) {\n      if (Array.isArray(value)) {\n        value.forEach(item => flattenImports(flatValues, item));\n      } else if (typeof value === 'object') {\n        for (var _name in value) {\n          if (hasOwnProperty(value, _name)) {\n            flattenImports(flatValues, value[_name], _name);\n          }\n        }\n      } else if (isFactory(value) || name !== undefined) {\n        var flatName = isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' // TODO: this is ugly\n        : value.fn : name;\n\n        // we allow importing the same function twice if it points to the same implementation\n        if (hasOwnProperty(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {\n          throw new Error('Cannot import \"' + flatName + '\" twice');\n        }\n        flatValues[flatName] = value;\n      } else {\n        if (!options.silent) {\n          throw new TypeError('Factory, Object, or Array expected');\n        }\n      }\n    }\n    var flatValues = {};\n    flattenImports(flatValues, functions);\n    for (var name in flatValues) {\n      if (hasOwnProperty(flatValues, name)) {\n        // console.log('import', name)\n        var value = flatValues[name];\n        if (isFactory(value)) {\n          // we ignore name here and enforce the name of the factory\n          // maybe at some point we do want to allow overriding it\n          // in that case we can implement an option overrideFactoryNames: true\n          _importFactory(value, options);\n        } else if (isSupportedType(value)) {\n          _import(name, value, options);\n        } else {\n          if (!options.silent) {\n            throw new TypeError('Factory, Object, or Array expected');\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a property to the math namespace\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    // turn a plain function with a typed-function signature into a typed-function\n    if (hasTypedFunctionSignature(value)) {\n      value = typed(name, {\n        [value.signature]: value\n      });\n    }\n    if (typed.isTypedFunction(math[name]) && typed.isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n      math[name] = value;\n      delete importedFactories[name];\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n      delete importedFactories[name];\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n      return fn.apply(math, args);\n    };\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n    return wrapper;\n  }\n\n  /**\n   * Import an instance of a factory into math.js\n   * @param {function(scope: object)} factory\n   * @param {Object} options  See import for a description of the options\n   * @param {string} [name=factory.name] Optional custom name\n   * @private\n   */\n  function _importFactory(factory, options) {\n    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;\n    if (contains(name, '.')) {\n      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));\n    }\n    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;\n    var existingTransform = (name in math.expression.transform);\n    var existing = hasOwnProperty(namespace, name) ? namespace[name] : undefined;\n    var resolver = function resolver() {\n      // collect all dependencies, handle finding both functions and classes and other special cases\n      var dependencies = {};\n      factory.dependencies.map(stripOptionalNotation).forEach(dependency => {\n        if (contains(dependency, '.')) {\n          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));\n        }\n        if (dependency === 'math') {\n          dependencies.math = math;\n        } else if (dependency === 'mathWithTransform') {\n          dependencies.mathWithTransform = math.expression.mathWithTransform;\n        } else if (dependency === 'classes') {\n          // special case for json reviver\n          dependencies.classes = math;\n        } else {\n          dependencies[dependency] = math[dependency];\n        }\n      });\n      var instance = /* #__PURE__ */factory(dependencies);\n      if (instance && typeof instance.transform === 'function') {\n        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n      }\n      if (existing === undefined || options.override) {\n        return instance;\n      }\n      if (typed.isTypedFunction(existing) && typed.isTypedFunction(instance)) {\n        // merge the existing and new typed function\n        return typed(existing, instance);\n      }\n      if (options.silent) {\n        // keep existing, ignore imported function\n        return existing;\n      } else {\n        throw new Error('Cannot import \"' + name + '\": already exists');\n      }\n    };\n\n    // TODO: add unit test with non-lazy factory\n    if (!factory.meta || factory.meta.lazy !== false) {\n      lazy(namespace, name, resolver);\n\n      // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, () => namespace[name]);\n        }\n      }\n    } else {\n      namespace[name] = resolver();\n\n      // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)\n      if (existing && existingTransform) {\n        _deleteTransform(name);\n      } else {\n        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {\n          lazy(math.expression.mathWithTransform, name, () => namespace[name]);\n        }\n      }\n    }\n\n    // TODO: improve factories, store a list with imports instead which can be re-played\n    importedFactories[name] = factory;\n    math.emit('import', name, resolver);\n  }\n\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || isUnit(object) || isComplex(object) || isBigNumber(object) || isFraction(object) || isMatrix(object) || Array.isArray(object);\n  }\n  function hasTypedFunctionSignature(fn) {\n    return typeof fn === 'function' && typeof fn.signature === 'string';\n  }\n  function allowedInExpressions(name) {\n    return !hasOwnProperty(unsafe, name);\n  }\n  function factoryAllowedInExpressions(factory) {\n    return factory.fn.indexOf('.') === -1 &&\n    // FIXME: make checking on path redundant, check on meta data instead\n    !hasOwnProperty(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);\n  }\n  function isTransformFunctionFactory(factory) {\n    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;\n  }\n\n  // namespaces and functions not available in the parser for safety reasons\n  var unsafe = {\n    expression: true,\n    type: true,\n    docs: true,\n    error: true,\n    json: true,\n    chain: true // chain method not supported. Note that there is a unit chain too.\n  };\n\n  return mathImport;\n}"],"names":[],"version":3,"file":"questionoutput.67a6b0e0.js.map","sourceRoot":"/__parcel_source_root/"}